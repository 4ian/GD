{"version":3,"sources":["webpack://jfxr/webpack/universalModuleDefinition","webpack://jfxr/webpack/bootstrap","webpack://jfxr/./node_modules/file-saver/dist/FileSaver.min.js","webpack://jfxr/(webpack)/buildin/global.js","webpack://jfxr/../lib/src/math.js","webpack://jfxr/../lib/src/clip.js","webpack://jfxr/./js/shims.js","webpack://jfxr/../lib/src/sound.js","webpack://jfxr/../lib/src/random.js","webpack://jfxr/../lib/src/synth.js","webpack://jfxr/../lib/src/presets.js","webpack://jfxr/./js/mainctrl.js","webpack://jfxr/./js/analyser.js","webpack://jfxr/./js/file.js","webpack://jfxr/./js/history.js","webpack://jfxr/./js/player.js","webpack://jfxr/./js/storage.js","webpack://jfxr/./js/synthfactory.js","webpack://jfxr/./js/ui.js","webpack://jfxr/./js/waveshape.js","webpack://jfxr/./js/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","b","e","XMLHttpRequest","open","responseType","onload","a","response","onerror","console","error","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","f","Function","eval","self","this","saveAs","HTMLAnchorElement","g","h","URL","webkitURL","j","createElement","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","navigator","msSaveOrOpenBlob","autoBom","warn","test","type","Blob","title","body","innerText","HTMLElement","safari","userAgent","FileReader","onloadend","result","replace","readAsDataURL","k","apply","sign","x","NaN","frac","Math","floor","clamp","min","max","roundTo","multiple","round","lerp","Clip","array","sampleRate","AudioContext","webkitAudioContext","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","getSampleRate","getNumSamples","length","toFloat32Array","toWavBytes","floats","numSamples","fileLength","bytes","Uint8Array","nextIndex","byte","asciiString","charCodeAt","uint16le","uint32le","Parameter","args","label","description","unit","numeric","value_","defaultValue","values","minValue","maxValue","step","logarithmic","digits","log","disabledReason_","disabledReason","locked","set","parseFloat","valueTitle","isDisabled","sound","whyDisabled","toggleLocked","reset","hasDefaultValue","Sound","isNotSquare","waveform","attack","sustain","sustainPunch","decay","tremoloDepth","tremoloFrequency","frequency","frequencySweep","frequencyDeltaSweep","repeatFrequency","frequencyJump1Onset","frequencyJump1Amount","frequencyJump2Onset","frequencyJump2Amount","harmonics","harmonicsFalloff","sine","triangle","sawtooth","square","tangent","whistle","breaker","whitenoise","pinknoise","brownnoise","interpolateNoise","vibratoDepth","vibratoFrequency","squareDuty","squareDutySweep","flangerOffset","flangerOffsetSweep","bitCrush","bitCrushSweep","lowPassCutoff","lowPassCutoffSweep","highPassCutoff","highPassCutoffSweep","compression","normalization","amplification","duration","amplitudeAt","time","amp","cos","PI","effectiveRepeatFrequency","frequencyAt","fractionInRepetition","freq","sin","squareDutyAt","forEachParam","func","param","clone","parse","serialize","json","_version","_name","_locked","push","JSON","stringify","str","Error","Random","seed","Date","now","y","z","w","uint32","uniform","int","boolean","trueProbability","fromArray","Synth","ceil","Float32Array","classes","Generator","Envelope","Tremolo","Flanger","BitCrush","LowPass","HighPass","Compress","Normalize","Amplify","transformers","startTime","startSample","blockSize","run","doneCallback","tick","isRunning","cancel","endSample","renderTimeMs","oscillatorClass","SineOscillator","TriangleOscillator","SawtoothOscillator","SquareOscillator","TangentOscillator","WhistleOscillator","BreakerOscillator","WhiteNoiseOscillator","PinkNoiseOscillator","BrownNoiseOscillator","totalAmp","oscillators","harmonicIndex","firstHarmonicAmp","phase","prevPhase","sample","harmonicPhase","getSample","tan","sqrt","abs","random","prevRandom","currRandom","white","buffer","bufferPos","bufferLength","offsetSamples","bits","steps","pow","lowPassPrev","lowPassAlpha","wc","cosWc","highPassPrevIn","highPassPrevOut","highPassAlpha","origSample","maxSample","factor","Preset","applyTo","randomize","v","mutate","range","ALL_PRESETS","attackSustainDecay","repeatJump","tmp","MainCtrl","context","Player","$scope","$timeout","$window","localStorage","fileStorage","history","synthFactory","showDonateTooltip","showSafariWarning","callback","svg","img","Image","src","callIfSaveAsBroken","player","synth","analyserEnabled","autoplay","createNew","presets","link","hoveredParam","dismissDonateTooltip","dismissDonateTooltipForever","getSounds","getSound","getCurrentSound","currentSoundIndex","getCurrentIndex","setCurrentSoundIndex","index","setCurrentIndex","deleteSound","isPlaying","playing","togglePlay","stop","play","getFrequencyData","openSound","loadJfxr","then","addSound","saveSound","saveJfxr","duplicateSound","createLink","url","hash","encodeURIComponent","exportSound","clip","downloadWav","applyPreset","preset","newSound","jfxr","canUndo","undo","keyDown","tagName","keyCode","preventDefault","soundNameKeyDown","currentName","blur","$watch","angular","isDefined","createBuffer","getChannelData","$on","$event","decodeURIComponent","ex","parseHash","analyser","scope","enabled","element","attrs","ctrl","canvas","getContext","width","height","animFrame","data","barWidth","numBars","numBlocks","clearRect","gradient","createLinearGradient","addColorStop","fillStyle","globalAlpha","fillRect","draw","file_fileStorage","$q","blob","filename","FileSaver_min","basename","input","deferred","defer","on","file","files","reader","addEventListener","resolve","reject","readAsText","focus","click","promise","upload","msg","history_history","$rootScope","sounds","undoStacks","soundIndex","getFreeName","splice","dup","undoStack","match","parseInt","storageName","storeSound","$watchCollection","oldValue","delete","unwatchCurrentSound","prevJson","pop","player_context","player_Player","position","createAnalyser","fftSize","smoothingTimeConstant","connect","destination","frequencyData","frequencyBinCount","script","createScriptProcessor","onaudioprocess","getFloatFrequencyData","resume","source","createBufferSource","start","onended","$apply","storage_localStorage","LocalStorage","removeItem","synthfactory_synthFactory","PromiseSynth","floatParam","restrict","template","controller","toLog","rangeValue","textValue","getRangeValue","fromLog","setRangeValue","getTextValue","setTextValue","getParamValue","setParamValue","stepParam","delta","controllerAs","altKey","ctrlKey","shiftKey","metaKey","buttons","deltaX","deltaY","getElementsByClassName","textInput","booleanParam","unwatch","find","waveshape","require","registerDrawFunction","channel","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","end","drawFrequency","baseY","scaleY","$eval","jfxrApp","directive","transclude","ngModel","modelCtrl","checked","$render","$viewValue","$setViewValue","$document","for","setSelectionRange","$element","drawFunctions","drawFunction","clientWidth","clientHeight","drawAmplitude","service","panic","getElementById","missing","HTMLCanvasElement","missingBrowserFeatures","html","join","remove","ready","bootstrap","init"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jfxr\"] = factory();\n\telse\n\t\troot[\"jfxr\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Depricated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open(\"GET\",b),e.responseType=\"blob\",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error(\"could not download file\")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open(\"HEAD\",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=function(){try{return Function(\"return this\")()||(42,eval)(\"this\")}catch(a){return\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:this}}(),a=f.saveAs||\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open(\"\",\"_blank\"),e&&(e.document.title=e.document.body.innerText=\"downloading...\"),\"string\"==typeof a)return c(a,b,d);var g=\"application/octet-stream\"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((i||g&&h)&&\"object\"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}};f.saveAs=a.saveAs=a,\"undefined\"!=typeof module&&(module.exports=a)});\n\n//# sourceMappingURL=FileSaver.min.js.map","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// stackoverflow.com/questions/21363064/chrome-chromium-doesnt-know-javascript-function-math-sign\r\nexport function sign(x) {\r\n  if (+x === x) { // check if a number was given\r\n    return (x === 0) ? x : (x > 0) ? 1 : -1;\r\n  }\r\n  return NaN;\r\n}\r\n\r\nexport function frac(x) {\r\n  return x - Math.floor(x);\r\n}\r\n\r\nexport function clamp(min, max, x) {\r\n  if (x < min) return min;\r\n  if (x > max) return max;\r\n  return x;\r\n}\r\n\r\nexport function roundTo(x, multiple) {\r\n  return Math.round(x / multiple) * multiple;\r\n}\r\n\r\nexport function lerp(a, b, f) {\r\n  return (1 - f) * a + f * b;\r\n}\r\n","import { clamp } from './math.js';\r\n\r\n/**\r\n * Represents a generated sound effect.\r\n */\r\nexport function Clip(array, sampleRate) {\r\n  this.array = array;\r\n  this.sampleRate = sampleRate;\r\n}\r\n\r\nClip.prototype.getSampleRate = function() {\r\n  return this.sampleRate;\r\n};\r\n\r\nClip.prototype.getNumSamples = function() {\r\n  return this.array.length;\r\n};\r\n\r\nClip.prototype.toFloat32Array = function() {\r\n  return this.array;\r\n};\r\n\r\nClip.prototype.toWavBytes = function() {\r\n  var floats = this.array;\r\n  var numSamples = floats.length;\r\n\r\n  // http://soundfile.sapp.org/doc/WaveFormat/\r\n\r\n  var fileLength = 44 + numSamples * 2;\r\n  var bytes = new Uint8Array(fileLength);\r\n  var nextIndex = 0;\r\n\r\n  function byte(value) {\r\n    bytes[nextIndex++] = value;\r\n  }\r\n\r\n  function asciiString(value) {\r\n    for (var i = 0; i < value.length; i++) {\r\n      byte(value.charCodeAt(i));\r\n    }\r\n  }\r\n\r\n  function uint16le(value) {\r\n    byte(value & 0xFF);\r\n    value >>= 8;\r\n    byte(value & 0xFF);\r\n  }\r\n\r\n  function uint32le(value) {\r\n    byte(value & 0xFF);\r\n    value >>= 8;\r\n    byte(value & 0xFF);\r\n    value >>= 8;\r\n    byte(value & 0xFF);\r\n    value >>= 8;\r\n    byte(value & 0xFF);\r\n  }\r\n\r\n  asciiString('RIFF'); // RIFF identifier\r\n  uint32le(fileLength - 8); // size following this number\r\n  asciiString('WAVE'); // RIFF type\r\n\r\n  asciiString('fmt '); // format subchunk identifier\r\n  uint32le(16); // format subchunk length\r\n  uint16le(1); // sample format: PCM\r\n  uint16le(1); // channel count\r\n  uint32le(this.sampleRate); // sample rate\r\n  uint32le(this.sampleRate * 2); // byte rate: sample rate * block align\r\n  uint16le(2); // block align\r\n  uint16le(16); // bits per sample\r\n\r\n  asciiString('data'); // data subchunk length\r\n  uint32le(numSamples * 2); // data subchunk length\r\n\r\n  for (var i = 0; i < floats.length; i++) {\r\n    uint16le(clamp(-0x8000, 0x7FFF, Math.round(floats[i] * 0x8000)));\r\n  }\r\n\r\n  return bytes;\r\n};\r\n","window.AudioContext =\r\n  window.AudioContext ||\r\n  window.webkitAudioContext;\r\n\r\nwindow.requestAnimationFrame =\r\n  window.requestAnimationFrame ||\r\n  window.webkitRequestAnimationFrame ||\r\n  window.mozRequestAnimationFrame ||\r\n  window.oRequestAnimationFrame ||\r\n  window.msRequestAnimationFrame;\r\n\r\nexport function missingBrowserFeatures() {\r\n  var missing = [];\r\n  if (window.Blob === undefined || window.FileReader === undefined ||\r\n      window.URL === undefined || URL.createObjectURL === undefined) {\r\n    missing.push('File API');\r\n  }\r\n  if (window.AudioContext === undefined) {\r\n    missing.push('Web Audio');\r\n  }\r\n  if (window.HTMLCanvasElement === undefined) {\r\n    missing.push('Canvas');\r\n  }\r\n  return missing;\r\n}\r\n\r\nexport function callIfSaveAsBroken(callback) {\r\n  // https://github.com/eligrey/FileSaver.js/issues/12#issuecomment-34557946\r\n  var svg = new Blob([\"<svg xmlns='http://www.w3.org/2000/svg'></svg>\"], {type: \"image/svg+xml;charset=utf-8\"});\r\n  var img = new Image();\r\n  img.onerror = callback;\r\n  img.src = URL.createObjectURL(svg);\r\n}\r\n\r\nexport function haveWebWorkers() {\r\n  if (!window.Worker) {\r\n    console.log('Web workers not supported');\r\n    return false;\r\n  }\r\n\r\n  // Web worker cleanup is buggy on Chrome < 34.0.1847.131, see\r\n  // https://code.google.com/p/chromium/issues/detail?id=361792\r\n  var m = navigator.appVersion.match(/Chrome\\/((\\d+\\.)*\\d)/);\r\n  if (m && m[1] && compareVersionStrings(m[1], '34.0.1847.131') < 0) {\r\n    console.log('Web workers buggy and disabled, please update your browser');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction compareVersionStrings(a, b) {\r\n  function toArray(x) {\r\n    var array = x.split('.');\r\n    for (var i = 0; i < array.length; i++) {\r\n      array[i] = parseInt(array[i]);\r\n    }\r\n    return array;\r\n  }\r\n  a = toArray(a);\r\n  b = toArray(b);\r\n\r\n  for (var i = 0; i < Math.min(a.length, b.length); i++) {\r\n    if (a[i] > b[i]) return 1;\r\n    if (a[i] < b[i]) return -1;\r\n  }\r\n  if (a.length > b.length) return 1;\r\n  if (a.length < b.length) return -1;\r\n  return 0;\r\n}\r\n","import { frac } from './math.js';\r\n\r\n/**\r\n * This is the version written out to sound files. We maintain backwards\r\n * compatibility with files written by older versions where possible, but\r\n * refuse to read files written by newer versions. Only bump the version number\r\n * if older versions of jfxr would be unable to correctly interpret files\r\n * written by this version.\r\n */\r\nexport var VERSION = 1;\r\n\r\nexport var Parameter = function(args) {\r\n  this.label = args.label || '<unnamed>';\r\n  this.description = args.description || '<no description>';\r\n  this.unit = args.unit || '';\r\n  this.type = args.type || 'float';\r\n  var numeric = this.type == 'float' || this.type == 'int';\r\n  this.value_ = args.defaultValue;\r\n  this.defaultValue = this.value_;\r\n  this.values = this.type == 'enum' ? (args.values || {}) : null;\r\n  this.minValue = numeric ? args.minValue : null;\r\n  this.maxValue = numeric ? args.maxValue : null;\r\n  this.step = numeric ? (args.step || 'any') : null;\r\n  this.logarithmic = !!(this.type == 'float' && args.logarithmic);\r\n  this.digits = this.type == 'float' ? Math.max(0, Math.round(-Math.log(this.step) / Math.log(10))) : null;\r\n  this.disabledReason_ = args.disabledReason || null;\r\n  this.locked = false;\r\n};\r\n\r\nObject.defineProperty(Parameter.prototype, 'value', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.value_;\r\n  },\r\n  set: function(value) {\r\n    switch (this.type) {\r\n      case 'float':\r\n      case 'int':\r\n        if (typeof value == 'string') {\r\n          value = parseFloat(value);\r\n        }\r\n        if (value != value) { // NaN\r\n          break;\r\n        }\r\n        if (this.type == 'int') {\r\n          value = Math.round(value);\r\n        }\r\n        if (this.minValue !== null && value < this.minValue) {\r\n          value = this.minValue;\r\n        }\r\n        if (this.maxValue !== null && value > this.maxValue) {\r\n          value = this.maxValue;\r\n        }\r\n        this.value_ = value;\r\n        break;\r\n      case 'enum':\r\n        value = '' + value;\r\n        if (!this.values[value]) {\r\n          return;\r\n        }\r\n        this.value_ = value;\r\n        break;\r\n      case 'boolean':\r\n        this.value_ = !!value;\r\n        break;\r\n    }\r\n  },\r\n});\r\n\r\nParameter.prototype.valueTitle = function() {\r\n  if (this.type == 'enum') {\r\n    return this.values[this.value_];\r\n  }\r\n  if (this.type == 'boolean') {\r\n    return this.value_ ? 'Enabled' : 'Disabled';\r\n  }\r\n};\r\n\r\nParameter.prototype.isDisabled = function(sound) {\r\n  return !!(this.disabledReason_ && this.disabledReason_(sound));\r\n};\r\n\r\nParameter.prototype.whyDisabled = function(sound) {\r\n  return this.disabledReason_ && this.disabledReason_(sound);\r\n};\r\n\r\nParameter.prototype.toggleLocked = function() {\r\n  this.locked = !this.locked;\r\n};\r\n\r\nParameter.prototype.reset = function() {\r\n  this.value = this.defaultValue;\r\n};\r\n\r\nParameter.prototype.hasDefaultValue = function() {\r\n  return this.value == this.defaultValue;\r\n};\r\n\r\nexport var Sound = function() {\r\n  this.name = 'Unnamed';\r\n\r\n  var isNotSquare = function(sound) {\r\n    if (sound.waveform.value != 'square') {\r\n      return 'Duty cycle only applies to square waveforms';\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // Sound properties\r\n\r\n  this.sampleRate = new Parameter({\r\n    label: 'Sample rate',\r\n    unit: 'Hz',\r\n    defaultValue: 44100,\r\n    minValue: 44100,\r\n    maxValue: 44100,\r\n    disabledReason: function() { return 'Sample rate is currently not configurable'; },\r\n  });\r\n\r\n  // Amplitude parameters\r\n\r\n  this.attack = new Parameter({\r\n    label: 'Attack',\r\n    description: 'Time from the start of the sound until the point where it reaches its maximum volume. Increase this for a gradual fade-in; decrease it to add more \"punch\".',\r\n    unit: 's',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    step: 0.01,\r\n    logarithmic: true,\r\n  });\r\n  this.sustain = new Parameter({\r\n    label: 'Sustain',\r\n    description: 'Amount of time for which the sound holds its maximum volume after the attack phase. Increase this to increase the sound\\'s duration.',\r\n    unit: 's',\r\n    defaultValue: 0.0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    step: 0.01,\r\n    logarithmic: true,\r\n  });\r\n  this.sustainPunch = new Parameter({\r\n    label: 'Sustain punch',\r\n    description: 'Additional volume at the start of the sustain phase, which linearly fades back to the base level. Use this to add extra \"punch\" to the sustain phase.',\r\n    unit: '%',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    step: 10,\r\n  });\r\n  this.decay = new Parameter({\r\n    label: 'Decay',\r\n    description: 'Time it takes from the end of the sustain phase until the sound has faded away. Increase this for a gradual fade-out.',\r\n    unit: 's',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    step: 0.01,\r\n    logarithmic: true,\r\n  });\r\n  this.tremoloDepth = new Parameter({\r\n    label: 'Tremolo depth',\r\n    description: 'Amount by which the volume oscillates as a sine wave around its base value.',\r\n    unit: '%',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    step: 1,\r\n  });\r\n  this.tremoloFrequency = new Parameter({\r\n    label: 'Tremolo frequency',\r\n    description: 'Frequency at which the volume oscillates as a sine wave around its base value.',\r\n    unit: 'Hz',\r\n    defaultValue: 10,\r\n    minValue: 0,\r\n    maxValue: 1000,\r\n    step: 1,\r\n    logarithmic: true,\r\n  });\r\n\r\n  // Pitch parameters\r\n\r\n  this.frequency = new Parameter({\r\n    label: 'Frequency',\r\n    description: 'Initial frequency, or pitch, of the sound. This determines how high the sound starts out; higher values result in higher notes.',\r\n    unit: 'Hz',\r\n    defaultValue: 500,\r\n    minValue: 10,\r\n    maxValue: 10000,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n  this.frequencySweep = new Parameter({\r\n    label: 'Frequency sweep',\r\n    description: 'Amount by which the frequency is changed linearly over the duration of the sound.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: -10000,\r\n    maxValue: 10000,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n  this.frequencyDeltaSweep = new Parameter({\r\n    label: 'Freq. delta sweep',\r\n    description: 'Amount by which the frequency is changed quadratically over the duration of the sound.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: -10000,\r\n    maxValue: 10000,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n  this.repeatFrequency = new Parameter({\r\n    label: 'Repeat frequency',\r\n    description: 'Amount of times per second that the frequency is reset to its base value, and starts its sweep cycle anew.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    step: 0.1,\r\n    logarithmic: true,\r\n  });\r\n  this.frequencyJump1Onset = new Parameter({\r\n    label: 'Freq. jump 1 onset',\r\n    description: 'Point in time, as a fraction of the repeat cycle, at which the frequency makes a sudden jump.',\r\n    unit: '%',\r\n    defaultValue: 33,\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    step: 5,\r\n  });\r\n  this.frequencyJump1Amount = new Parameter({\r\n    label: 'Freq. jump 1 amount',\r\n    description: 'Amount by which the frequency jumps at the given onset, as a fraction of the current frequency.',\r\n    unit: '%',\r\n    defaultValue: 0,\r\n    minValue: -100,\r\n    maxValue: 100,\r\n    step: 5,\r\n  });\r\n  this.frequencyJump2Onset = new Parameter({\r\n    label: 'Freq. jump 2 onset',\r\n    description: 'Point in time, as a fraction of the repeat cycle, at which the frequency makes a sudden jump.',\r\n    unit: '%',\r\n    defaultValue: 66,\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    step: 5,\r\n  });\r\n  this.frequencyJump2Amount = new Parameter({\r\n    label: 'Freq. jump 2 amount',\r\n    description: 'Amount by which the frequency jumps at the given onset, as a fraction of the current frequency.',\r\n    unit: '%',\r\n    defaultValue: 0,\r\n    minValue: -100,\r\n    maxValue: 100,\r\n    step: 5,\r\n  });\r\n\r\n  // Harmonics parameters\r\n\r\n  this.harmonics = new Parameter({\r\n    label: 'Harmonics',\r\n    description: 'Number of harmonics (overtones) to add. Generates the same sound at several multiples of the base frequency (2×, 3×, …), and mixes them with the original sound. Note that this slows down rendering quite a lot, so you may want to leave it at 0 until the last moment.',\r\n    type: 'int',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    step: 1,\r\n  });\r\n  this.harmonicsFalloff = new Parameter({\r\n    label: 'Harmonics falloff',\r\n    description: 'Volume of each subsequent harmonic, as a fraction of the previous one.',\r\n    defaultValue: 0.5,\r\n    minValue: 0,\r\n    maxValue: 1,\r\n    step: 0.01,\r\n  });\r\n\r\n  // Tone parameters\r\n\r\n  this.waveform = new Parameter({\r\n    label: 'Waveform',\r\n    description: 'Shape of the waveform. This is the most important factor in determining the character, or timbre, of the sound.',\r\n    defaultValue: 'sine',\r\n    type: 'enum',\r\n    values: {\r\n      'sine': 'Sine',\r\n      'triangle': 'Triangle',\r\n      'sawtooth': 'Sawtooth',\r\n      'square': 'Square',\r\n      'tangent': 'Tangent',\r\n      'whistle': 'Whistle',\r\n      'breaker': 'Breaker',\r\n      'whitenoise': 'White noise',\r\n      'pinknoise': 'Pink noise',\r\n      'brownnoise': 'Brown noise',\r\n    },\r\n  });\r\n  this.interpolateNoise = new Parameter({\r\n    label: 'Interpolate noise',\r\n    description: 'Whether to use linear interpolation between individual samples of noise. This results in a smoother sound.',\r\n    defaultValue: true,\r\n    type: 'boolean',\r\n    disabledReason: function(sound) {\r\n      var waveform = sound.waveform.value;\r\n      if (waveform != 'whitenoise' && waveform != 'pinknoise' && waveform != 'brownnoise') {\r\n        return 'Noise interpolation only applies to noise waveforms';\r\n      }\r\n    },\r\n  });\r\n  this.vibratoDepth = new Parameter({\r\n    label: 'Vibrato depth',\r\n    description: 'Amount by which to vibrate around the base frequency.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 1000,\r\n    step: 10,\r\n    logarithmic: true,\r\n  });\r\n  this.vibratoFrequency = new Parameter({\r\n    label: 'Vibrato frequency',\r\n    description: 'Number of times per second to vibrate around the base frequency.',\r\n    unit: 'Hz',\r\n    defaultValue: 10,\r\n    minValue: 0,\r\n    maxValue: 1000,\r\n    step: 1,\r\n    logarithmic: true,\r\n  });\r\n  this.squareDuty = new Parameter({\r\n    label: 'Square duty',\r\n    description: 'For square waves only, the initial fraction of time the square is in the \"on\" state.',\r\n    unit: '%',\r\n    defaultValue: 50,\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    step: 5,\r\n    disabledReason: isNotSquare,\r\n  });\r\n  this.squareDutySweep = new Parameter({\r\n    label: 'Square duty sweep',\r\n    description: 'For square waves only, change the square duty linearly by this many percentage points over the course of the sound.',\r\n    unit: '%',\r\n    defaultValue: 0,\r\n    minValue: -100,\r\n    maxValue: 100,\r\n    step: 5,\r\n    disabledReason: isNotSquare,\r\n  });\r\n\r\n  // Filter parameters\r\n\r\n  this.flangerOffset = new Parameter({\r\n    label: 'Flanger offset',\r\n    description: 'The initial offset for the flanger effect. Mixes the sound with itself, delayed initially by this amount.',\r\n    unit: 'ms',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 50,\r\n    step: 1,\r\n  });\r\n  this.flangerOffsetSweep = new Parameter({\r\n    label: 'Flanger offset sweep',\r\n    description: 'Amount by which the flanger offset changes linearly over the course of the sound.',\r\n    unit: 'ms',\r\n    defaultValue: 0,\r\n    minValue: -50,\r\n    maxValue: 50,\r\n    step: 1,\r\n  });\r\n  this.bitCrush = new Parameter({\r\n    label: 'Bit crush',\r\n    description: 'Number of bits per sample. Reduces the number of bits in each sample by this amount, and then increase it again. The result is a lower-fidelity sound effect.',\r\n    unit: 'bits',\r\n    defaultValue: 16,\r\n    minValue: 1,\r\n    maxValue: 16,\r\n    step: 1,\r\n  });\r\n  this.bitCrushSweep = new Parameter({\r\n    label: 'Bit crush sweep',\r\n    description: 'Amount by which to change the bit crush value linearly over the course of the sound.',\r\n    unit: 'bits',\r\n    defaultValue: 0,\r\n    minValue: -16,\r\n    maxValue: 16,\r\n    step: 1,\r\n  });\r\n  this.lowPassCutoff = new Parameter({\r\n    label: 'Low-pass cutoff',\r\n    description: 'Threshold above which frequencies should be filtered out, using a simple IIR low-pass filter. Use this to take some \"edge\" off the sound.',\r\n    unit: 'Hz',\r\n    defaultValue: 22050,\r\n    minValue: 0,\r\n    maxValue: 22050,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n  this.lowPassCutoffSweep = new Parameter({\r\n    label: 'Low-pass sweep',\r\n    description: 'Amount by which to change the low-pass cutoff frequency over the course of the sound.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: -22050,\r\n    maxValue: 22050,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n  this.highPassCutoff = new Parameter({\r\n    label: 'High-pass cutoff',\r\n    description: 'Threshold below which frequencies should be filtered out, using a simple high-pass filter.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: 0,\r\n    maxValue: 22050,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n  this.highPassCutoffSweep = new Parameter({\r\n    label: 'High-pass sweep',\r\n    description: 'Amount by which to change the high-pass cutoff frequency over the course of the sound.',\r\n    unit: 'Hz',\r\n    defaultValue: 0,\r\n    minValue: -22050,\r\n    maxValue: 22050,\r\n    step: 100,\r\n    logarithmic: true,\r\n  });\r\n\r\n  // Output parameters\r\n\r\n  this.compression = new Parameter({\r\n    label: 'Compression',\r\n    description: 'Power to which sample values should be raised. 1 is the neutral setting. Use a value less than 1 to increase the volume of quiet parts of the sound, higher than 1 to make quiet parts even quieter.',\r\n    defaultValue: 1,\r\n    minValue: 0,\r\n    maxValue: 5,\r\n    step: 0.1,\r\n  });\r\n  this.normalization = new Parameter({\r\n    label: 'Normalization',\r\n    description: 'Whether to adjust the volume of the sound so that the peak volume is at 100%.',\r\n    type: 'boolean',\r\n    defaultValue: true,\r\n  });\r\n  this.amplification = new Parameter({\r\n    label: 'Amplification',\r\n    description: 'Percentage to amplify the sound by, after any normalization has occurred. Note that setting this too high can result in clipping.',\r\n    unit: '%',\r\n    defaultValue: 100,\r\n    minValue: 0,\r\n    maxValue: 500,\r\n    step: 10,\r\n  });\r\n};\r\n\r\nSound.prototype.duration = function() {\r\n  return this.attack.value + this.sustain.value + this.decay.value;\r\n};\r\n\r\nSound.prototype.amplitudeAt = function(time) {\r\n  var attack = this.attack.value;\r\n  var sustain = this.sustain.value;\r\n  var sustainPunch = this.sustainPunch.value;\r\n  var decay = this.decay.value;\r\n  var tremoloDepth = this.tremoloDepth.value;\r\n  var amp;\r\n  if (time < attack) {\r\n    amp = time / attack;\r\n  } else if (time < attack + sustain) {\r\n    amp = 1 + sustainPunch / 100 * (1 - (time - attack) / sustain);\r\n  } else {\r\n    amp = 1 - (time - attack - sustain) / decay;\r\n  }\r\n  if (tremoloDepth !== 0) {\r\n    amp *= 1 - (tremoloDepth / 100) * (0.5 + 0.5 * Math.cos(2 * Math.PI * time * this.tremoloFrequency.value));\r\n  }\r\n  return amp;\r\n};\r\n\r\nSound.prototype.effectiveRepeatFrequency = function() {\r\n  return Math.max(this.repeatFrequency.value, 1 / this.duration());\r\n};\r\n\r\nSound.prototype.frequencyAt = function(time) {\r\n  var repeatFrequency = this.effectiveRepeatFrequency();\r\n  var fractionInRepetition = frac(time * repeatFrequency);\r\n  var freq =\r\n    this.frequency.value +\r\n    fractionInRepetition * this.frequencySweep.value +\r\n    fractionInRepetition * fractionInRepetition * this.frequencyDeltaSweep.value;\r\n  if (fractionInRepetition > this.frequencyJump1Onset.value / 100) {\r\n    freq *= 1 + this.frequencyJump1Amount.value / 100;\r\n  }\r\n  if (fractionInRepetition > this.frequencyJump2Onset.value / 100) {\r\n    freq *= 1 + this.frequencyJump2Amount.value / 100;\r\n  }\r\n  if (this.vibratoDepth.value !== 0) {\r\n    freq += 1 - this.vibratoDepth.value * (0.5 - 0.5 * Math.sin(2 * Math.PI * time * this.vibratoFrequency.value));\r\n  }\r\n  return Math.max(0, freq);\r\n};\r\n\r\nSound.prototype.squareDutyAt = function(time) {\r\n  var repeatFrequency = this.effectiveRepeatFrequency();\r\n  var fractionInRepetition = frac(time * repeatFrequency);\r\n  return (this.squareDuty.value + fractionInRepetition * this.squareDutySweep.value) / 100;\r\n};\r\n\r\nSound.prototype.forEachParam = function(func) {\r\n  for (var key in this) {\r\n    var value = this[key];\r\n    if (value instanceof Parameter) {\r\n      func(key, value);\r\n    }\r\n  }\r\n};\r\n\r\nSound.prototype.reset = function() {\r\n  this.forEachParam(function(key, param) {\r\n    param.reset();\r\n    param.locked = false;\r\n  });\r\n};\r\n\r\nSound.prototype.clone = function() {\r\n  var clone = new Sound();\r\n  clone.parse(this.serialize());\r\n  return clone;\r\n};\r\n\r\nSound.prototype.serialize = function() {\r\n  var json = {\r\n    _version: 1,\r\n    _name: this.name,\r\n    _locked: [],\r\n  };\r\n  this.forEachParam(function(key, param) {\r\n    json[key] = param.value;\r\n    if (param.locked) {\r\n      json._locked.push(key);\r\n    }\r\n  });\r\n  return JSON.stringify(json);\r\n};\r\n\r\nSound.prototype.parse = function(str) {\r\n  this.reset();\r\n  if (str && str !== '') {\r\n    var json = JSON.parse(str);\r\n    if (json._version > VERSION) {\r\n      throw new Error('Cannot read this sound; it was written by jfxr version ' + json._version +\r\n          ' but we support only up to version ' + VERSION + '. Please update the jfxr library.');\r\n    }\r\n\r\n    this.name = json._name || 'Unnamed';\r\n    this.forEachParam(function(key, param) {\r\n      if (key in json) {\r\n        param.value = json[key];\r\n      }\r\n    });\r\n\r\n    var locked = json._locked || [];\r\n    for (var i = 0; i < locked.length; i++) {\r\n      var param = this[locked[i]];\r\n      if (param instanceof Parameter) {\r\n        param.locked = true;\r\n      }\r\n    }\r\n  }\r\n};\r\n","// A fast, but not crytographically strong xorshift PRNG, to make up for\r\n// the lack of a seedable random number generator in JavaScript.\r\n// If seed is 0 or undefined, the current time is used.\r\nexport var Random = function(seed) {\r\n  if (!seed) seed = Date.now();\r\n  this.x = seed & 0xffffffff;\r\n  this.y = 362436069;\r\n  this.z = 521288629;\r\n  this.w = 88675123;\r\n  // Mix it up, because some bits of the current Unix time are quite predictable.\r\n  for (var i = 0; i < 32; i++) this.uint32();\r\n};\r\n\r\nRandom.prototype.uint32 = function() {\r\n  var t = this.x ^ ((this.x << 11) & 0xffffffff);\r\n  this.x = this.y;\r\n  this.y = this.z;\r\n  this.z = this.w;\r\n  this.w = (this.w ^ (this.w >>> 19) ^ (t ^ (t >>> 8)));\r\n  return this.w + 0x80000000;\r\n};\r\n\r\nRandom.prototype.uniform = function(min, max) {\r\n  if (min === undefined && max === undefined) {\r\n    min = 0;\r\n    max = 1;\r\n  } else if (max === undefined) {\r\n    max = min;\r\n    min = 0;\r\n  }\r\n  return min + (max - min) * this.uint32() / 0xffffffff;\r\n};\r\n\r\nRandom.prototype.int = function(min, max) {\r\n  return Math.floor(this.uniform(min, max));\r\n};\r\n\r\nRandom.prototype.boolean = function(trueProbability) {\r\n  return this.uniform() < trueProbability;\r\n};\r\n\r\nRandom.prototype.fromArray = function(array) {\r\n  return array[this.int(array.length)];\r\n};\r\n","import { clamp, frac, lerp } from './math.js';\r\nimport { Clip } from './clip.js';\r\nimport { Random } from './random.js';\r\nimport { Sound } from './sound.js';\r\n\r\n/**\r\n * This class synthesizes sound effects. It is intended for one-shot use, so do\r\n * not try to use a single instance multiple times.\r\n *\r\n * Example usage:\r\n *\r\n *     var json = '{...}'; // E.g. contents of a .jfxr file.\r\n *     var synth = new Synth(json);\r\n *     synth.run(function(clip) {\r\n *       var samples = sound.array;         // raw samples as a Float32Array\r\n *       var sampleRate = sound.sampleRate; // sample rate in Hz\r\n *     });\r\n *\r\n * @param {function} setTimeout A function that can be called in the same way\r\n *     as window.setTimeout (remember to bind() it or use a fat arrow if\r\n *     needed). If not provided, window.setTimeout will be used directly.\r\n * @param {string} json A string containing a serialized Sound.\r\n */\r\nexport var Synth = function(json, setTimeout) {\r\n  this.setTimeout = setTimeout || window.setTimeout.bind(window);\r\n  this.sound = new Sound();\r\n  this.sound.parse(json);\r\n\r\n  var sampleRate = this.sound.sampleRate.value;\r\n\r\n  var numSamples = Math.max(1, Math.ceil(sampleRate * this.sound.duration()));\r\n\r\n  this.array = new Float32Array(numSamples);\r\n\r\n  var classes = [\r\n    Synth.Generator,\r\n    Synth.Envelope,\r\n    Synth.Tremolo,\r\n    Synth.Flanger,\r\n    Synth.BitCrush,\r\n    Synth.LowPass,\r\n    Synth.HighPass,\r\n    Synth.Compress,\r\n    Synth.Normalize,\r\n    Synth.Amplify,\r\n  ];\r\n\r\n  this.transformers = [];\r\n  for (var i = 0; i < classes.length; i++) {\r\n    this.transformers.push(new classes[i](this.sound, this.array));\r\n  }\r\n\r\n  this.startTime = Date.now();\r\n\r\n  this.startSample = 0;\r\n  this.blockSize = 10240;\r\n};\r\n\r\n/**\r\n * @param {function} doneCallback A callback that is invoked when the synthesis\r\n *     is complete. It receives one argument, which is a Clip object.\r\n */\r\nSynth.prototype.run = function(doneCallback) {\r\n  if (this.doneCallback) {\r\n    return;\r\n  }\r\n  this.doneCallback = doneCallback;\r\n  this.tick();\r\n};\r\n\r\n/**\r\n * @return {bool} True if the synth is currently running (between a call to\r\n *     run() and either cancel() or receipt of a doneCallback() call).\r\n */\r\nSynth.prototype.isRunning = function() {\r\n  return !!this.doneCallback;\r\n};\r\n\r\n/**\r\n * Cancels synthesis if currently running.\r\n */\r\nSynth.prototype.cancel = function() {\r\n  if (!this.isRunning()) {\r\n    return;\r\n  }\r\n  this.doneCallback = null;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nSynth.prototype.tick = function() {\r\n  if (!this.isRunning()) {\r\n    return;\r\n  }\r\n\r\n  var numSamples = this.array.length;\r\n  var endSample = Math.min(numSamples, this.startSample + this.blockSize);\r\n  for (var i = 0; i < this.transformers.length; i++) {\r\n    this.transformers[i].run(this.sound, this.array, this.startSample, endSample);\r\n  }\r\n  this.startSample = endSample;\r\n\r\n  if (this.startSample == numSamples) {\r\n    this.renderTimeMs = Date.now() - this.startTime;\r\n    // Always invoke the callback from a timeout so that, in case setTimeout is\r\n    // $timeout, Angular will run a digest after it.\r\n    this.setTimeout(function() {\r\n      if (this.doneCallback) {\r\n        this.doneCallback(new Clip(this.array, this.sound.sampleRate.value));\r\n        this.doneCallback = null;\r\n      }\r\n    }.bind(this));\r\n  } else {\r\n    // TODO be smarter about block size (sync with animation frames)\r\n    // window.requestAnimationFrame(this.tick.bind(this));\r\n    this.tick();\r\n  }\r\n};\r\n\r\nSynth.Generator = function(sound, array) {\r\n  var numSamples = array.length;\r\n  var sampleRate = sound.sampleRate.value;\r\n\r\n  var duration = numSamples / sampleRate;\r\n\r\n  var oscillatorClass = {\r\n    sine: Synth.SineOscillator,\r\n    triangle: Synth.TriangleOscillator,\r\n    sawtooth: Synth.SawtoothOscillator,\r\n    square: Synth.SquareOscillator,\r\n    tangent: Synth.TangentOscillator,\r\n    whistle: Synth.WhistleOscillator,\r\n    breaker: Synth.BreakerOscillator,\r\n    whitenoise: Synth.WhiteNoiseOscillator,\r\n    pinknoise: Synth.PinkNoiseOscillator,\r\n    brownnoise: Synth.BrownNoiseOscillator,\r\n  }[sound.waveform.value];\r\n\r\n  var amp = 1;\r\n  var totalAmp = 0;\r\n  this.oscillators = [];\r\n  for (var harmonicIndex = 0; harmonicIndex <= sound.harmonics.value; harmonicIndex++) {\r\n    totalAmp += amp;\r\n    amp *= sound.harmonicsFalloff.value;\r\n    this.oscillators.push(new oscillatorClass(sound));\r\n  }\r\n  this.firstHarmonicAmp = 1 / totalAmp;\r\n\r\n  this.phase = 0;\r\n  this.prevPhase = 0;\r\n};\r\n\r\nSynth.Generator.prototype.run = function(sound, array, startSample, endSample) {\r\n  var sampleRate = sound.sampleRate.value;\r\n  var harmonics = sound.harmonics.value;\r\n  var harmonicsFalloff = sound.harmonicsFalloff.value;\r\n\r\n  var firstHarmonicAmp = this.firstHarmonicAmp;\r\n  var oscillators = this.oscillators;\r\n  var random = new Random(0x3cf78ba3);\r\n\r\n  var phase = this.phase;\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var time = i / sampleRate;\r\n\r\n    var currentFrequency = sound.frequencyAt(time);\r\n    phase = frac(phase + currentFrequency / sampleRate);\r\n\r\n    var sample = 0;\r\n    var amp = firstHarmonicAmp;\r\n    for (var harmonicIndex = 0; harmonicIndex <= harmonics; harmonicIndex++) {\r\n      var harmonicPhase = frac(phase * (harmonicIndex + 1));\r\n      sample += amp * oscillators[harmonicIndex].getSample(harmonicPhase, time);\r\n      amp *= harmonicsFalloff;\r\n    }\r\n    array[i] = sample;\r\n  }\r\n\r\n  this.phase = phase;\r\n};\r\n\r\nSynth.SineOscillator = function() {};\r\nSynth.SineOscillator.prototype.getSample = function(phase) {\r\n  return Math.sin(2 * Math.PI * phase);\r\n};\r\n\r\nSynth.TriangleOscillator = function() {};\r\nSynth.TriangleOscillator.prototype.getSample = function(phase) {\r\n  if (phase < 0.25) return 4 * phase;\r\n  if (phase < 0.75) return 2 - 4 * phase;\r\n  return -4 + 4 * phase;\r\n};\r\n\r\nSynth.SawtoothOscillator = function() {};\r\nSynth.SawtoothOscillator.prototype.getSample = function(phase) {\r\n  return phase < 0.5 ? 2 * phase : -2 + 2 * phase;\r\n};\r\n\r\nSynth.SquareOscillator = function(sound) {\r\n  this.sound = sound;\r\n};\r\nSynth.SquareOscillator.prototype.getSample = function(phase, time) {\r\n  return phase < this.sound.squareDutyAt(time) ? 1 : -1;\r\n};\r\n\r\nSynth.TangentOscillator = function() {};\r\nSynth.TangentOscillator.prototype.getSample = function(phase) {\r\n  // Arbitrary cutoff value to make normalization behave.\r\n  return clamp(-2, 2, 0.3 * Math.tan(Math.PI * phase));\r\n};\r\n\r\nSynth.WhistleOscillator = function() {};\r\nSynth.WhistleOscillator.prototype.getSample = function(phase) {\r\n  return 0.75 * Math.sin(2 * Math.PI * phase) + 0.25 * Math.sin(40 * Math.PI * phase);\r\n};\r\n\r\nSynth.BreakerOscillator = function() {};\r\nSynth.BreakerOscillator.prototype.getSample = function(phase) {\r\n  // Make sure to start at a zero crossing.\r\n  var p = frac(phase + Math.sqrt(0.75));\r\n  return -1 + 2 * Math.abs(1 - p*p*2);\r\n};\r\n\r\nSynth.WhiteNoiseOscillator = function(sound) {\r\n  this.interpolateNoise = sound.interpolateNoise.value;\r\n\r\n  this.random = new Random(0x3cf78ba3);\r\n  this.prevPhase = 0;\r\n  this.prevRandom = 0;\r\n  this.currRandom = 0;\r\n};\r\nSynth.WhiteNoiseOscillator.prototype.getSample = function(phase) {\r\n  // Need two samples per phase in order to include the desired frequencies.\r\n  phase = frac(phase * 2);\r\n  if (phase < this.prevPhase) {\r\n    this.prevRandom = this.currRandom;\r\n    this.currRandom = this.random.uniform(-1, 1);\r\n  }\r\n  this.prevPhase = phase;\r\n\r\n  return this.interpolateNoise ?\r\n    lerp(this.prevRandom, this.currRandom, phase) :\r\n    this.currRandom;\r\n};\r\n\r\nSynth.PinkNoiseOscillator = function(sound, array) {\r\n  this.interpolateNoise = sound.interpolateNoise.value;\r\n\r\n  this.random = new Random(0x3cf78ba3);\r\n  this.prevPhase = 0;\r\n  this.b = [0, 0, 0, 0, 0, 0, 0];\r\n  this.prevRandom = 0;\r\n  this.currRandom = 0;\r\n};\r\nSynth.PinkNoiseOscillator.prototype.getSample = function(phase) {\r\n  // Need two samples per phase in order to include the desired frequencies.\r\n  phase = frac(phase * 2);\r\n  if (phase < this.prevPhase) {\r\n    this.prevRandom = this.currRandom;\r\n    // Method pk3 from http://www.firstpr.com.au/dsp/pink-noise/,\r\n    // due to Paul Kellet.\r\n    var white = this.random.uniform(-1, 1);\r\n    this.b[0] = 0.99886 * this.b[0] + white * 0.0555179;\r\n    this.b[1] = 0.99332 * this.b[1] + white * 0.0750759;\r\n    this.b[2] = 0.96900 * this.b[2] + white * 0.1538520;\r\n    this.b[3] = 0.86650 * this.b[3] + white * 0.3104856;\r\n    this.b[4] = 0.55000 * this.b[4] + white * 0.5329522;\r\n    this.b[5] = -0.7616 * this.b[5] + white * 0.0168980;\r\n    this.currRandom = (this.b[0] + this.b[1] + this.b[2] + this.b[3] + this.b[4] + this.b[5] + this.b[6] + white * 0.5362) / 7;\r\n    this.b[6] = white * 0.115926;\r\n  }\r\n  this.prevPhase = phase;\r\n\r\n  return this.interpolateNoise ?\r\n    lerp(this.prevRandom, this.currRandom, phase) :\r\n    this.currRandom;\r\n};\r\n\r\nSynth.BrownNoiseOscillator = function(sound, array) {\r\n  this.interpolateNoise = sound.interpolateNoise.value;\r\n\r\n  this.random = new Random(0x3cf78ba3);\r\n  this.prevPhase = 0;\r\n  this.prevRandom = 0;\r\n  this.currRandom = 0;\r\n};\r\nSynth.BrownNoiseOscillator.prototype.getSample = function(phase) {\r\n  // Need two samples per phase in order to include the desired frequencies.\r\n  phase = frac(phase * 2);\r\n  if (phase < this.prevPhase) {\r\n    this.prevRandom = this.currRandom;\r\n    this.currRandom = clamp(-1, 1, this.currRandom + 0.1 * this.random.uniform(-1, 1));\r\n  }\r\n  this.prevPhase = phase;\r\n\r\n  return this.interpolateNoise ?\r\n    lerp(this.prevRandom, this.currRandom, phase) :\r\n    this.currRandom;\r\n};\r\n\r\nSynth.Tremolo = function(sound, array) {\r\n};\r\n\r\nSynth.Tremolo.prototype.run = function(sound, array, startSample, endSample) {\r\n  var sampleRate = sound.sampleRate.value;\r\n  var tremoloDepth = sound.tremoloDepth.value;\r\n  var tremoloFrequency = sound.tremoloFrequency.value;\r\n\r\n  if (tremoloDepth === 0) {\r\n    return;\r\n  }\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var time = i / sampleRate;\r\n    array[i] *= 1 - (tremoloDepth / 100) * (0.5 + 0.5 * Math.cos(2 * Math.PI * time * tremoloFrequency));\r\n  }\r\n};\r\n\r\nSynth.Flanger = function(sound, array) {\r\n  if (sound.flangerOffset.value === 0 && sound.flangerOffsetSweep.value === 0) {\r\n    return;\r\n  }\r\n\r\n  // Maximum 100ms offset\r\n  this.buffer = new Float32Array(Math.ceil(sound.sampleRate.value * 0.1));\r\n  this.bufferPos = 0;\r\n};\r\n\r\nSynth.Flanger.prototype.run = function(sound, array, startSample, endSample) {\r\n  if (!this.buffer) {\r\n    return;\r\n  }\r\n\r\n  var numSamples = array.length;\r\n  var sampleRate = sound.sampleRate.value;\r\n  var flangerOffset = sound.flangerOffset.value;\r\n  var flangerOffsetSweep = sound.flangerOffsetSweep.value;\r\n\r\n  var buffer = this.buffer;\r\n  var bufferPos = this.bufferPos;\r\n  var bufferLength = buffer.length;\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    buffer[bufferPos] = array[i];\r\n\r\n    var offsetSamples = Math.round((flangerOffset + i / numSamples * flangerOffsetSweep) / 1000 * sampleRate);\r\n    offsetSamples = clamp(0, bufferLength - 1, offsetSamples);\r\n    array[i] += buffer[(bufferPos - offsetSamples + bufferLength) % bufferLength];\r\n    bufferPos = (bufferPos + 1) % bufferLength;\r\n  }\r\n\r\n  this.bufferPos = bufferPos;\r\n};\r\n\r\nSynth.BitCrush = function(sound, array) {\r\n};\r\n\r\nSynth.BitCrush.prototype.run = function(sound, array, startSample, endSample) {\r\n  var numSamples = array.length;\r\n  var bitCrush = sound.bitCrush.value;\r\n  var bitCrushSweep = sound.bitCrushSweep.value;\r\n\r\n  if (bitCrush === 0 && bitCrushSweep === 0) {\r\n    return;\r\n  }\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var bits = bitCrush + i / numSamples * bitCrushSweep;\r\n    bits = clamp(1, 16, Math.round(bits));\r\n    var steps = Math.pow(2, bits);\r\n    array[i] = -1 + 2 * Math.round((0.5 + 0.5 * array[i]) * steps) / steps;\r\n  }\r\n};\r\n\r\nSynth.LowPass = function(sound, array) {\r\n  this.lowPassPrev = 0;\r\n};\r\n\r\nSynth.LowPass.prototype.run = function(sound, array, startSample, endSample) {\r\n  var numSamples = array.length;\r\n  var lowPassCutoff = sound.lowPassCutoff.value;\r\n  var lowPassCutoffSweep = sound.lowPassCutoffSweep.value;\r\n  var sampleRate = sound.sampleRate.value;\r\n\r\n  if (lowPassCutoff >= sampleRate / 2 && lowPassCutoff + lowPassCutoffSweep >= sampleRate / 2) {\r\n    return;\r\n  }\r\n\r\n  var lowPassPrev = this.lowPassPrev;\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var fraction = i / numSamples;\r\n    var cutoff = clamp(0, sampleRate / 2, lowPassCutoff + fraction * lowPassCutoffSweep);\r\n    var wc = cutoff / sampleRate * Math.PI; // Don't we need a factor 2pi instead of pi?\r\n    var cosWc = Math.cos(wc);\r\n    var lowPassAlpha;\r\n    if (cosWc <= 0) {\r\n      lowPassAlpha = 1;\r\n    } else {\r\n      // From somewhere on the internet: cos wc = 2a / (1+a^2)\r\n      lowPassAlpha = 1 / cosWc - Math.sqrt(1 / (cosWc * cosWc) - 1);\r\n      lowPassAlpha = 1 - lowPassAlpha; // Probably the internet's definition of alpha is different.\r\n    }\r\n    var sample = array[i];\r\n    sample = lowPassAlpha * sample + (1 - lowPassAlpha) * lowPassPrev;\r\n    lowPassPrev = sample;\r\n    array[i] = sample;\r\n  }\r\n\r\n  this.lowPassPrev = lowPassPrev;\r\n};\r\n\r\nSynth.HighPass = function(sound, array) {\r\n  this.highPassPrevIn = 0;\r\n  this.highPassPrevOut = 0;\r\n};\r\n\r\nSynth.HighPass.prototype.run = function(sound, array, startSample, endSample) {\r\n  var numSamples = array.length;\r\n  var sampleRate = sound.sampleRate.value;\r\n  var highPassCutoff = sound.highPassCutoff.value;\r\n  var highPassCutoffSweep = sound.highPassCutoffSweep.value;\r\n\r\n  if (highPassCutoff <= 0 && highPassCutoff + highPassCutoffSweep <= 0) {\r\n    return;\r\n  }\r\n\r\n  var highPassPrevIn = this.highPassPrevIn;\r\n  var highPassPrevOut = this.highPassPrevOut;\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var fraction = i / numSamples;\r\n    var cutoff = clamp(0, sampleRate / 2, highPassCutoff + fraction * highPassCutoffSweep);\r\n    var wc = cutoff / sampleRate * Math.PI;\r\n    // From somewhere on the internet: a = (1 - sin wc) / cos wc\r\n    var highPassAlpha = (1 - Math.sin(wc)) / Math.cos(wc);\r\n    var sample = array[i];\r\n    var origSample = sample;\r\n    sample = highPassAlpha * (highPassPrevOut - highPassPrevIn + sample);\r\n    highPassPrevIn = origSample;\r\n    highPassPrevOut = sample;\r\n    array[i] = sample;\r\n  }\r\n\r\n  this.highPassPrevIn = highPassPrevIn;\r\n  this.highPassPrevOut = highPassPrevOut;\r\n};\r\n\r\nSynth.Envelope = function(sound, array) {\r\n};\r\n\r\nSynth.Envelope.prototype.run = function(sound, array, startSample, endSample) {\r\n  var sampleRate = sound.sampleRate.value;\r\n  var attack = sound.attack.value;\r\n  var sustain = sound.sustain.value;\r\n  var sustainPunch = sound.sustainPunch.value;\r\n  var decay = sound.decay.value;\r\n\r\n  if (attack === 0 && decay === 0) {\r\n    return;\r\n  }\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var time = i / sampleRate;\r\n    array[i] *= sound.amplitudeAt(time);\r\n  }\r\n};\r\n\r\nSynth.Compress = function(sound, array) {\r\n};\r\n\r\nSynth.Compress.prototype.run = function(sound, array, startSample, endSample) {\r\n  var compression = sound.compression.value;\r\n\r\n  if (compression == 1) {\r\n    return;\r\n  }\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    var sample = array[i];\r\n    if (sample >= 0) {\r\n      sample = Math.pow(sample, compression);\r\n    } else {\r\n      sample = -Math.pow(-sample, compression);\r\n    }\r\n    array[i] = sample;\r\n  }\r\n};\r\n\r\nSynth.Normalize = function(sound, array) {\r\n  this.maxSample = 0;\r\n};\r\n\r\nSynth.Normalize.prototype.run = function(sound, array, startSample, endSample) {\r\n  if (!sound.normalization.value) {\r\n    return;\r\n  }\r\n\r\n  var maxSample = this.maxSample;\r\n  var i;\r\n  for (i = startSample; i < endSample; i++) {\r\n    maxSample = Math.max(maxSample, Math.abs(array[i]));\r\n  }\r\n  this.maxSample = maxSample;\r\n\r\n  var numSamples = array.length;\r\n  if (endSample == numSamples) {\r\n    var factor = 1 / maxSample;\r\n    for (i = 0; i < numSamples; i++) {\r\n      array[i] *= factor;\r\n    }\r\n  }\r\n};\r\n\r\nSynth.Amplify = function(sound, array) {\r\n};\r\n\r\nSynth.Amplify.prototype.run = function(sound, array, startSample, endSample) {\r\n  var factor = sound.amplification.value / 100;\r\n\r\n  if (factor == 1) {\r\n    return;\r\n  }\r\n\r\n  for (var i = startSample; i < endSample; i++) {\r\n    array[i] *= factor;\r\n  }\r\n};\r\n","import { roundTo } from './math.js';\r\nimport { Random } from './random.js';\r\n\r\nexport var Preset = function(args) {\r\n  this.name = args.name;\r\n  this.applyTo = args.applyTo || null;\r\n  this.random = new Random();\r\n};\r\n\r\nPreset.prototype.randomize = function(param, min, max) {\r\n  if (min === undefined) min = param.minValue;\r\n  if (max === undefined) max = param.maxValue;\r\n  switch (param.type) {\r\n    case 'boolean':\r\n      param.value = (this.random.uniform() >= 0.5);\r\n      break;\r\n    case 'float':\r\n      param.value = roundTo(this.random.uniform(min, max), param.step);\r\n      break;\r\n    case 'int':\r\n      param.value = this.random.int(min, max);\r\n      break;\r\n    case 'enum':\r\n      var values = [];\r\n      for (var v in param.values) {\r\n        values.push(v);\r\n      }\r\n      param.value = this.random.fromArray(values);\r\n      break;\r\n  }\r\n};\r\n\r\nPreset.mutate = function(sound) {\r\n  var random = new Random();\r\n  sound.forEachParam(function(key, param) {\r\n    if (param.locked) return;\r\n    if (key == 'normalization' || key == 'amplification') return;\r\n    switch (param.type) {\r\n      case 'boolean':\r\n        if (random.boolean(0.1)) {\r\n          param.value = !param.value;\r\n        }\r\n        break;\r\n      case 'float':\r\n        if (param.value != param.defaultValue || random.boolean(0.3)) {\r\n          var range = 0.05 * (param.maxValue - param.minValue);\r\n          param.value = roundTo(param.value + random.uniform(-range, range), param.step);\r\n        }\r\n        break;\r\n      case 'int':\r\n        param.value += random.int(-1, 1);\r\n        break;\r\n      case 'enum':\r\n        if (random.boolean(0.1)) {\r\n          var values = [];\r\n          for (var v in param.values) {\r\n            values.push(v);\r\n          }\r\n          param.value = random.fromArray(values);\r\n        }\r\n        break;\r\n    }\r\n  });\r\n};\r\n\r\nexport var ALL_PRESETS = [\r\n  new Preset({\r\n    name: 'Default',\r\n    applyTo: function(sound) {\r\n      sound.sustain.value = 0.2;\r\n      return sound;\r\n    },\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Random',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      var attackSustainDecay = random.int(3, 16);\r\n      // Attack typically leads to less useful sounds. Reduce probability by requiring two bits.\r\n      if ((attackSustainDecay & 1) && (attackSustainDecay & 2)) {\r\n        randomize(sound.attack, 0.0, 2.0);\r\n      }\r\n      // For the other parameters, use just one bit.\r\n      if (attackSustainDecay & 4) {\r\n        randomize(sound.sustain, 0.0, 1.0);\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.sustainPunch);\r\n        }\r\n      }\r\n      if (attackSustainDecay & 8) {\r\n        randomize(sound.decay);\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.tremoloDepth);\r\n        randomize(sound.tremoloFrequency);\r\n      }\r\n\r\n      randomize(sound.frequency);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.frequencySweep);\r\n      }\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.frequencyDeltaSweep);\r\n      }\r\n\r\n      var repeatJump = random.int(0, 3);\r\n      if (repeatJump >= 1) {\r\n        randomize(sound.repeatFrequency,\r\n            1 / (sound.attack.value + sound.sustain.value + sound.decay.value),\r\n            sound.repeatFrequency.maxValue);\r\n      }\r\n      if (repeatJump >= 2) {\r\n        randomize(sound.frequencyJump1Onset);\r\n        randomize(sound.frequencyJump1Amount);\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.frequencyJump2Onset);\r\n          randomize(sound.frequencyJump2Amount);\r\n          if (sound.frequencyJump2Onset.value < sound.frequencyJump1Onset.value) {\r\n            var tmp = sound.frequencyJump1Onset.value;\r\n            sound.frequencyJump1Onset.value = sound.frequencyJump2Onset.value;\r\n            sound.frequencyJump2Onset.value = tmp;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.harmonics);\r\n        randomize(sound.harmonicsFalloff);\r\n      }\r\n\r\n      randomize(sound.waveform);\r\n      randomize(sound.interpolateNoise);\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.vibratoDepth);\r\n        randomize(sound.vibratoFrequency);\r\n      }\r\n      if (sound.waveform.value == 'square' && random.boolean(0.5)) {\r\n        randomize(sound.squareDuty);\r\n        randomize(sound.squareDutySweep);\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.flangerOffset);\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.flangerOffsetSweep);\r\n        }\r\n      }\r\n\r\n      if (random.boolean(0.2)) {\r\n        randomize(sound.bitCrush);\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.bitCrushSweep);\r\n        }\r\n      }\r\n\r\n      while (true) {\r\n        sound.lowPassCutoff.reset();\r\n        sound.lowPassCutoffSweep.reset();\r\n        sound.highPassCutoff.reset();\r\n        sound.highPassCutoffSweep.reset();\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.lowPassCutoff, 0, 10000);\r\n        }\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.highPassCutoffSweep, 0, 10000);\r\n        }\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.highPassCutoff, 0, 10000);\r\n        }\r\n        if (random.boolean(0.5)) {\r\n          randomize(sound.highPassCutoffSweep, 0, 10000);\r\n        }\r\n        if (sound.lowPassCutoff.value > sound.highPassCutoff.value) {\r\n          break;\r\n        }\r\n        if (sound.lowPassCutoff.value + sound.lowPassCutoffSweep.value > sound.highPassCutoff.value + sound.highPassCutoffSweep.value) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.compression, 0.5, 2.0);\r\n      }\r\n\r\n      sound.normalization.value = true;\r\n      sound.amplification.value = 100;\r\n\r\n      return sound;\r\n    },\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Pickup/coin',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['sine', 'square', 'whistle', 'breaker']);\r\n      randomize(sound.squareDuty);\r\n      randomize(sound.squareDutySweep);\r\n\r\n      randomize(sound.sustain, 0.02, 0.1);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.sustainPunch, 0, 100);\r\n      }\r\n      randomize(sound.decay, 0.05, 0.4);\r\n\r\n      randomize(sound.frequency, 100, 2000);\r\n      if (random.boolean(0.7)) {\r\n        randomize(sound.frequencyJump1Onset, 10, 30);\r\n        randomize(sound.frequencyJump1Amount, 10, 100);\r\n        if (random.boolean(0.3)) {\r\n        randomize(sound.frequencyJump2Onset, 20, 40);\r\n        randomize(sound.frequencyJump2Amount, 10, 100);\r\n        }\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.flangerOffset, 0, 10);\r\n        randomize(sound.flangerOffsetSweep, -10, 10);\r\n      }\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Laser/shoot',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['sine', 'triangle', 'sawtooth', 'square', 'tangent', 'whistle', 'breaker']);\r\n      randomize(sound.squareDuty);\r\n      randomize(sound.squareDutySweep);\r\n\r\n      randomize(sound.sustain, 0.02, 0.1);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.sustainPunch, 0, 100);\r\n      }\r\n      randomize(sound.decay, 0.02, 0.1);\r\n\r\n      randomize(sound.frequency, 500, 2000);\r\n      randomize(sound.frequencySweep, -200, -2000);\r\n      randomize(sound.frequencyDeltaSweep, -200, -2000);\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.vibratoDepth, 0, 0.5 * sound.frequency.value);\r\n        randomize(sound.vibratoFrequency, 0, 100);\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.flangerOffset, 0, 10);\r\n        randomize(sound.flangerOffsetSweep, -10, 10);\r\n      }\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Explosion',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['whitenoise', 'pinknoise', 'brownnoise']);\r\n      randomize(sound.interpolateNoise);\r\n\r\n      randomize(sound.sustain, 0.05, 0.1);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.sustainPunch, 0, 100);\r\n      }\r\n      randomize(sound.decay, 0.3, 0.5);\r\n\r\n      if (sound.waveform.value == 'brownnoise') {\r\n        randomize(sound.frequency, 10000, 20000);\r\n      } else {\r\n        randomize(sound.frequency, 1000, 10000);\r\n      }\r\n      randomize(sound.frequencySweep, -1000, -5000);\r\n      randomize(sound.frequencyDeltaSweep, -1000, -5000);\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.tremoloDepth, 0, 50);\r\n        randomize(sound.tremoloFrequency, 0, 100);\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.flangerOffset, 0, 10);\r\n        randomize(sound.flangerOffsetSweep, -10, 10);\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.compression, 0.5, 2.0);\r\n      }\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Powerup',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['sine', 'triangle', 'sawtooth', 'square', 'tangent', 'whistle', 'breaker']);\r\n      randomize(sound.squareDuty);\r\n      randomize(sound.squareDutySweep);\r\n\r\n      randomize(sound.sustain, 0.05, 0.2);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.sustainPunch, 0, 100);\r\n      }\r\n      randomize(sound.decay, 0.1, 0.4);\r\n\r\n      randomize(sound.frequency, 500, 2000);\r\n      randomize(sound.frequencySweep, 0, 2000);\r\n      randomize(sound.frequencyDeltaSweep, 0, 2000);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.repeatFrequency, 0, 20);\r\n      }\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.vibratoDepth);\r\n        randomize(sound.vibratoFrequency);\r\n      }\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Hit/hurt',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['sawtooth', 'square', 'tangent', 'whitenoise', 'pinknoise', 'brownnoise']);\r\n\r\n      randomize(sound.sustain, 0.02, 0.1);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.sustainPunch, 0, 100);\r\n      }\r\n      randomize(sound.decay, 0.02, 0.1);\r\n\r\n      randomize(sound.frequency, 500, 1000);\r\n      randomize(sound.frequencySweep, -200, -1000);\r\n      randomize(sound.frequencyDeltaSweep, -200, -1000);\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.flangerOffset, 0, 10);\r\n        randomize(sound.flangerOffsetSweep, -10, 10);\r\n      }\r\n\r\n      randomize(sound.lowPassCutoffSweep);\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Jump',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['sine', 'square', 'whistle', 'breaker']);\r\n      randomize(sound.squareDuty);\r\n      randomize(sound.squareDutySweep);\r\n\r\n      randomize(sound.sustain, 0.02, 0.1);\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.sustainPunch, 0, 100);\r\n      }\r\n      randomize(sound.decay, 0.05, 0.4);\r\n\r\n      randomize(sound.frequency, 100, 2000);\r\n      randomize(sound.frequencySweep, 200, 2000);\r\n\r\n      if (random.boolean(0.3)) {\r\n        randomize(sound.flangerOffset, 0, 10);\r\n        randomize(sound.flangerOffsetSweep, -10, 10);\r\n      }\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.lowPassCutoff);\r\n      }\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.highPassCutoff);\r\n      }\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n\r\n  new Preset({\r\n    name: 'Blip/select',\r\n    applyTo: function(sound) {\r\n      var random = this.random;\r\n      var randomize = this.randomize.bind(this);\r\n\r\n      sound.waveform.value = random.fromArray(['sine', 'triangle', 'sawtooth', 'square', 'tangent', 'whistle', 'breaker']);\r\n      randomize(sound.squareDuty, 10, 90);\r\n\r\n      randomize(sound.sustain, 0.01, 0.07);\r\n      randomize(sound.decay, 0, 0.03);\r\n\r\n      randomize(sound.frequency, 100, 3000);\r\n\r\n      if (random.boolean(0.5)) {\r\n        randomize(sound.harmonics);\r\n        randomize(sound.harmonicsFalloff);\r\n      }\r\n\r\n      return sound;\r\n    }\r\n  }),\r\n];\r\n","import { ALL_PRESETS } from '../../lib/src';\r\nimport { callIfSaveAsBroken } from './shims.js';\r\n\r\nexport var MainCtrl = ['context', 'Player', '$scope', '$timeout', '$window', 'localStorage', 'fileStorage', 'history', 'synthFactory', function(\r\n      context, Player, $scope, $timeout, $window, localStorage, fileStorage, history, synthFactory) {\r\n  this.showDonateTooltip = !localStorage.get('donated', false) &&\r\n    localStorage.get('donateTooltipLastHidden', 0) + 1000*60*60*24 < Date.now();\r\n\r\n  this.showSafariWarning = false;\r\n  callIfSaveAsBroken(function() { this.showSafariWarning = true; }.bind(this));\r\n\r\n  var player = new Player();\r\n\r\n  this.buffer = null;\r\n  this.synth = null;\r\n\r\n  this.history = history;\r\n\r\n  this.analyserEnabled = localStorage.get('analyserEnabled', true);\r\n  this.autoplay = localStorage.get('autoplayEnabled', true);\r\n  this.createNew = localStorage.get('createNew', true);\r\n\r\n  this.presets = ALL_PRESETS;\r\n\r\n  this.link = null;\r\n\r\n  this.hoveredParam = null;\r\n\r\n  this.dismissDonateTooltip = function() {\r\n    this.showDonateTooltip = false;\r\n    localStorage.set('donateTooltipLastHidden', Date.now());\r\n  };\r\n\r\n  this.dismissDonateTooltipForever = function() {\r\n    this.dismissDonateTooltip();\r\n    localStorage.set('donated', true);\r\n  };\r\n\r\n  this.getSounds = function() {\r\n    return this.history.getSounds();\r\n  };\r\n\r\n  this.getSound = function() {\r\n    return this.history.getCurrentSound();\r\n  };\r\n\r\n  this.currentSoundIndex = function() {\r\n    return this.history.getCurrentIndex();\r\n  };\r\n\r\n  this.setCurrentSoundIndex = function(index) {\r\n    this.history.setCurrentIndex(index);\r\n  };\r\n\r\n  this.deleteSound = function(index) {\r\n    this.history.deleteSound(index);\r\n  };\r\n\r\n  this.isPlaying = function() {\r\n    return player.playing;\r\n  };\r\n\r\n  this.togglePlay = function() {\r\n    if (player.playing) {\r\n      player.stop();\r\n    } else {\r\n      player.play(this.buffer);\r\n    }\r\n  };\r\n\r\n  this.getFrequencyData = function() {\r\n    return player.getFrequencyData();\r\n  };\r\n\r\n  this.openSound = function() {\r\n    fileStorage.loadJfxr().then(function(sound) {\r\n      this.history.addSound(sound);\r\n    }.bind(this), function(error) {\r\n      console.error('Could not load sound', error);\r\n    });\r\n  };\r\n\r\n  this.saveSound = function() {\r\n    fileStorage.saveJfxr(this.getSound(), this.getSound().name);\r\n  };\r\n\r\n  this.duplicateSound = function() {\r\n    this.history.duplicateSound(this.history.getCurrentIndex());\r\n  };\r\n\r\n  this.createLink = function() {\r\n    // http://stackoverflow.com/questions/3213531/creating-a-new-location-object-in-javascript\r\n    var url = document.createElement('a');\r\n    url.href = window.location.href;\r\n    url.hash = encodeURIComponent(this.getSound().serialize());\r\n    this.link = url.href;\r\n  };\r\n\r\n  this.exportSound = function() {\r\n    this.synth.run().then(function(clip) {\r\n      fileStorage.downloadWav(clip, this.getSound().name);\r\n    }.bind(this));\r\n  };\r\n\r\n  this.applyPreset = function(preset) {\r\n    var sound;\r\n    if (this.createNew) {\r\n      sound = history.newSound(preset.name);\r\n    } else {\r\n      sound = this.getSound();\r\n      sound.reset();\r\n    }\r\n    preset.applyTo(sound);\r\n  };\r\n\r\n  this.mutate = function() {\r\n    jfxr.Preset.mutate(this.getSound());\r\n  };\r\n\r\n  this.canUndo = function() {\r\n    return this.history.canUndo();\r\n  };\r\n\r\n  this.undo = function() {\r\n    this.history.undo();\r\n  };\r\n\r\n  this.keyDown = function(e) {\r\n    if (e.target.tagName == 'INPUT' && e.target.type == 'text') {\r\n      return;\r\n    }\r\n    if (e.keyCode == 32) { // space\r\n      this.togglePlay();\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  this.soundNameKeyDown = function(e, currentName) {\r\n    switch (e.keyCode) {\r\n      case 13: // Enter\r\n        $timeout(function() { e.target.blur(); });\r\n        e.preventDefault();\r\n        break;\r\n      case 27: // Esc\r\n        e.target.value = currentName;\r\n        $timeout(function() { e.target.blur(); });\r\n        e.preventDefault();\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Make sure there is always a sound to operate on.\r\n  $scope.$watch(function() { return this.getSounds().length; }.bind(this), function(value) {\r\n    if (value === 0) {\r\n      this.applyPreset(this.presets[0]);\r\n    }\r\n  }.bind(this));\r\n\r\n  $scope.$watch(function() { return this.analyserEnabled; }.bind(this), function(value) {\r\n    if (angular.isDefined(value)) {\r\n      localStorage.set('analyserEnabled', value);\r\n    }\r\n  });\r\n\r\n  $scope.$watch(function() { return this.autoplay; }.bind(this), function(value) {\r\n    if (angular.isDefined(value)) {\r\n      localStorage.set('autoplayEnabled', value);\r\n    }\r\n  });\r\n\r\n  $scope.$watch(function() { return this.createNew; }.bind(this), function(value) {\r\n    if (angular.isDefined(value)) {\r\n      localStorage.set('createNew', value);\r\n    }\r\n  });\r\n\r\n  $scope.$watch(function() { return this.getSound().serialize(); }.bind(this), function(value) {\r\n    if (this.synth) {\r\n      this.synth.cancel();\r\n      this.synth = null;\r\n    }\r\n    player.stop();\r\n    this.buffer = null;\r\n    if (value !== undefined && value !== '') {\r\n      this.synth = synthFactory(value);\r\n      this.synth.run().then(function(clip) {\r\n        this.buffer = context.createBuffer(1, clip.getNumSamples(), clip.getSampleRate());\r\n        this.buffer.getChannelData(0).set(clip.toFloat32Array());\r\n        if (this.autoplay) {\r\n          player.play(this.buffer);\r\n        }\r\n      }.bind(this));\r\n    }\r\n  }.bind(this));\r\n\r\n  $scope.$on('parammouseenter', function($event, param) {\r\n    this.hoveredParam = param;\r\n  }.bind(this));\r\n\r\n  $scope.$on('parammouseleave', function($event, param) {\r\n    this.hoveredParam = null;\r\n  }.bind(this));\r\n\r\n  var parseHash = function() {\r\n    var json = decodeURIComponent($window.location.hash.replace(/^#/, ''));\r\n    $window.location.hash = '';\r\n    if (json.length > 0) {\r\n      var sound = new jfxr.Sound();\r\n      try {\r\n        sound.parse(json);\r\n      } catch (ex) {\r\n        console.error('Could not parse sound from URL fragment', ex);\r\n        return;\r\n      }\r\n      this.history.addSound(sound);\r\n    }\r\n  }.bind(this);\r\n  parseHash();\r\n}];\r\n","export var analyser = [function() {\r\n  var draw = function(context, width, height, data) {\r\n    var barWidth = Math.max(2, Math.ceil(width / data.length));\r\n    var numBars = Math.floor(width / barWidth);\r\n    var barGap = 1;\r\n\r\n    var blockHeight = 3;\r\n    var blockGap = 1;\r\n    var numBlocks = Math.floor(height / blockHeight);\r\n\r\n    context.clearRect(0, 0, width, height);\r\n\r\n    var gradient = context.createLinearGradient(0, 0, 0, height);\r\n    gradient.addColorStop(0, '#f00');\r\n    gradient.addColorStop(0.6, '#dd0');\r\n    gradient.addColorStop(1, '#0b0');\r\n\r\n    var i;\r\n    var y;\r\n\r\n    context.fillStyle = gradient;\r\n    context.globalAlpha = 1.0;\r\n    for (i = 0; i < numBars; i++) {\r\n      var f = (data[i] + 100) / 100;\r\n      y = Math.round(f * numBlocks) / numBlocks;\r\n      context.fillRect(i * barWidth, (1 - y) * height, barWidth - barGap, y * height);\r\n    }\r\n\r\n    context.fillStyle = '#111';\r\n    context.globalAlpha = 0.3;\r\n    for (i = 0; i < numBlocks; i++) {\r\n      y = i * blockHeight + 1;\r\n      context.fillRect(0, y, width, blockGap);\r\n    }\r\n  };\r\n\r\n  return {\r\n    scope: {\r\n      'analyser': '=',\r\n      'enabled': '=',\r\n    },\r\n    link: function(scope, element, attrs, ctrl) {\r\n      var destroyed = false;\r\n      element.bind('$destroy', function() {\r\n        destroyed = true;\r\n      });\r\n\r\n      var canvas = element[0];\r\n      var context = canvas.getContext('2d');\r\n      var width = canvas.width;\r\n      var height = canvas.height;\r\n\r\n      var animFrame = function() {\r\n        if (!enabled) {\r\n          return;\r\n        }\r\n        if (data) {\r\n          draw(context, width, height, data);\r\n        }\r\n        window.requestAnimationFrame(animFrame);\r\n      };\r\n\r\n      var data = null;\r\n      scope.$watch('analyser', function(value) {\r\n        data = value;\r\n      });\r\n\r\n      var enabled = true;\r\n      scope.$watch('enabled', function(value) {\r\n        enabled = value;\r\n        if (enabled) {\r\n          window.requestAnimationFrame(animFrame);\r\n        } else {\r\n          context.clearRect(0, 0, width, height);\r\n        }\r\n      });\r\n    },\r\n  };\r\n}];\r\n","import { saveAs } from 'file-saver';\r\n\r\nimport { Sound } from '../../lib/src';\r\n\r\nexport var fileStorage = ['$q', function($q) {\r\n\r\n  var download = function(blob, filename) {\r\n    saveAs(blob, filename);\r\n  };\r\n\r\n  var upload = function() {\r\n    var input = document.createElement('input');\r\n    input.type = 'file';\r\n    var deferred = $q.defer();\r\n    angular.element(input).on('change', function() {\r\n      var file = input.files[0];\r\n      if (file) {\r\n        var reader = new FileReader();\r\n        reader.addEventListener('load', function() {\r\n          deferred.resolve({name: file.name, data: reader.result});\r\n        });\r\n        reader.addEventListener('error', function() {\r\n          deferred.reject(reader.error);\r\n        });\r\n        reader.readAsText(file);\r\n      }\r\n    });\r\n    input.focus();\r\n    input.click();\r\n    // Note: if the file picker dialog is cancelled, we never reject the\r\n    // promise.\r\n    return deferred.promise;\r\n  };\r\n\r\n  this.downloadWav = function(clip, basename) {\r\n    var blob = new Blob([clip.toWavBytes()], {type: 'audio/wav'});\r\n    download(blob, basename + '.wav');\r\n  };\r\n\r\n  this.saveJfxr = function(sound, basename) {\r\n    var json = sound.serialize();\r\n    var blob = new Blob([json], {type: 'application/json'});\r\n    download(blob, basename + '.jfxr');\r\n  };\r\n\r\n  this.loadJfxr = function() {\r\n    return upload().then(function(msg) {\r\n      var sound = new Sound();\r\n      sound.parse(msg.data);\r\n      sound.name = msg.name.replace(/\\.jfxr$/, '');\r\n      return sound;\r\n    });\r\n  };\r\n}];\r\n","import { clamp, Sound } from '../../lib/src';\r\n\r\nexport var history = ['$rootScope', 'localStorage', function($rootScope, localStorage) {\r\n  var sounds = [];\r\n  var undoStacks = [];\r\n  var soundIndex = null;\r\n\r\n  this.getSounds = function() {\r\n    return sounds;\r\n  };\r\n\r\n  this.getCurrentIndex = function() {\r\n    return soundIndex;\r\n  };\r\n\r\n  this.getCurrentSound = function() {\r\n    if (soundIndex === null) return null;\r\n    return sounds[soundIndex];\r\n  };\r\n\r\n  this.setCurrentIndex = function(index) {\r\n    index = index || 0;\r\n    if (sounds.length === 0) return;\r\n    soundIndex = clamp(0, sounds.length - 1, index);\r\n  };\r\n\r\n  this.newSound = function(basename) {\r\n    var sound = new Sound();\r\n    sound.name = getFreeName(basename);\r\n    this.addSound(sound);\r\n    return sound;\r\n  };\r\n\r\n  this.addSound = function(sound, index) {\r\n    if (index === undefined) index = 0;\r\n    sounds.splice(index, 0, sound);\r\n    undoStacks.splice(index, 0, []);\r\n    soundIndex = index;\r\n  };\r\n\r\n  this.duplicateSound = function(index) {\r\n    var dup = sounds[index].clone();\r\n    dup.name = getFreeName(dup.name.replace(/ \\d+$/, ''));\r\n    this.addSound(dup, index);\r\n  };\r\n\r\n  this.deleteSound = function(index) {\r\n    sounds.splice(index, 1);\r\n    undoStacks.splice(index, 1);\r\n    if (soundIndex > index) {\r\n      soundIndex--;\r\n    }\r\n    if (soundIndex >= sounds.length) {\r\n      soundIndex = sounds.length - 1;\r\n    }\r\n    if (soundIndex < 0) {\r\n      soundIndex = null;\r\n    }\r\n  };\r\n\r\n  this.undo = function() {\r\n    if (soundIndex === null) return;\r\n    var undoStack = undoStacks[soundIndex];\r\n    if (undoStack.length > 0) {\r\n      var json = undoStack[undoStack.length - 1];\r\n      this.getCurrentSound().parse(json);\r\n      // We don't pop, because the change to the current sound triggers a watch\r\n      // on the current sound. That watch is responsible for removing the top\r\n      // of the stack. If we did it here, the watch would immediately re-add\r\n      // the previous (now undone) state on top of the stack.\r\n    }\r\n  };\r\n\r\n  this.canUndo = function() {\r\n    return soundIndex !== null && undoStacks[soundIndex].length > 0;\r\n  };\r\n\r\n  var getFreeName = function(basename) {\r\n    var max = 0;\r\n    for (var i = 0; i < sounds.length; i++) {\r\n      var m = sounds[i].name.match('^' + basename + ' (\\\\d+)$');\r\n      if (m) {\r\n         max = Math.max(max, parseInt(m[1]));\r\n      }\r\n    }\r\n    return basename + ' ' + (max + 1);\r\n  }.bind(this);\r\n\r\n  var storageName = function(index) {\r\n    return 'sounds[' + index + ']';\r\n  };\r\n\r\n  var storeSound = function(index, value) {\r\n    if (value === undefined && index < sounds.length) {\r\n      value = sounds[index].serialize();\r\n    }\r\n    if (!value) value = '';\r\n    localStorage.set(storageName(index), value);\r\n  }.bind(this);\r\n\r\n  for (var i = 0;; i++) {\r\n    var str = localStorage.get(storageName(i), undefined);\r\n    if (!str) {\r\n      break;\r\n    }\r\n    var sound = new Sound();\r\n    try {\r\n      sound.parse(str);\r\n    } catch (ex) {\r\n      console.error('Could not parse sound from local storage', ex);\r\n      continue;\r\n    }\r\n    this.addSound(sound, i);\r\n  }\r\n\r\n  soundIndex = clamp(0, sounds.length - 1, localStorage.get('soundIndex', 0));\r\n\r\n  $rootScope.$watchCollection(function() { return this.getSounds(); }.bind(this), function(value, oldValue) {\r\n    var i;\r\n    // The entire array might have shifted, so we need to save them all.\r\n    for (i = 0; i < value.length; i++) {\r\n      storeSound(i);\r\n    }\r\n    for (i = value.length; i < oldValue.length; i++) {\r\n      localStorage.delete(storageName(i));\r\n    }\r\n  }.bind(this));\r\n\r\n  var unwatchCurrentSound = null;\r\n  $rootScope.$watch(function() { return this.getCurrentSound(); }.bind(this), function(value) {\r\n    if (unwatchCurrentSound) {\r\n      unwatchCurrentSound();\r\n      unwatchCurrentSound = null;\r\n    }\r\n    if (value) {\r\n      unwatchCurrentSound = $rootScope.$watch(\r\n          function() { return value.serialize(); }, function(json, prevJson) {\r\n        storeSound(soundIndex, json);\r\n        if (json != prevJson) {\r\n          var undoStack = undoStacks[soundIndex];\r\n          if (undoStack.length > 0 && undoStack[undoStack.length - 1] == json) {\r\n            // We just undid something.\r\n            undoStack.pop();\r\n          } else {\r\n            undoStacks[soundIndex].push(prevJson);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  $rootScope.$watch(function() { return this.getCurrentIndex(); }.bind(this), function(value) {\r\n    localStorage.set('soundIndex', value);\r\n  }.bind(this));\r\n}];\r\n","export var context = [function() {\r\n  return new AudioContext();\r\n}];\r\n\r\nexport var Player = ['$rootScope', 'context', function(\r\n      $rootScope, context) {\r\n  var Player = function() {\r\n    this.position = 0;\r\n\r\n    this.playing = false;\r\n\r\n    this.analyser = context.createAnalyser();\r\n    this.analyser.fftSize = 512;\r\n    this.analyser.smoothingTimeConstant = 0.5;\r\n    this.analyser.connect(context.destination);\r\n\r\n    this.frequencyData = new Float32Array(this.analyser.frequencyBinCount);\r\n    for (var i = 0; i < this.frequencyData.length; i++) {\r\n      this.frequencyData[i] = -100;\r\n    }\r\n\r\n    // Make sure that the AnalyserNode is tickled at a regular interval,\r\n    // even if we paint the canvas at irregular intervals. This is needed\r\n    // because smoothing is applied only when the data is requested.\r\n    this.script = context.createScriptProcessor(1024);\r\n    this.script.onaudioprocess = function(e) {\r\n      this.analyser.getFloatFrequencyData(this.frequencyData);\r\n    }.bind(this);\r\n    // Feed zeros into the analyser because otherwise it freezes up as soon\r\n    // as the sound stops playing.\r\n    this.script.connect(this.analyser);\r\n  };\r\n\r\n  Player.prototype.play = function(buffer) {\r\n    // Always try resuming the context before starting playback:\r\n    // https://goo.gl/7K7WLu\r\n    context.resume().then(function() {\r\n      if (this.playing) {\r\n        this.stop();\r\n      }\r\n      this.source = context.createBufferSource();\r\n      this.source.connect(this.analyser);\r\n      this.source.buffer = buffer;\r\n      this.source.start(0);\r\n      this.source.onended = function() {\r\n        this.playing = false;\r\n        $rootScope.$apply();\r\n      }.bind(this);\r\n      this.playing = true;\r\n    }.bind(this));\r\n  };\r\n\r\n  Player.prototype.stop = function() {\r\n    if (!this.playing) {\r\n      return;\r\n    }\r\n    this.source.stop(0);\r\n    this.source.onended = null;\r\n    this.source = null;\r\n    this.playing = false;\r\n  };\r\n\r\n  Player.prototype.getFrequencyData = function() {\r\n    return this.frequencyData;\r\n  };\r\n\r\n  return Player;\r\n}];\r\n","export var localStorage = [function() {\r\n  var LocalStorage = function() {\r\n    this.data = window.localStorage || {};\r\n  };\r\n\r\n  LocalStorage.prototype.get = function(key, defaultValue) {\r\n    var json = this.data[key];\r\n    if (json === undefined) {\r\n      return defaultValue;\r\n    }\r\n    return JSON.parse(json);\r\n  };\r\n\r\n  LocalStorage.prototype.set = function(key, value) {\r\n    this.data[key] = JSON.stringify(value);\r\n  };\r\n\r\n  LocalStorage.prototype.delete = function(key) {\r\n    this.data.removeItem(key);\r\n  };\r\n\r\n  return new LocalStorage();\r\n}];\r\n","import { Synth } from '../../lib/src';\r\n\r\nexport var synthFactory = ['$q', '$timeout', function($q, $timeout) {\r\n  return function(str) {\r\n    return new PromiseSynth(str, $timeout, $q);\r\n  };\r\n}];\r\n\r\nvar PromiseSynth = function(str, $timeout, $q) {\r\n  Synth.call(this, str, $timeout);\r\n  this.$q = $q;\r\n};\r\nPromiseSynth.prototype = Object.create(Synth.prototype);\r\n\r\nPromiseSynth.prototype.run = function() {\r\n  if (this.deferred) {\r\n    return this.deferred.promise;\r\n  }\r\n  this.deferred = this.$q.defer();\r\n  var doneCallback = this.deferred.resolve.bind(this.deferred);\r\n  Synth.prototype.run.call(this, doneCallback);\r\n  return this.deferred.promise;\r\n};\r\n\r\nPromiseSynth.prototype.cancel = function() {\r\n  if (!this.deferred) {\r\n    return;\r\n  }\r\n  Synth.prototype.cancel.call(this);\r\n  this.deferred.reject();\r\n  this.deferred = null;\r\n};\r\n","import { sign } from '../../lib/src';\r\n\r\nexport var customParam = [function() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      sound: '=',\r\n      param: '@',\r\n    },\r\n    transclude: true,\r\n    template:\r\n      '<div class=\"param\" ng-class=\"{\\'param-disabled\\': sound[param].isDisabled(sound)}\" title={{sound[param].whyDisabled(sound)}} ng-mouseenter=\"$emit(\\'parammouseenter\\', sound[param])\" ng-mouseleave=\"$emit(\\'parammouseleave\\', sound[param])\">' +\r\n            '  <div class=\"paramlabel\">{{sound[param].label}}</div>' +\r\n            '  <div class=\"paramcontent\" ng-transclude></div>' +\r\n      '  <div class=\"parambuttons\">' +\r\n      '    <button class=\"iconbutton iconbutton-reset\" title=\"Reset to default value\" ng-click=\"sound[param].reset()\" ng-disabled=\"sound[param].isDisabled(sound) || sound[param].hasDefaultValue()\"></button>' +\r\n      '    <button class=\"iconbutton iconbutton-lock\" ng-class=\"{\\'iconbutton-lock-locked\\': sound[param].locked}\" title=\"Lock from mutations\" ng-click=\"sound[param].toggleLocked()\" ng-disabled=\"sound[param].isDisabled(sound)\"></button>' +\r\n      '  </div>' +\r\n      '</div>',\r\n  };\r\n}];\r\n\r\nexport var floatParam = [function() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      sound: '=',\r\n      param: '@',\r\n    },\r\n    template:\r\n      '<custom-param sound=\"sound\" param=\"{{param}}\" value=\"sound[param].value\">' +\r\n      '  <div class=\"paramcontrol\">' +\r\n      '    <input type=\"range\" min=\"{{ctrl.minValue}}\" max=\"{{ctrl.maxValue}}\" step=\"{{ctrl.step}}\" ng-model=\"ctrl.rangeValue\" ng-disabled=\"sound[param].isDisabled(sound)\" class=\"floatslider\"></input>' +\r\n      '  </div>' +\r\n      '  <div class=\"paramvalue\">' +\r\n      '    <input ng-show=\"!sound[param].isDisabled(sound)\" class=\"floattext\" type=\"text\" ng-model=\"ctrl.textValue\"></input>' +\r\n      '    <span ng-show=\"sound[param].isDisabled(sound)\">&mdash;</span>' +\r\n      '  </div>' +\r\n      '  <div class=\"paramunit\">{{sound[param].unit}}</div>' +\r\n      '</div>',\r\n    controller: ['$scope', function($scope) {\r\n      // These are bound by ngModel; do not use them for anything else directly.\r\n      this.rangeValue = '';\r\n      this.textValue = '';\r\n\r\n      // If r is the value on the range slider, and p the corresponding value of the parameter:\r\n      // p = (2^abs(r) - 1) * sign(r)\r\n      // This works for negative numbers and ensures continuity (and even differentiability)\r\n      // through 0, but loses precision for numbers close to 0.\r\n      function fromLog(r) {\r\n        return sign(r) * (Math.pow(2, Math.abs(r)) - 1);\r\n      }\r\n      function toLog(p) {\r\n        return sign(p) * Math.log(Math.abs(p) + 1) / Math.log(2);\r\n      }\r\n\r\n      var param = null;\r\n      var logarithmic = false;\r\n      this.minValue = 0;\r\n      this.maxValue = 0;\r\n      this.step = 0;\r\n      $scope.$watch(function() { return $scope.sound[$scope.param]; }, function(p) {\r\n        if (!p) return;\r\n        param = p;\r\n        logarithmic = param.logarithmic;\r\n        if (logarithmic) {\r\n          this.minValue = toLog(param.minValue);\r\n          this.maxValue = toLog(param.maxValue);\r\n          this.step = 1e-99;\r\n        } else {\r\n          this.minValue = param.minValue;\r\n          this.maxValue = param.maxValue;\r\n          this.step = param.step;\r\n        }\r\n      }.bind(this));\r\n\r\n      this.getRangeValue = function(value) {\r\n        if (logarithmic) {\r\n          return fromLog(parseFloat(this.rangeValue));\r\n        } else {\r\n          return this.rangeValue;\r\n        }\r\n      };\r\n\r\n      this.setRangeValue = function(value) {\r\n        if (logarithmic) {\r\n          this.rangeValue = toLog(value);\r\n        } else {\r\n          this.rangeValue = value;\r\n        }\r\n      };\r\n\r\n      this.getTextValue = function(value) {\r\n        return this.textValue;\r\n      };\r\n\r\n      this.setTextValue = function(value) {\r\n        this.textValue = value;\r\n      };\r\n\r\n      this.getParamValue = function(value) {\r\n        if (!param) return null;\r\n        return param.value;\r\n      };\r\n\r\n      this.setParamValue = function(value) {\r\n        if (!param) return;\r\n        param.value = value;\r\n      };\r\n\r\n      this.stepParam = function(delta) {\r\n        if (!param) return;\r\n        var value = this.getParamValue();\r\n        delta = sign(delta);\r\n        if (logarithmic) {\r\n          value -= delta * param.step;\r\n        } else {\r\n          value /= param.step;\r\n        }\r\n        this.setParamValue(value);\r\n      };\r\n    }],\r\n    controllerAs: 'ctrl',\r\n    link: function(scope, element, attrs, ctrl) {\r\n      element.bind('wheel', function(e) {\r\n        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey || e.buttons) {\r\n          return;\r\n        }\r\n        var delta = e.deltaX + e.deltaY;\r\n        ctrl.stepParam(delta);\r\n        scope.$apply();\r\n        e.preventDefault();\r\n      });\r\n\r\n      scope.$watch(ctrl.getParamValue.bind(ctrl), function(value) {\r\n        ctrl.setRangeValue(value);\r\n        ctrl.setTextValue(value);\r\n      });\r\n\r\n      var rangeInput = angular.element(element[0].getElementsByClassName('floatslider'));\r\n      rangeInput.bind('input', function(e) {\r\n        var value = ctrl.getRangeValue();\r\n        ctrl.setTextValue(value);\r\n        ctrl.setParamValue(value);\r\n        scope.$apply();\r\n      });\r\n\r\n      var textInput = angular.element(element[0].getElementsByClassName('floattext'));\r\n      textInput.bind('blur', function(e) {\r\n        ctrl.setParamValue(ctrl.getTextValue());\r\n        ctrl.setTextValue(ctrl.getParamValue()); // Propagates clamping etc. back to the text input.\r\n        scope.$apply();\r\n      });\r\n      textInput.bind('keydown', function(e) {\r\n        switch (e.keyCode) {\r\n          case 13: // Enter\r\n            textInput[0].blur();\r\n            e.preventDefault();\r\n            break;\r\n          case 27: // Esc\r\n            ctrl.setTextValue(ctrl.getParamValue());\r\n            textInput[0].blur();\r\n            e.preventDefault();\r\n            break;\r\n        }\r\n      });\r\n    },\r\n  };\r\n}];\r\n\r\nexport var booleanParam = [function() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      sound: '=',\r\n      param: '@',\r\n    },\r\n    template:\r\n      '<custom-param sound=\"sound\" param=\"{{param}}\">' +\r\n      '  <div class=\"paramcontrol\">' +\r\n      '    <label class=\"booleanlabel\" ng-class=\"{\\'booleanlabel-checked\\': sound[param].value, \\'booleanlabel-disabled\\': sound[param].isDisabled(sound)}\"><input type=\"checkbox\" ng-model=\"sound[param].value\" ng-disabled=\"sound[param].isDisabled(sound)\"></input></label>' +\r\n      '  </div>' +\r\n      '  <div class=\"customparamvalue\" ng-switch=\"sound[param].isDisabled(sound)\">' +\r\n      '    <span ng-switch-when=\"false\">{{sound[param].valueTitle()}}</span>' +\r\n      '    <span ng-switch-when=\"true\">&mdash;</span>' +\r\n      '  </div>' +\r\n      '</div>',\r\n    link: function(scope, element, attrs, ctrl) {\r\n      element.bind('wheel', function(e) {\r\n        if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey || e.buttons) {\r\n          return;\r\n        }\r\n        var delta = e.deltaX + e.deltaY;\r\n        scope.$apply(function() {\r\n          var param = scope.sound[scope.param];\r\n          param.value -= sign(delta) * param.step;\r\n        });\r\n        e.preventDefault();\r\n      });\r\n\r\n      // Something funny is going on with initialization of range elements with float values.\r\n      // E.g. without this, the sustain slider will start at the 0 position. Angular bug?\r\n      var unwatch = scope.$watch('sound[param].value', function(value) {\r\n        if (value !== undefined) {\r\n          element.find('input')[0].value = value;\r\n          unwatch();\r\n        }\r\n      });\r\n    },\r\n  };\r\n}];\r\n\r\nexport var waveformButton = [function() {\r\n  return {\r\n    require: 'ngModel',\r\n    scope: {\r\n      title: '@',\r\n      waveform: '@waveformButton',\r\n      ngModel: '=',\r\n    },\r\n    template:\r\n      '<label class=\"waveform\" ' +\r\n      '       ng-class=\"\\'waveform-\\' + waveform + (checked ? \\' checked\\' : \\'\\')\" title=\"{{title}}\">' +\r\n      '  <input type=\"radio\" name=\"waveform\" ng-value=\"waveform\"></input>' +\r\n      '  {{title}}' +\r\n      '</label>',\r\n    link: function(scope, element, attrs, modelCtrl) {\r\n      var input = element.find('input');\r\n      var value = scope.waveform;\r\n\r\n      scope.$watch(function() { return input[0].checked; }, function(checked) {\r\n        scope.checked = checked;\r\n      });\r\n\r\n      modelCtrl.$render = function() {\r\n        input[0].checked = (modelCtrl.$viewValue == value);\r\n      };\r\n      input.bind('click', function() {\r\n        scope.$apply(function() {\r\n          if (input[0].checked) {\r\n            modelCtrl.$setViewValue(value);\r\n          }\r\n        });\r\n      });\r\n    },\r\n  };\r\n}];\r\n\r\nexport var linkbox = ['$document', '$timeout', function($document, $timeout) {\r\n  return {\r\n    scope: {\r\n      for: '=',\r\n    },\r\n    template: '<input type=\"text\" readonly class=\"linkbox\" ng-model=\"for\" ng-show=\"for\"></input>',\r\n    link: function(scope, element, attrs, ctrl) {\r\n      var input = element.find('input');\r\n      input.on('blur', function() {\r\n        scope['for'] = null;\r\n        scope.$apply();\r\n      });\r\n      scope.$watch('for', function(value) {\r\n        if (value) {\r\n          $timeout(function() {\r\n            input[0].focus();\r\n            input[0].setSelectionRange(0, value.length);\r\n          });\r\n        }\r\n      });\r\n    },\r\n  };\r\n}];\r\n","export var canvasManager = [function() {\r\n  return {\r\n    controller: ['$element', function($element) {\r\n      var canvas = $element[0];\r\n      var context = canvas.getContext('2d');\r\n      var width = 0;\r\n      var height = 0;\r\n      var drawFunctions = [];\r\n\r\n      this.registerDrawFunction = function(drawFunction) {\r\n        drawFunctions.push(drawFunction);\r\n      };\r\n\r\n      this.draw = function() {\r\n        width = canvas.clientWidth;\r\n        height = canvas.clientHeight;\r\n        if (canvas.width != width) {\r\n          canvas.width = width;\r\n        }\r\n        if (canvas.height != height) {\r\n          canvas.height = height;\r\n        }\r\n\r\n        context.globalAlpha = 1.0;\r\n        context.clearRect(0, 0, width, height);\r\n\r\n        for (var i = 0; i < drawFunctions.length; i++) {\r\n          drawFunctions[i](context, width, height);\r\n        }\r\n      };\r\n    }],\r\n  };\r\n}];\r\n\r\nexport var waveshape = [function() {\r\n  return {\r\n    require: 'canvasManager',\r\n    link: function(scope, element, attrs, ctrl) {\r\n      var buffer = null;\r\n\r\n      ctrl.registerDrawFunction(function(context, width, height) {\r\n        if (!buffer) return;\r\n\r\n        var channel = buffer.getChannelData(0);\r\n        var numSamples = buffer.length;\r\n\r\n        context.strokeStyle = '#fff';\r\n        context.globalAlpha = 0.1;\r\n        context.lineWidth = 1.0;\r\n        context.beginPath();\r\n        context.moveTo(0, height / 2);\r\n        context.lineTo(width, height / 2);\r\n        context.stroke();\r\n\r\n        context.strokeStyle = '#57d';\r\n        context.globalAlpha = 1.0;\r\n\r\n        var i;\r\n        var sample;\r\n\r\n        if (numSamples < width) {\r\n          // Draw a line between each pair of successive samples.\r\n          context.beginPath();\r\n          for (i = 0; i < numSamples; i++) {\r\n            sample = channel[i];\r\n            context.lineTo(i / numSamples * width, (1 - sample) * height / 2);\r\n          }\r\n          context.stroke();\r\n        } else {\r\n          // More samples than pixels. At a 5s buffer, drawing all samples\r\n          // takes 300ms. For performance, draw a vertical line in each pixel\r\n          // column, representing the range of samples falling into this\r\n          // column.\r\n          // TODO: make this look smoother by taking advantage of antialiasing somehow\r\n          for (var x = 0; x < width; x++) {\r\n            var min = 1e99, max = -1e99;\r\n            var start = Math.floor(x / width * numSamples);\r\n            var end = Math.ceil((x + 1) / width * numSamples);\r\n            for (i = start; i < end; i++) {\r\n              sample = channel[i];\r\n              if (sample < min) min = sample;\r\n              if (sample > max) max = sample;\r\n            }\r\n            context.beginPath();\r\n            context.moveTo(x + 0.5, (1 - min) * height / 2 - 0.5);\r\n            context.lineTo(x + 0.5, (1 - max) * height / 2 + 0.5);\r\n            context.stroke();\r\n          }\r\n        }\r\n      });\r\n\r\n      scope.$watch(attrs.waveshape, function(value) {\r\n        buffer = value;\r\n        ctrl.draw();\r\n      });\r\n    },\r\n  };\r\n}];\r\n\r\nexport var drawAmplitude = [function() {\r\n  return {\r\n    require: 'canvasManager',\r\n    link: function(scope, element, attrs, ctrl) {\r\n      var sound = null;\r\n\r\n      ctrl.registerDrawFunction(function(context, width, height) {\r\n        if (!sound) return;\r\n\r\n        var duration = sound.duration();\r\n        var baseY = height - 0.5;\r\n        var scaleY = -(height - 1) / (1 + sound.sustainPunch.value / 100);\r\n\r\n        context.strokeStyle = '#d66';\r\n        context.globalAlpha = 1.0;\r\n        context.lineWidth = 1.0;\r\n        context.beginPath();\r\n        for (var x = 0; x < width; x++) {\r\n          var time = x / width * duration;\r\n          context.lineTo(x, baseY + sound.amplitudeAt(time) * scaleY);\r\n        }\r\n        context.stroke();\r\n      });\r\n\r\n      scope.$watch(attrs.drawAmplitude + '.serialize()', function(value) {\r\n        sound = scope.$eval(attrs.drawAmplitude);\r\n        ctrl.draw();\r\n      });\r\n    },\r\n  };\r\n}];\r\n\r\nexport var drawFrequency = [function() {\r\n  return {\r\n    require: 'canvasManager',\r\n    link: function(scope, element, attrs, ctrl) {\r\n      var sound = null;\r\n\r\n      ctrl.registerDrawFunction(function(context, width, height) {\r\n        if (!sound) return;\r\n\r\n        var duration = sound.duration();\r\n\r\n        var min = 0;\r\n        var max = 0;\r\n        var x;\r\n        for (x = 0; x < width; x++) {\r\n          var f = sound.frequencyAt(x / width * duration);\r\n          max = Math.max(max, f);\r\n        }\r\n        var baseY;\r\n        var scaleY;\r\n        if (max - min > 0) {\r\n          scaleY = -(height - 1) / (max - min);\r\n          baseY = height - 0.5 - min * scaleY;\r\n        } else {\r\n          scaleY = 0;\r\n          baseY = height / 2;\r\n        }\r\n\r\n        context.strokeStyle = '#bb5';\r\n        context.globalAlpha = 1.0;\r\n        context.lineWidth = 1.0;\r\n        context.beginPath();\r\n        for (x = 0; x < width; x++) {\r\n          var time = x / width * duration;\r\n          context.lineTo(x, baseY + sound.frequencyAt(time) * scaleY);\r\n        }\r\n        context.stroke();\r\n      });\r\n\r\n      scope.$watch(attrs.drawFrequency + '.serialize()', function(value) {\r\n        sound = scope.$eval(attrs.drawFrequency);\r\n        ctrl.draw();\r\n      });\r\n    },\r\n  };\r\n}];\r\n","import { missingBrowserFeatures } from './shims.js';\r\nimport { MainCtrl } from './mainctrl.js';\r\nimport { analyser } from './analyser.js';\r\nimport { fileStorage } from './file.js';\r\nimport { history } from './history.js';\r\nimport { context, Player } from './player.js';\r\nimport { localStorage } from './storage.js';\r\nimport { synthFactory } from './synthfactory.js';\r\nimport { customParam, floatParam, booleanParam, waveformButton, linkbox } from './ui.js';\r\nimport { canvasManager, waveshape, drawAmplitude, drawFrequency } from './waveshape.js';\r\n\r\nvar jfxrApp = angular.module('jfxrApp', []);\r\n\r\njfxrApp.controller('MainCtrl', MainCtrl);\r\n\r\njfxrApp.directive('analyser', analyser);\r\njfxrApp.directive('customParam', customParam);\r\njfxrApp.directive('floatParam', floatParam);\r\njfxrApp.directive('booleanParam', booleanParam);\r\njfxrApp.directive('waveformButton', waveformButton);\r\njfxrApp.directive('linkbox', linkbox);\r\njfxrApp.directive('canvasManager', canvasManager);\r\njfxrApp.directive('waveshape', waveshape);\r\njfxrApp.directive('drawAmplitude', drawAmplitude);\r\njfxrApp.directive('drawFrequency', drawFrequency);\r\n\r\njfxrApp.service('context', context);\r\njfxrApp.service('fileStorage', fileStorage);\r\njfxrApp.service('history', history);\r\njfxrApp.service('Player', Player);\r\njfxrApp.service('localStorage', localStorage);\r\njfxrApp.service('synthFactory', synthFactory);\r\n\r\nfunction init() {\r\n  var panic = angular.element(document.getElementById('panic'));\r\n  var missing = missingBrowserFeatures();\r\n  if (missing.length > 0) {\r\n    panic.html(\r\n      'Unfortunately, jfxr cannot run in this browser because it lacks the following features: ' +\r\n      missing.join(', ') + '. Try a recent Chrome or Firefox instead.');\r\n    return;\r\n  }\r\n  panic.remove();\r\n\r\n  angular.element(document).ready(function() {\r\n    angular.bootstrap(document, ['jfxrApp']);\r\n  });\r\n}\r\n\r\ninit();\r\n"],"sourceRoot":""}