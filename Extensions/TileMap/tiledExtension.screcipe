{"fileData":[{"jsonIndex":"0","boilerIndex":0,"filePath":"/","name":"JsExtension.js","data":"/**\n * This is a declaration of an extension for GDevelop 5.\n *\n * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change\n * to this extension file or to any other *.js file that you reference inside.\n *\n * The file must be named \"JsExtension.js\", otherwise GDevelop won't load it.\n * ⚠️ If you make a change and the extension is not loaded, open the developer console\n * and search for any errors.\n *\n * More information on https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md\n */\n\nmodule.exports = {\n  createExtension: function(_, gd) {\n    const extension = new gd.PlatformExtension();\n    extension\n      .setExtensionInformation(\n        'TileMap',\n        _('TileMap Object'),\n        _('Displays a tiled file tilemap.'),\n        'Todor Imreorov',\n        'Open source (MIT License)'\n      )\n      .setExtensionHelpPath('/objects/tile_map');\n\n    var objectTileMap = new gd.ObjectJsImplementation();\n    objectTileMap.updateProperty = function(\n      objectContent,\n      propertyName,\n      newValue\n    ) {\n      if (propertyName in objectContent) {\n        if (typeof objectContent[propertyName] === 'boolean')\n          objectContent[propertyName] = newValue === '1';\n        else objectContent[propertyName] = newValue;\n        return true;\n      }\n\n      return false;\n    };\n    objectTileMap.getProperties = function(objectContent) {\n      var objectProperties = new gd.MapStringPropertyDescriptor();\n\n      objectProperties.set(\n        'tiledFile',\n        new gd.PropertyDescriptor(objectContent.tiledFile)\n          .setType('resource')\n          .addExtraInfo('json')\n          .setLabel(_('Tiled file'))\n      );\n      objectProperties.set(\n        'tilemapAtlasImage',\n        new gd.PropertyDescriptor(objectContent.tilemapAtlasImage)\n          .setType('resource')\n          .addExtraInfo('image')\n          .setLabel(_('Tilemap atlas image'))\n      );\n      objectProperties.set(\n        'displayMode',\n        new gd.PropertyDescriptor(objectContent.displayMode)\n          .setType('choice')\n          .addExtraInfo('visible')\n          .addExtraInfo('all')\n          .addExtraInfo('index')\n          .setLabel(_('Display mode'))\n      );\n      objectProperties.set(\n        'layerIndex',\n        new gd.PropertyDescriptor(objectContent.layerIndex.toString())\n          .setType('number')\n          .setLabel(_('Layer index'))\n      );\n      objectProperties.set(\n        'animationSpeed',\n        new gd.PropertyDescriptor(objectContent.animationSpeed.toString())\n          .setType('number')\n          .setLabel(_('Animation speed'))\n      );\n\n      return objectProperties;\n    };\n    objectTileMap.setRawJSONContent(\n      JSON.stringify({\n        tiledFile: '',\n        tilemapAtlasImage: '',\n        displayMode: 'visible',\n        layerIndex: 0,\n        animationSpeed: 1,\n      })\n    );\n\n    objectTileMap.updateInitialInstanceProperty = function(\n      objectContent,\n      instance,\n      propertyName,\n      newValue,\n      project,\n      layout\n    ) {\n      return false;\n    };\n    objectTileMap.getInitialInstanceProperties = function(\n      content,\n      instance,\n      project,\n      layout\n    ) {\n      var instanceProperties = new gd.MapStringPropertyDescriptor();\n      return instanceProperties;\n    };\n\n    const object = extension\n      .addObject(\n        'TileMap',\n        _('TileMap'),\n        _('Displays a tiled file tilemap'),\n        'JsPlatform/Extensions/tile_map32.png',\n        objectTileMap\n      )\n      .setIncludeFile('Extensions/TileMap/tilemapruntimeobject.js')\n      .addIncludeFile(\n        'Extensions/TileMap/tilemapruntimeobject-pixi-renderer.js'\n      )\n      .addIncludeFile(\n        'Extensions/TileMap/pixi-tilemap/dist/pixi-tilemap.umd.js'\n      )\n      .addIncludeFile(\n        'Extensions/TileMap/pixi-tilemap-helper.js'\n      );\n\n    object\n      .addCondition(\n        'TiledFile',\n        _('Tiled file'),\n        _('Compare the value of the tiled file.'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .getCodeExtraInformation()\n      .setFunctionName('getTiledFile');\n\n    object\n      .addAction(\n        'SetTiledFile',\n        _('Tiled file'),\n        _('Set Tiled file'),\n        _('Set the tiled file of _PARAM0_ to _PARAM1_'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .addParameter('jsonResource', _('Tiled file'), '', false)\n      .getCodeExtraInformation()\n      .setFunctionName('setTiledFile')\n      .setGetter('getTiledFile');\n\n    object\n      .addCondition(\n        'TilemapAtlasImage',\n        _('Tilemap atlas image'),\n        _('Compare the value of the tilemap atlas image.'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .getCodeExtraInformation()\n      .setFunctionName('getTilemapAtlasImage');\n\n    object\n      .addAction(\n        'SetTilemapAtlasImage',\n        _('Tilemap atlas image'),\n        _('Set Tilemap atlas image'),\n        _('Set the tilemap atlas image of _PARAM0_ to _PARAM1_'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .addParameter('image', _('Tilemap atlas image'), '', false)\n      .getCodeExtraInformation()\n      .setFunctionName('setTilemapAtlasImage')\n      .setGetter('getTilemapAtlasImage');\n\n    object\n      .addCondition(\n        'DisplayMode',\n        _('Display mode'),\n        _('Compare the value of the display mode.'),\n        _('The display mode of _PARAM0_ is _PARAM1_'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .addParameter(\n        'stringWithSelector',\n        _('Display mode'),\n        '[\"visible\", \"all\", \"index\"]',\n        false\n      )\n      .getCodeExtraInformation()\n      .setFunctionName('getDisplayMode');\n\n    object\n      .addAction(\n        'SetDisplayMode',\n        _('Display mode'),\n        _('Set Display mode'),\n        _('Set display mode of _PARAM0_ to _PARAM1_'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .addParameter(\n        'stringWithSelector',\n        _('Display mode'),\n        '[\"visible\", \"all\", \"index\"]',\n        false\n      )\n      .getCodeExtraInformation()\n      .setFunctionName('setDisplayMode')\n      .setGetter('getDisplayMode');\n\n    object\n      .addCondition(\n        'LayerIndex',\n        _('Layer index'),\n        _('Compare the value of the layer index.'),\n        _('The layer index'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .useStandardRelationalOperatorParameters('number')\n      .getCodeExtraInformation()\n      .setFunctionName('getLayerIndex');\n\n    object\n      .addAction(\n        'SetLayerIndex',\n        _('Layer index'),\n        _('Set Layer index'),\n        _('Set the layer index of the tilemap.'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .useStandardOperatorParameters('expression')\n      .getCodeExtraInformation()\n      .setFunctionName('setLayerIndex')\n      .setGetter('getLayerIndex');\n\n    object\n      .addExpression(\n        'LayerIndex',\n        _('Get the Layer index'),\n        _('Get the Layer index'),\n        '',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .getCodeExtraInformation()\n      .setFunctionName('getLayerIndex');\n\n    object\n      .addCondition(\n        'AnimationSpeed',\n        _('Animation speed'),\n        _('Compare the value of the animation speed.'),\n        _('The animation speed'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .useStandardRelationalOperatorParameters('number')\n      .getCodeExtraInformation()\n      .setFunctionName('getAnimationSpeed');\n\n    object\n      .addAction(\n        'SetAnimationSpeed',\n        _('Animation speed'),\n        _('Set Animation speed'),\n        _('Set the animation speed scale of the tilemap (1 by default).'),\n        '',\n        'JsPlatform/Extensions/tile_map24.png',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .useStandardOperatorParameters('expression')\n      .getCodeExtraInformation()\n      .setFunctionName('setAnimationSpeed')\n      .setGetter('getAnimationSpeed');\n\n    object\n      .addExpression(\n        'AnimationSpeed',\n        _('Get the Animation speed'),\n        _('Get the Animation speed'),\n        '',\n        'JsPlatform/Extensions/tile_map32.png'\n      )\n      .addParameter('object', 'TileMap', 'TileMap', false)\n      .getCodeExtraInformation()\n      .setFunctionName('getAnimationSpeed');\n\n    return extension;\n  },\n\n  /**\n   * You can optionally add sanity tests that will check the basic working\n   * of your extension behaviors/objects by instanciating behaviors/objects\n   * and setting the property to a given value.\n   *\n   * If you don't have any tests, you can simply return an empty array like this:\n   * `runExtensionSanityTests: function(gd, extension) { return []; }`\n   *\n   * But it is recommended to create tests for the behaviors/objects properties you created\n   * to avoid mistakes.\n   */\n  runExtensionSanityTests: function(gd, extension) {\n    return [];\n  },\n  /**\n   * Register editors for objects.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerEditorConfigurations: function(objectsEditorService) {\n    objectsEditorService.registerEditorConfiguration(\n      'TileMap::TileMap',\n      objectsEditorService.getDefaultObjectJsImplementationPropertiesEditor({\n        helpPagePath: '/objects/tile_map_object',\n      })\n    );\n  },\n  /**\n   * Register renderers for instance of objects on the scene editor.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerInstanceRenderers: function(objectsRenderingService) {\n    const RenderedInstance = objectsRenderingService.RenderedInstance;\n    const PIXI = objectsRenderingService.PIXI;\n\n    const Tilemap = objectsRenderingService.requireModule(\n      __dirname,\n      'pixi-tilemap/dist/pixi-tilemap.umd'\n    );\n    const PixiTilemapHelper = objectsRenderingService.requireModule(\n      __dirname,\n      'pixi-tilemap-helper'\n    );\n\n    /**\n     * Renderer for instances of TileMap inside the IDE.\n     *\n     * @extends RenderedTileMapInstance\n     * @class RenderedTileMapInstance\n     * @constructor\n     */\n    function RenderedTileMapInstance(\n      project,\n      layout,\n      instance,\n      associatedObject,\n      pixiContainer,\n      pixiResourcesLoader\n    ) {\n      RenderedInstance.call(\n        this,\n        project,\n        layout,\n        instance,\n        associatedObject,\n        pixiContainer,\n        pixiResourcesLoader\n      );\n\n      console.log(PIXI.tilemap, \"PixiTilemapHelper::\",PixiTilemapHelper);\n      this._pixiObject = new Tilemap.CompositeRectTileLayer(0);\n      this._tileSet = null;\n      console.log(this._pixiObject);\n      this._pixiContainer.addChild(this._pixiObject);\n      this.update();\n      this.updateTileMap();\n    }\n    RenderedTileMapInstance.prototype = Object.create(\n      RenderedInstance.prototype\n    );\n\n    /**\n     * Return the path to the thumbnail of the specified object.\n     */\n    RenderedTileMapInstance.getThumbnail = function(\n      project,\n      resourcesLoader,\n      object\n    ) {\n      return 'JsPlatform/Extensions/tile_map32.png';\n    };\n    /**\n     * This is called to update the TileMap\n     */\n    RenderedTileMapInstance.prototype.updateTileMap = function() {\n      // Get the tileset resource to use\n      console.log(\"UPDATE--\", PixiTilemapHelper, this.project, this._project)\n      const tilemapAtlasImage = this._associatedObject\n        .getProperties(this.project)\n        .get('tilemapAtlasImage')\n        .getValue();\n      const tiledFile = this._associatedObject\n        .getProperties(this.project)\n        .get('tiledFile')\n        .getValue();\n      const layerIndex = parseInt(\n        this._associatedObject\n          .getProperties(this.project)\n          .get('layerIndex')\n          .getValue(),\n        0\n      );\n      const displayMode = this._associatedObject\n        .getProperties(this.project)\n        .get('displayMode')\n        .getValue();\n\n      const texture = this._pixiResourcesLoader.getPIXITexture(this._project, tilemapAtlasImage);\n      this._pixiResourcesLoader.ResourcesLoader.getResourceJsonData(this._project, tiledFile).then(\n        tiledData => {\n          console.log(tiledData,texture);\n          PixiTilemapHelper.getPIXITileSet(\n            texture,\n            tiledData,\n            tilemapAtlasImage,\n            tiledFile,\n            (tileset) => {\n              console.log('LOADED', tileset);\n              if (tileset && this._pixiObject) {\n                PixiTilemapHelper.updatePIXITileMap(\n                  this._pixiObject,\n                  tileset,\n                  displayMode,\n                  layerIndex\n                );\n              }\n            }\n          )\n        }\n      );\n    };\n    /**\n     * This is called to update the PIXI object on the scene editor\n     */\n    RenderedTileMapInstance.prototype.update = function() {\n      const tiledFile = this._associatedObject\n        .getProperties(this.project)\n        .get('tiledFile')\n        .getValue();\n      if (this._pixiObject.tiledFile !== tiledFile)\n        this._pixiObject.tiledFile = tiledFile;\n\n      const tilemapAtlasImage = this._associatedObject\n        .getProperties(this.project)\n        .get('tilemapAtlasImage')\n        .getValue();\n      if (this._pixiObject.tilemapAtlasImage !== tilemapAtlasImage)\n        this._pixiObject.tilemapAtlasImage = tilemapAtlasImage;\n\n      const displayMode = this._associatedObject\n        .getProperties(this.project)\n        .get('displayMode')\n        .getValue();\n      if (this._pixiObject.displayMode !== displayMode)\n        this._pixiObject.displayMode = displayMode;\n\n      const layerIndex = this._associatedObject\n        .getProperties(this.project)\n        .get('layerIndex')\n        .getValue();\n      if (this._pixiObject.layerIndex !== layerIndex)\n        this._pixiObject.layerIndex = layerIndex;\n\n      const animationSpeed = this._associatedObject\n        .getProperties(this.project)\n        .get('animationSpeed')\n        .getValue();\n      if (this._pixiObject.animationSpeed !== animationSpeed)\n        this._pixiObject.animationSpeed = animationSpeed;\n\n      if (this._instance.hasCustomSize()) {\n        this._pixiObject.width = this._instance.getCustomWidth();\n        this._pixiObject.height = this._instance.getCustomHeight();\n      } else {\n        this._pixiObject.scale.x = 1;\n        this._pixiObject.scale.y = 1;\n      }\n\n      // Place the center of rotation in the center of the object. Because pivot position in Pixi\n      // is in the **local coordinates of the object**, we need to find back the original width\n      // and height of the object before scaling (then divide by 2 to find the center)\n      const originalWidth = this._pixiObject.width / this._pixiObject.scale.x;\n      const originalHeight = this._pixiObject.height / this._pixiObject.scale.y;\n      this._pixiObject.pivot.x = originalWidth / 2;\n      this._pixiObject.pivot.y = originalHeight / 2;\n\n      // Modifying the pivot position also has an impact on the transform. The instance (X,Y) position\n      // of this object refers to the top-left point, but now in Pixi, as we changed the pivot, the Pixi\n      // object (X,Y) position refers to the center. So we add an offset to convert from top-left to center.\n      this._pixiObject.x = this._instance.getX() + this._pixiObject.width / 2;\n      this._pixiObject.y = this._instance.getY() + this._pixiObject.height / 2;\n\n      // Rotation works as intended because we put the pivot in the center\n      this._pixiObject.rotation = RenderedInstance.toRad(\n        this._instance.getAngle()\n      );\n    };\n\n    /**\n     * Return the width of the instance, when it's not resized.\n     */\n    RenderedTileMapInstance.prototype.getDefaultWidth = function() {\n      return this._pixiObject.width / this._pixiObject.scale.x;\n    };\n\n    /**\n     * Return the height of the instance, when it's not resized.\n     */\n    RenderedTileMapInstance.prototype.getDefaultHeight = function() {\n      return this._pixiObject.height / this._pixiObject.scale.y;\n    };\n\n    objectsRenderingService.registerInstanceRenderer(\n      'TileMap::TileMap',\n      RenderedTileMapInstance\n    );\n  },\n};\n","enabled":true,"generatedPath":"D:\\DEV\\GD\\GDevelop\\Extensions\\TileMap/JsExtension.js"},{"jsonIndex":0,"boilerIndex":2,"filePath":"/","name":"{{0.extensionName}}runtimeobject.js","data":"/**\n * Displays a tiled file tilemap.\n * @memberof gdjs\n * @class TileMapRuntimeObject\n * @extends RuntimeObject\n */\ngdjs.TileMapRuntimeObject = function(runtimeScene, objectData) {\n  gdjs.RuntimeObject.call(this, runtimeScene, objectData);\n  this._frameElapsedTime = 0;\n\n  /** @type {number} */\n  this._opacity = objectData.content.opacity;\n  /** @type {string} */\n  this._tiledFile = objectData.content.tiledFile;\n  /** @type {string} */\n  this._tilemapAtlasImage = objectData.content.tilemapAtlasImage;\n  /** @type {string} */\n  this._displayMode = objectData.content.displayMode;\n  /** @type {number} */\n  this._layerIndex = objectData.content.layerIndex;\n  //TODO expose to event sheet\n  /** @type {number} */\n  this._animationSpeed = objectData.content.animationSpeed;\n\n  if (this._renderer)\n    gdjs.TileMapRuntimeObjectRenderer.call(this._renderer, this, runtimeScene);\n  else\n    this._renderer = new gdjs.TileMapRuntimeObjectRenderer(this, runtimeScene);\n\n  // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n  this.onCreated();\n};\n\ngdjs.TileMapRuntimeObject.prototype = Object.create(\n  gdjs.RuntimeObject.prototype\n);\ngdjs.registerObject('TileMap::TileMap', gdjs.TileMapRuntimeObject);\n\ngdjs.TileMapRuntimeObject.prototype.getRendererObject = function() {\n  return this._renderer.getRendererObject();\n};\n\ngdjs.TileMapRuntimeObject.prototype.update = function(runtimeScene) {\n  var elapsedTime = this.getElapsedTime(runtimeScene) / 1000; \n  \n  this._frameElapsedTime += this._animationPaused ? 0 : elapsedTime * this._animationSpeedScale; \n  console.log(this._frameElapsedTime);\n  // 0.25 = 4 fps - todo expose fps - calculate fps like in IDE?\n  if ( this._frameElapsedTime > 0.25 ) {\n    this._renderer.incrementAnimationFrameX();\n    this._frameElapsedTime -= 0.25;\n    if ( this._frameElapsedTime < 0 ) this._frameElapsedTime = 0; \n  }\n  \n};\n/**\n * @param { TileMapObjectDataType} oldObjectData\n * @param { TileMapObjectDataType} newObjectData\n */\ngdjs.TileMapRuntimeObject.prototype.updateFromObjectData = function(\n  oldObjectData,\n  newObjectData\n) {\n  if (oldObjectData.content.opacity !== newObjectData.content.opacity) {\n    this.setOpacity(newObjectData.content.opacity);\n  }\n  if (oldObjectData.content.tiledFile !== newObjectData.content.tiledFile) {\n    this.setTiledFile(newObjectData.content.tiledFile);\n  }\n  if (\n    oldObjectData.content.tilemapAtlasImage !==\n    newObjectData.content.tilemapAtlasImage\n  ) {\n    this.setTilemapAtlasImage(newObjectData.content.tilemapAtlasImage);\n  }\n  if (oldObjectData.content.displayMode !== newObjectData.content.displayMode) {\n    this.setDisplayMode(newObjectData.content.displayMode);\n  }\n  if (oldObjectData.content.layerIndex !== newObjectData.content.layerIndex) {\n    this.setLayerIndex(newObjectData.content.layerIndex);\n  }\n  if (\n    oldObjectData.content.animationSpeed !==\n    newObjectData.content.animationSpeed\n  ) {\n    this.setAnimationSpeed(newObjectData.content.animationSpeed);\n  }\n\n  return true;\n};\n\n/**\n * Initialize the extra parameters that could be set for an instance.\n * @private\n */\ngdjs.TileMapRuntimeObject.prototype.extraInitializationFromInitialInstance = function(\n  initialInstanceData\n) {\n  if (initialInstanceData.customSize) {\n  }\n};\n\ngdjs.TileMapRuntimeObject.prototype.onDestroyFromScene = function(\n  runtimeScene\n) {\n  gdjs.RuntimeObject.prototype.onDestroyFromScene.call(this, runtimeScene);\n};\n\n/**\n * Set/Get TileMap base properties\n */\n\ngdjs.RuntimeObject.prototype.setTiledFile = function(tiledFile) {\n  this._tiledFile = tiledFile;\n  this._renderer.updateTiledFile();\n};\n\ngdjs.RuntimeObject.prototype.getTiledFile = function() {\n  return this._tiledFile;\n};\ngdjs.RuntimeObject.prototype.setTilemapAtlasImage = function(\n  tilemapAtlasImage\n) {\n  this._tilemapAtlasImage = tilemapAtlasImage;\n  this._renderer.updateTilemapAtlasImage();\n};\n\ngdjs.RuntimeObject.prototype.getTilemapAtlasImage = function() {\n  return this._tilemapAtlasImage;\n};\ngdjs.RuntimeObject.prototype.setDisplayMode = function(displayMode) {\n  this._displayMode = displayMode;\n  this._renderer.updateDisplayMode();\n};\n\ngdjs.RuntimeObject.prototype.getDisplayMode = function() {\n  return this._displayMode;\n};\ngdjs.RuntimeObject.prototype.setLayerIndex = function(layerIndex) {\n  this._layerIndex = layerIndex;\n  this._renderer.updateLayerIndex();\n};\n\ngdjs.RuntimeObject.prototype.getLayerIndex = function() {\n  return this._layerIndex;\n};\ngdjs.RuntimeObject.prototype.setAnimationSpeed = function(animationSpeed) {\n  this._animationSpeed = animationSpeed;\n  this._renderer.updateAnimationSpeed();\n};\n\ngdjs.RuntimeObject.prototype.getAnimationSpeed = function() {\n  return this._animationSpeed;\n};\n\n/**\n * Set object position on X axis.\n * @param {number} x The new position X of the object.\n */\ngdjs.TileMapRuntimeObject.prototype.setX = function(x) {\n  gdjs.RuntimeObject.prototype.setX.call(this, x);\n  this._renderer.updatePosition();\n};\n\n/**\n * Set object position on Y axis.\n * @param {number} y The new position Y of the object.\n */\ngdjs.TileMapRuntimeObject.prototype.setY = function(y) {\n  gdjs.RuntimeObject.prototype.setY.call(this, y);\n  this._renderer.updatePosition();\n};\n\n/**\n * Set the angle of the object.\n * @param {number} angle The new angle of the object.\n */\ngdjs.TileMapRuntimeObject.prototype.setAngle = function(angle) {\n  gdjs.RuntimeObject.prototype.setAngle.call(this, angle);\n  this._renderer.updateAngle();\n};\n\n/**\n * Set object opacity.\n * @param {number} opacity The new opacity of the object (0-255).\n */\ngdjs.TileMapRuntimeObject.prototype.setOpacity = function(opacity) {\n  this._opacity = opacity;\n  this._renderer.updateOpacity();\n};\n\n/**\n * Get object opacity.\n */\ngdjs.TileMapRuntimeObject.prototype.getOpacity = function() {\n  return this._opacity;\n};\n\n/**\n * Get the width of the object.\n */\ngdjs.TileMapRuntimeObject.prototype.getWidth = function() {\n  return this._renderer.getWidth();\n};\n\n/**\n * Get the height of the object.\n */\ngdjs.TileMapRuntimeObject.prototype.getHeight = function() {\n  return this._renderer.getHeight();\n};\n","enabled":false,"generatedPath":"D:\\DEV\\GD\\GDevelop\\Extensions\\TileMap/tilemapruntimeobject.js"},{"jsonIndex":"0","boilerIndex":"1","filePath":"/","name":"{{0.extensionName}}runtimeobject-pixi-renderer.js","data":"/**\n * The PIXI.js renderer for the Tile map runtime object.\n *\n * @class TileMapRuntimeObjectPixiRenderer\n * @constructor\n * @param {gdjs.TileMapRuntimeObject} runtimeObject The object to render\n * @param {gdjs.RuntimeScene} runtimeScene The gdjs.RuntimeScene in which the object is\n */\ngdjs.TileMapRuntimeObjectPixiRenderer = function(runtimeObject, runtimeScene) {\n  this._object = runtimeObject;\n  this._pixiRenderer = runtimeScene.getGame().getRenderer().getPIXIRenderer();\n\n  // Load (or reset)\n  if (this._pixiObject === undefined) {\n    this._pixiObject = new PIXI.tilemap.CompositeRectTileLayer(0);\n    this._tileAnimX = this._pixiRenderer.plugins.tilemap.tileAnim[0];\n  } else {\n    // Run updates a single time once loaded here\n  }\n\n  runtimeScene\n    .getLayer('')\n    .getRenderer()\n    .addRendererObject(this._pixiObject, runtimeObject.getZOrder());\n  \n  this.updateAngle();\n  this.updateOpacity();\n  this.updateTileMap(runtimeScene);\n  this.updatePosition();\n};\n\ngdjs.TileMapRuntimeObjectRenderer = gdjs.TileMapRuntimeObjectPixiRenderer;\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.getRendererObject = function() {\n  return this._pixiObject;\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.incrementAnimationFrameX = function(runtimeScene){\n  console.log(\"update\")\n  this._pixiRenderer.plugins.tilemap.tileAnim[0] += 1;\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateTileMap = function(runtimeScene) {\n\n  var atlasTexture = runtimeScene\n    .getGame()\n    .getImageManager()\n    .getPIXITexture(this._object._tilemapAtlasImage);\n  \n  runtimeScene\n    .getGame()\n    .getJsonManager()\n    .loadJson(this._object._tiledFile, (error, content)=> {\n      if (error) {\n        console.error('An error happened while loading JSON resource:', error);\n      } else {\n        if (!content) return;\n        console.log(\"JSON\", content, atlasTexture)\n\n        console.log(\n          this._pixiObject,\n          PixiTileMapHelper,\n          this,\n          this._object._tiledFile,\n          this._object._tilemapAtlasImage,\n          this._object._displayMode\n          )\n  \n          \n        // ReloadTilemap\n        PixiTileMapHelper.getPIXITileSet(\n          atlasTexture,\n          content,\n          this._object._tilemapAtlasImage,\n          this._object._tiledFile,\n          (tileset) => {\n            \n            if (tileset && this._pixiObject) {\n              PixiTileMapHelper.updatePIXITileMap(\n                this._pixiObject,\n                tileset,\n                this._object._displayMode,\n                this._object._layerIndex\n              );\n              console.log('LOADED', tileset, this._pixiObject);\n            }\n          }\n        )\n        // runtimeScene._renderer._pixiRenderer\n        // this._runtimeScene.getTimeManager().getTimeFromStart()\n      }\n    });   \n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateAnimationFrame = function() {\n  console.log(\"UPDATING....\")\n};\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateTiledFile = function() {\n  this._pixiObject._tiledFile = this._object._tiledFile;\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateTilemapAtlasImage = function() {\n  this._pixiObject._tilemapAtlasImage = this._object._tilemapAtlasImage;\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateDisplayMode = function() {\n  this._pixiObject._displayMode = this._object._displayMode;\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateLayerIndex = function() {\n  this._pixiObject._layerIndex = this._object._layerIndex;\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateAnimationSpeed = function() {\n  this._pixiObject._animationSpeed = this._object._animationSpeed;\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updatePosition = function() {\n  const originalWidth = this._pixiObject.width / this._pixiObject.scale.x;\n  const originalHeight = this._pixiObject.height / this._pixiObject.scale.y;\n  this._pixiObject.pivot.x = originalWidth / 2;\n  this._pixiObject.pivot.y = originalHeight / 2;\n\n  this._pixiObject.position.x = this._object.x + this._pixiObject.width / 2;\n  this._pixiObject.position.y = this._object.y + this._pixiObject.height / 2;\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateAngle = function() {\n  this._pixiObject.rotation = gdjs.toRad(this._object.angle);\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.updateOpacity = function() {\n  this._pixiObject.alpha = this._object._opacity / 255;\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.getWidth = function() {\n  return this._pixiObject.width;\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.getHeight = function() {\n  return this._pixiObject.height;\n};\n","enabled":false,"generatedPath":"D:\\DEV\\GD\\GDevelop\\Extensions\\TileMap/tilemapruntimeobject-pixi-renderer.js"},{"jsonIndex":"0","boilerIndex":"3","filePath":"/","name":"template","data":"console.log('YAY')\n","enabled":false,"generatedPath":"D:\\DEV\\GD\\GDevelop\\Extensions\\TileMap/template"}],"codeData":[{"id":0,"name":"extensionBoiler","data":"/**\n * This is a declaration of an extension for GDevelop 5.\n *\n * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change\n * to this extension file or to any other *.js file that you reference inside.\n *\n * The file must be named \"JsExtension.js\", otherwise GDevelop won't load it.\n * ⚠️ If you make a change and the extension is not loaded, open the developer console\n * and search for any errors.\n *\n * More information on https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md\n */\n\nmodule.exports = {\n  createExtension: function(_, gd) {\n    const extension = new gd.PlatformExtension();\n    extension\n      .setExtensionInformation(\n        '{{pascalcase extensionName}}',\n        _('{{pascalcase extensionName}} Object'),\n        _(\n          '{{extensionDesc}}.'\n        ),\n        'Todor Imreorov',\n        'Open source (MIT License)'\n      )\n      .setExtensionHelpPath('/objects/{{snakecase extensionName}}');\n\n    var object{{pascalcase extensionName}} = new gd.ObjectJsImplementation();\n    object{{pascalcase extensionName}}.updateProperty = function(\n      objectContent,\n      propertyName,\n      newValue\n    ) {\n      if (propertyName in objectContent) {\n        if (typeof objectContent[propertyName] === 'boolean')\n          objectContent[propertyName] = newValue === '1';\n        else objectContent[propertyName] = newValue;\n        return true;\n      }\n\n      return false;\n    };\n    object{{pascalcase extensionName}}.getProperties = function(objectContent) {\n      var objectProperties = new gd.MapStringPropertyDescriptor();\n\n    {{#each ObjectProperties}}\n      {{#startsWith \"text\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('{{gdType}}')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"boolean\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}} ? 'true' : 'false')\n                .setType('boolean')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"number\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}}.toString())\n                .setType('number')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"color\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('color')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"font\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('resource')\n                .addExtraInfo('font')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"image\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('resource')\n                .addExtraInfo('image')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n       {{#startsWith \"json\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('resource')\n                .addExtraInfo('json')\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n      {{#startsWith \"stringWithSelector\" gdType}}\n       objectProperties.set(\n              '{{camelcase var}}',\n              new gd.PropertyDescriptor(objectContent.{{camelcase var}})\n                .setType('choice')\n                {{#each this.choices}}\n                .addExtraInfo('{{this}}')\n                {{/each}}\n                .setLabel(_('{{capitalize var}}'))\n            );\n      {{/startsWith}}\n    {{/each}}\n\n      return objectProperties;\n    };\n    object{{pascalcase extensionName}}.setRawJSONContent(\n      JSON.stringify({\n    {{#each ObjectProperties}}\n      {{#startsWith (typeOf this.val) \"string\"}}\n        {{camelcase var}}: \"{{val}}\",\n      {{else}}\n        {{camelcase var}}: {{val}},\n      {{/startsWith}}\n    {{/each}}\n      })\n    );\n\n    object{{pascalcase extensionName}}.updateInitialInstanceProperty = function(\n      objectContent,\n      instance,\n      propertyName,\n      newValue,\n      project,\n      layout\n    ) {\n      return false;\n    };\n    object{{pascalcase extensionName}}.getInitialInstanceProperties = function(\n      content,\n      instance,\n      project,\n      layout\n    ) {\n      var instanceProperties = new gd.MapStringPropertyDescriptor();\n      return instanceProperties;\n    };\n\n    const object = extension\n      .addObject(\n        '{{pascalcase extensionName}}',\n        _('{{pascalcase extensionName}}'),\n        _(\n          '{{extensionDesc}}'\n        ),\n        'JsPlatform/Extensions/{{objectIconPath}}',\n        object{{pascalcase extensionName}}\n      )\n      .setIncludeFile('Extensions/{{pascalcase extensionName}}/{{remove extensionName \" \"}}runtimeobject.js')\n      .addIncludeFile('Extensions/{{pascalcase extensionName}}/{{remove extensionName \" \"}}runtimeobject-pixi-renderer.js')\n      {{#each includeFiles}}\n       .addIncludeFile(\n        'Extensions/{{pascalcase extensionName}}{{pascalcase ../extensionName}}/{{this}}'\n      )\n      {{/each}}\n    {{#each ObjectProperties}}\n    \n    object\n      .addCondition(\n        '{{#startsWith \"boolean\" gdType}}Is{{/startsWith}}{{pascalcase var}}',\n        _('{{capitalize var}}'),\n        {{#startsWith \"color\" gdType}}\n        '',\n        '',\n        {{else}}\n        _('{{#if conDes}}{{capitalize conDes}}{{else}}Compare the value of the {{var}}.{{/if}}'),\n        {{/startsWith}}\n        {{#startsWith \"stringWithSelector\" gdType}}\n        _('{{#if conSen}}{{conSen}}{{else}}The {{var}} of _PARAM0_ is _PARAM1_{{/if}}'),\n        {{else}}\n        {{#startsWith \"boolean\" gdType}}\n        _('{{#if conSen}}{{conSen}}{{else}}{{capitalize var}} is enabled{{/if}}'),\n        {{else}}\n        {{#startsWith \"number\" gdType}}\n        _('{{#if conSen}}{{conSen}}{{else}}The {{var}}{{/if}}'),\n        {{/startsWith}}\n        {{/startsWith}}\n        {{/startsWith}}\n        \"\",\n        '{{#if icon}}{{icon}}{{else}}JsPlatform/Extensions/{{../objectIconPath24}}{{/if}}',\n        '{{#if icon}}{{icon}}{{else}}JsPlatform/Extensions/{{../objectIconPath32}}{{/if}}'\n      )\n      .addParameter('object', '{{pascalcase ../extensionName}}', '{{pascalcase ../extensionName}}', false)\n              {{#if choices}}\n        .addParameter(\n          'stringWithSelector',\n          _('{{capitalize var}}'),\n          '[\"{{{join choices \"\\\", \\\"\"}}}\"]',\n          false\n        )\n      {{else}}\n      {{#startsWith \"string\" gdType}}\n      .useStandardRelationalOperatorParameters('{{gdType}}')\n      {{/startsWith}}\n      {{#startsWith \"number\" gdType}}\n      .useStandardRelationalOperatorParameters('{{gdType}}')\n      {{/startsWith}}\n      {{/if}}\n      .getCodeExtraInformation()\n      .setFunctionName('get{{pascalcase var}}');\n            \n     object\n        .addAction(\n          'Set{{pascalcase var}}',\n          _('{{capitalize var}}'),\n          _('{{#if actDes}}{{capitalize actDes}}{{else}}Set {{capitalize var}}{{/if}}'),\n          {{#startsWith \"boolean\" gdType}}\n           _('{{#if actSen}}{{actSen}}{{else}}Activate {{var}} for _PARAM0_: _PARAM1_{{/if}}'),\n          {{else}}\n          {{#startsWith \"string\" gdType}}\n           _('{{#if actSen}}{{actSen}}{{else}}Set {{var}} of _PARAM0_ to _PARAM1_{{/if}}'),\n          {{else}}\n          {{#startsWith \"number\" gdType}}\n          _('{{#if actSen}}{{actSen}}{{else}}Set the {{var}}{{/if}}'),\n          {{else}}\n          _('{{#if actSen}}{{actSen}}{{else}}Set the {{var}} of _PARAM0_ to _PARAM1_{{/if}}'),\n          {{/startsWith}}\n          {{/startsWith}}\n          {{/startsWith}}\n          '',\n          '{{#if icon}}{{icon}}{{else}}JsPlatform/Extensions/{{../objectIconPath24}}{{/if}}',\n          '{{#if icon}}{{icon}}{{else}}JsPlatform/Extensions/{{../objectIconPath32}}{{/if}}'\n        )\n        .addParameter('object', '{{pascalcase ../extensionName}}', '{{pascalcase ../extensionName}}', false)\n        {{#if choices}}\n        .addParameter(\n          'stringWithSelector',\n          _('{{capitalize var}}'),\n          '[\"{{{join choices \"\\\", \\\"\"}}}\"]',\n          false\n        )\n        {{else}}\n        {{#startsWith \"number\" gdType}}\n        .useStandardOperatorParameters('expression')\n        {{else}}\n        {{#startsWith \"string\" gdType}}\n        .useStandardOperatorParameters('string')\n        {{else}}\n        .addParameter(\n          '{{gdType}}',\n          _('{{capitalize var}}'),\n          '',\n          false\n        )\n        {{/startsWith}}\n        {{/startsWith}}\n        {{/if}}\n        .getCodeExtraInformation()\n        .setFunctionName('set{{pascalcase var}}')\n        .setGetter('get{{pascalcase var}}');\n\n      {{#startsWith \"number\" gdType}}\n      object\n        .addExpression(\n          '{{pascalcase var}}',\n          _('{{#if expLabel}}{{capitalize expLabel}}{{else}}Get the {{capitalize var}}{{/if}}'),\n          _('{{#if expDes}}{{capitalize expDes}}{{else}}Get the {{capitalize var}}{{/if}}'),\n          '',\n          '{{#if icon}}{{icon}}{{else}}JsPlatform/Extensions/{{../objectIconPath}}{{/if}}'\n        )\n        .addParameter('object', '{{pascalcase ../extensionName}}', '{{pascalcase ../extensionName}}', false)\n        .getCodeExtraInformation()\n        .setFunctionName('get{{pascalcase var}}');\n      {{/startsWith}}\n      {{else}}\n      {{#startsWith \"string\" gdType}}\n      \n      object\n        .addStrExpression(\n          'Get{{pascalcase var}}',\n          _('{{#if expLabel}}{{capitalize expLabel}}{{else}}Get the {{capitalize var}}{{/if}}'),\n          _('{{#if expDes}}{{capitalize expDes}}{{else}}Get the {{capitalize var}}{{/if}}'),\n          '',\n          '{{#if icon}}{{icon}}{{else}}JsPlatform/Extensions/{{../objectIconPath}}{{/if}}'\n        )\n        .addParameter('object', '{{pascalcase ../extensionName}}', '{{pascalcase ../extensionName}}', false)\n        .getCodeExtraInformation()\n        .setFunctionName('get{{pascalcase var}}');\n      {{/startsWith}}\n    {{/each}}\n      \n    return extension;\n  },\n\n  /**\n   * You can optionally add sanity tests that will check the basic working\n   * of your extension behaviors/objects by instanciating behaviors/objects\n   * and setting the property to a given value.\n   *\n   * If you don't have any tests, you can simply return an empty array like this:\n   * `runExtensionSanityTests: function(gd, extension) { return []; }`\n   *\n   * But it is recommended to create tests for the behaviors/objects properties you created\n   * to avoid mistakes.\n   */\n  runExtensionSanityTests: function(gd, extension) {\n    return [];\n  },\n  /**\n   * Register editors for objects.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerEditorConfigurations: function(objectsEditorService) {\n    objectsEditorService.registerEditorConfiguration(\n      '{{pascalcase extensionName}}::{{pascalcase extensionName}}',\n      objectsEditorService.getDefaultObjectJsImplementationPropertiesEditor({\n        helpPagePath: '/objects/{{snakecase extensionName}}_object',\n      })\n    );\n  },\n  /**\n   * Register renderers for instance of objects on the scene editor.\n   *\n   * ℹ️ Run `node import-GDJS-Runtime.js` (in newIDE/app/scripts) if you make any change.\n   */\n  registerInstanceRenderers: function(objectsRenderingService) {\n    const RenderedInstance = objectsRenderingService.RenderedInstance;\n    const PIXI = objectsRenderingService.PIXI;\n    \n    {{#each includeFiles}}\n      const changeME = objectsRenderingService.requireModule(\n      __dirname,\n      '{{remove this \".js\"}}'\n    );\n    {{/each}}\n\n    /**\n     * Renderer for instances of {{pascalcase extensionName}} inside the IDE.\n     *\n     * @extends Rendered{{pascalcase extensionName}}Instance\n     * @class Rendered{{pascalcase extensionName}}Instance\n     * @constructor\n     */\n    function Rendered{{pascalcase extensionName}}Instance(\n      project,\n      layout,\n      instance,\n      associatedObject,\n      pixiContainer,\n      pixiResourcesLoader\n    ) {\n      RenderedInstance.call(\n        this,\n        project,\n        layout,\n        instance,\n        associatedObject,\n        pixiContainer,\n        pixiResourcesLoader\n      );\n\n      this._pixiObject = new {{externalLibName}};\n\n      this._pixiContainer.addChild(this._pixiObject);\n      this.update();\n      this.update{{pascalcase extensionName}}();\n    }\n    Rendered{{pascalcase extensionName}}Instance.prototype = Object.create(\n      RenderedInstance.prototype\n    );\n\n    /**\n     * Return the path to the thumbnail of the specified object.\n     */\n    Rendered{{pascalcase extensionName}}Instance.getThumbnail = function(\n      project,\n      resourcesLoader,\n      object\n    ) {\n      return 'JsPlatform/Extensions/{{objectIconPath}}';\n    };\n\n    /**\n     * This is called to update the {{pascalcase extensionName}}\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.update{{pascalcase extensionName}} = function () {\n      // Custom rendering logic\n    };\n    /**\n     * This is called to update the PIXI object on the scene editor\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.update = function() {\n    \n    {{#each ObjectProperties}}\n       const {{camelcase var}} = this._associatedObject\n        .getProperties(this.project)\n        .get('{{camelcase var}}')\n        .getValue();\n        {{#startsWith \"boolean\" gdType}}\n        if ({{camelcase var}} !== this._pixiObject._{{camelcase var}}) {\n          this._pixiObject._{{camelcase var}} = {{camelcase var}} === 'true';\n          this._pixiObject.dirty = true;\n        }\n        {{else}}\n        if(this._pixiObject.{{camelcase var}} !== {{camelcase var}}) this._pixiObject.{{camelcase var}} = {{camelcase var}};\n        \n        {{/startsWith}}\n    {{/each}}\n\n      if (this._instance.hasCustomSize()) {\n        this._pixiObject.width = this._instance.getCustomWidth();\n        this._pixiObject.height = this._instance.getCustomHeight();\n      } else {\n        this._pixiObject.scale.x = 1;\n        this._pixiObject.scale.y = 1;\n      }\n      \n      // Place the center of rotation in the center of the object. Because pivot position in Pixi\n      // is in the **local coordinates of the object**, we need to find back the original width\n      // and height of the object before scaling (then divide by 2 to find the center)\n      const originalWidth = this._pixiObject.width / this._pixiObject.scale.x;\n      const originalHeight = this._pixiObject.height / this._pixiObject.scale.y;\n      this._pixiObject.pivot.x = originalWidth / 2;\n      this._pixiObject.pivot.y = originalHeight / 2;\n\n      // Modifying the pivot position also has an impact on the transform. The instance (X,Y) position\n      // of this object refers to the top-left point, but now in Pixi, as we changed the pivot, the Pixi\n      // object (X,Y) position refers to the center. So we add an offset to convert from top-left to center.\n      this._pixiObject.x = this._instance.getX() + this._pixiObject.width / 2;\n      this._pixiObject.y = this._instance.getY() + this._pixiObject.height / 2;\n\n      // Rotation works as intended because we put the pivot in the center\n      this._pixiObject.rotation = RenderedInstance.toRad(\n        this._instance.getAngle()\n      );\n  \n    };\n\n    /**\n     * Return the width of the instance, when it's not resized.\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.getDefaultWidth = function() {\n      return this._pixiObject.width / this._pixiObject.scale.x;\n    };\n\n    /**\n     * Return the height of the instance, when it's not resized.\n     */\n    Rendered{{pascalcase extensionName}}Instance.prototype.getDefaultHeight = function() {\n      return this._pixiObject.height / this._pixiObject.scale.y;\n    };\n\n    objectsRenderingService.registerInstanceRenderer(\n      '{{pascalcase extensionName}}::{{pascalcase extensionName}}',\n      Rendered{{pascalcase extensionName}}Instance\n    );\n  },\n};\n"},{"id":1,"name":"pixi-render-Boiler","data":"/**\n * The PIXI.js renderer for the {{capitalize extensionName}} runtime object.\n *\n * @class {{pascalcase extensionName}}RuntimeObjectPixiRenderer\n * @constructor\n * @param {gdjs.{{pascalcase extensionName}}RuntimeObject} runtimeObject The object to render\n * @param {gdjs.RuntimeScene} runtimeScene The gdjs.RuntimeScene in which the object is\n */\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer = function(runtimeObject, runtimeScene) {\n  this._object = runtimeObject;\n\n  // Load (or reset)\n  if (this._pixiObject === undefined) {\n    this._pixiObject = new {{externalLibName}}(0, runtimeObject._tilemapAtlasImage.texture);\n\n    this._object.hidden = !runtimeObject._visible;\n  } else {\n    // Run updates a single time once loaded here\n  }\n\n  runtimeScene\n    .getLayer('')\n    .getRenderer()\n    .addRendererObject(this._pixiObject, runtimeObject.getZOrder());\n\n  // Set the anchor in the center, so that the object rotates around\n  // its center\n  this._pixiObject.anchor.x = 0.5;\n  this._pixiObject.anchor.y = 0.5;\n\n  this.updatePosition();\n  this.updateAngle();\n  this.updateOpacity();\n  this.update{{pascalcase extensionName}}();\n  this.updateVisible();\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectRenderer = gdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer;\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.getRendererObject = function() {\n  return this._pixiObject;\n};\n\ngdjs.TileMapRuntimeObjectPixiRenderer.prototype.update{{pascalcase extensionName}} = function() {\n  //update the external object here\n};\n\n{{#each ObjectProperties}}\n gdjs.{{pascalcase ../extensionName}}RuntimeObjectPixiRenderer.prototype.update{{pascalcase var}} = function() {\n  this._pixiObject._{{camelcase var}} = this._object._{{camelcase var}};\n  //this._pixiObject.dirty = true;\n  this.updatePosition();\n};\n{{/each}}\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updatePosition = function() {\n  const originalWidth = this._pixiObject.width / this._pixiObject.scale.x;\n  const originalHeight = this._pixiObject.height / this._pixiObject.scale.y;\n  this._pixiObject.pivot.x = originalWidth / 2;\n  this._pixiObject.pivot.y = originalHeight / 2;\n  \n  this._pixiObject.position.x = this._object.x + this._pixiObject.width / 2;\n  this._pixiObject.position.y = this._object.y + this._pixiObject.height / 2;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updateAngle = function() {\n  this._pixiObject.rotation = gdjs.toRad(this._object.angle);\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.updateOpacity = function() {\n  this._pixiObject.alpha = this._object._opacity / 255;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.getWidth = function() {\n  return this._pixiObject.width;\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObjectPixiRenderer.prototype.getHeight = function() {\n  return this._pixiObject.height;\n};"},{"id":2,"name":"runtime-boiler","data":"/**\n * {{capitalize extensionDesc}}.\n * @memberof gdjs\n * @class {{pascalcase extensionName}}RuntimeObject\n * @extends RuntimeObject\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject = function(runtimeScene, objectData) {\n  gdjs.RuntimeObject.call(this, runtimeScene, objectData);\n\n  /** @type {number} */\n  this._opacity = objectData.content.opacity;\n{{#each ObjectProperties}}\n   /** @type {{#if (isString val)}}{string}{{else}}{{#startsWith \"bool\" gdType}}{boolean}{{else}}{number}{{/startsWith}}{{/if}} */\n  this._{{camelcase var}} = objectData.content.{{camelcase var}};\n{{/each}}\n  \n  if (this._renderer)\n    gdjs.{{pascalcase extensionName}}RuntimeObjectRenderer.call(this._renderer, this, runtimeScene);\n  else\n    this._renderer = new gdjs.{{pascalcase extensionName}}RuntimeObjectRenderer(this, runtimeScene);\n\n  // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n  this.onCreated();\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype = Object.create(\n  gdjs.RuntimeObject.prototype\n);\ngdjs.registerObject('{{pascalcase extensionName}}::{{pascalcase extensionName}}', gdjs.{{pascalcase extensionName}}RuntimeObject);\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getRendererObject = function() {\n  return this._renderer.getRendererObject();\n};\n\ngdjs.TileMapRuntimeObject.prototype.update = function(runtimeScene) {\n// updates every frame\n};\n\n/**\n * @param { {{pascalcase extensionName}}ObjectDataType} oldObjectData\n * @param { {{pascalcase extensionName}}ObjectDataType} newObjectData\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.updateFromObjectData = function(oldObjectData, newObjectData) {\n  if (oldObjectData.content.opacity !== newObjectData.content.opacity) {\n    this.setOpacity(newObjectData.content.opacity);\n  }\n  {{#each ObjectProperties}}\n  if (oldObjectData.content.{{camelcase var}} !== newObjectData.content.{{camelcase var}}) {\n    this.set{{pascalcase var}}(newObjectData.content.{{camelcase var}});\n  }\n  {{/each}}\n\n  return true;\n};\n\n/**\n * Initialize the extra parameters that could be set for an instance.\n * @private\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.extraInitializationFromInitialInstance = function(\n  initialInstanceData\n) {\n  if (initialInstanceData.customSize) {\n  }\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.onDestroyFromScene = function(runtimeScene) {\n  gdjs.RuntimeObject.prototype.onDestroyFromScene.call(this, runtimeScene);\n};\n\n/**\n * Set/Get {{pascalcase extensionName}} base properties\n */\n\n{{#each ObjectProperties}}\n gdjs.{{pascalcase extensionName}}RuntimeObject.prototype.set{{pascalcase var}} = function({{camelcase var}}) {\n  this._{{camelcase var}} = {{camelcase var}};\n  this._renderer.update{{pascalcase var}}();\n};\n\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.get{{pascalcase var}} = function() {\n  return this._{{camelcase var}};\n};\n{{/each}}\n\n/**\n * Set object position on X axis.\n * @param {number} x The new position X of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setX = function(x) {\n  gdjs.RuntimeObject.prototype.setX.call(this, x);\n  this._renderer.updatePosition();\n};\n\n/**\n * Set object position on Y axis.\n * @param {number} y The new position Y of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setY = function(y) {\n  gdjs.RuntimeObject.prototype.setY.call(this, y);\n  this._renderer.updatePosition();\n};\n\n/**\n * Set the angle of the object.\n * @param {number} angle The new angle of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setAngle = function(angle) {\n  gdjs.RuntimeObject.prototype.setAngle.call(this, angle);\n  this._renderer.updateAngle();\n};\n\n/**\n * Set object opacity.\n * @param {number} opacity The new opacity of the object (0-255).\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.setOpacity = function(opacity) {\n  this._opacity = opacity;\n  this._renderer.updateOpacity();\n};\n\n/**\n * Get object opacity.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getOpacity = function() {\n  return this._opacity;\n};\n\n/**\n * Get the width of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getWidth = function() {\n  return this._renderer.getWidth();\n};\n\n/**\n * Get the height of the object.\n */\ngdjs.{{pascalcase extensionName}}RuntimeObject.prototype.getHeight = function() {\n  return this._renderer.getHeight();\n};"},{"id":3,"name":"test","data":"console.log(\"YAY\")"}],"jsonData":[{"id":0,"name":"extensionData","data":{"extensionName":"tile map","externalLibName":"PIXI.tilemap.CompositeRectTileLayer","objectIconPath32":"tile_map32.png","objectIconPath24":"tile_map24.png","objectIconPath":"tile_map32.png","extensionDesc":"Displays a tiled file tilemap","includeFiles":["pixi-tilemap/dist/pixi-tilemap.umd.js","pixi-tilemap/dist/pixi-tilemap-helper.js"],"ObjectProperties":[{"val":"","var":"tiled file","gdType":"jsonResource"},{"val":"","var":"tilemap atlas image","gdType":"image"},{"var":"display mode","val":"visible","gdType":"stringWithSelector","choices":["visible","all","index"]},{"actSen":"Set the layer index of the tilemap.","var":"layer index","val":0,"gdType":"number"},{"actSen":"Set the animation speed scale of the tilemap (1 by default).","var":"animation speed","val":1,"gdType":"number"}]}},{"id":1,"name":"list2","data":{"file":"yahoo","items":[{"jimbo":"ddf","rats":false}]}}],"outputs":[{"id":0,"name":"jsextension.js","data":"out"}]}