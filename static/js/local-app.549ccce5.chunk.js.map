{"version":3,"sources":["Export/LocalExporters/LocalFileSystem.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","ProjectCreation/LocalStarters.js","ProjectCreation/LocalPathFinder.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalCocos2dExport.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","../node_modules/@supercharge/promise-pool/dist/index.js","../node_modules/@supercharge/promise-pool/dist/promise-pool.js","../node_modules/@supercharge/goodies/dist/index.js","../node_modules/@supercharge/goodies/dist/goodies.js","../node_modules/@supercharge/promise-pool/dist/promise-pool-executor.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@supercharge/promise-pool/dist/promise-pool-error.js","UI/LocalFolderPicker/index.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/index.js","LocalApp.js","ProjectCreation/LocalExamples.js","ProjectCreation/LocalExamplesFinder.js","Utils/ObjectSplitter.js","../node_modules/@supercharge/goodies/index.js"],"names":["fs","optionalRequire","path","os","gd","global","mkDir","mkdirsSync","e","console","error","dirExists","existsSync","clearDir","emptyDirSync","getTempDir","tmpdir","fileNameFrom","fullPath","this","_isExternalUrl","_translateUrl","basename","dirNameFrom","dirname","replace","makeAbsolute","filename","baseDirectory","isAbsolute","resolve","normalize","makeRelative","relative","length","charAt","copyFile","source","dest","copySync","writeToFile","file","contents","outputFileSync","readFile","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","readdirSync","forEach","indexOf","push_back","fileExists","statSync","isFile","startsWith","substr","electron","dialog","remote","checkFileContent","filePath","expectedContent","time","performance","now","Promise","reject","encoding","err","content","Error","verificationTime","info","toFixed","writeAndCheckFile","a","ensureDir","writeFile","writeAndCheckFormattedJSONFile","object","JSON","stringify","writeProjectFiles","project","projectPath","serializedProjectObject","serializeToJSObject","isFolderProject","partialObjects","split","pathSeparator","getArrayItemReferenceName","getSlugifiedUniqueNameFromProperty","shouldSplit","splitPaths","Set","isReferenceMagicPropertyName","all","map","partialObject","join","reference","catch","then","onSaveProject","fileMetadata","fileIdentifier","wasSaved","onSaveProjectAs","defaultPath","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","browserWindow","getCurrentWindow","options","filters","name","extensions","showSaveDialogSync","ProjectResourcesCopier","copyAllResourcesTo","setProjectFile","onAutoSaveProject","autoSavePath","serializeToJSON","app","LocalStarters","Component","createFromExample","i18n","exampleName","outputPath","props","findExamples","examplesPath","showGameFileCreationError","onOpen","LocalFileStorageProvider","sendNewGameCreated","createEmptyGame","ProjectHelper","createNewGDJSProject","onCreate","componentDidMount","onChangeOutputPath","findEmptyPath","getPath","render","noMargin","expand","fullWidth","value","onChange","type","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","alignItems","justifyContent","label","onShowExamples","basePath","folderName","generateName","accessSync","ex","displayName","kind","component","chooseResources","multiSelections","getLastUsedPath","setLastUsedPath","title","_","selectLocalResourcePath","resources","resourcePath","audioResource","AudioResource","getProjectFile","setFile","setName","imageResource","ImageResource","fontResource","FontResource","videoResource","VideoResource","jsonResource","JsonResource","properties","push","latestPath","showOpenDialog","filePaths","lastUsedPath","parse","dir","filter","isPathInProjectFolder","Window","showConfirmDialog","copyAllToProjectFolder","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","ipcRenderer","resourcesLoader","resourceNames","singleFrame","onChangesSaved","extraOptions","resourceName","originalIndex","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","resourcesManager","getResourcesManager","resource","createOrUpdateResource","getResource","setMetadata","send","newFilePath","jfxr","BrowserWindow","LocalPreviewLauncher","React","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","devToolsOpen","previewBrowserWindowConfig","hotReloadsCount","hideMenuBar","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","win","loadURL","setMenuBarVisibility","webContents","setState","openDevTools","_openPreviewWindow","gamePath","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","nodeIntegration","getIsMenuBarHiddenInPreview","networkPreview","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","gdjsRoot","outputDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","timeFunction","previewExportOptions","PreviewExportOptions","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getServerAddress","setDebuggerServerAddress","address","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","LocalPreviewDebuggerServer","ref","subscriptionChecker","onChangeSubscription","id","mode","open","url","onClose","onExport","onRunPreviewLocally","LocalNetworkDialog","actions","key","primary","secondaryActions","cannotBeDismissed","onRequestClose","debuggerServerState","debuggerServerAddress","callbacksList","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","getServerState","registerCallbacks","callbacks","callbacksIndex","getLocalExporters","renderIcon","helpPage","description","exportPipeline","localOnlineCordovaExportPipeline","localOnlineWebExportPipeline","localHTML5ExportPipeline","advanced","localFacebookInstantGamesExportPipeline","localCordovaExportPipeline","localOnlineElectronExportPipeline","localElectronExportPipeline","localCocos2dExportPipeline","experimental","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","renderHeader","updateExportState","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openItem","renderGameButton","debugMode","prevState","onToggle","check","toggled","labelPosition","exportWholeCocos2dProject","archiveOutputFilename","temporaryOutputDir","archiveLocalFolder","outputFilename","styles","container","position","display","button","marginLeft","textField","flex","LocalFilePicker","PureComponent","onChooseFolder","showSaveDialog","style","undefined","margin","hintText","onlineBuildType","archiveOutputDir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","launchOnlineBuild","userProfile","uploadBucketKey","getAuthorizationHeader","profile","buildCordovaAndroid","uid","targets","buildElectron","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onCloseProject","onCloseApp","onExportProject","onCreateProject","onOpenProjectManager","onOpenStartPage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","loadAllExtensions","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","checkIfPathHasJsExtensionModule","extensionFolderPath","jsExtensionModulePath","stat","stats","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeBehaviorCode","behaviorCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","writeEventsFunctionsExtension","extension","filepath","stringifyException","writeJSONFile","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","dataObject","readJSONFile","child_process","process","findDevelopmentNewIdeAppPath","developmentElectronAppFolder","cwd","getAllDevelopmentWatchPaths","paths","pathsWithErrors","gdevelopRepositoryRoot","gdjsSourcesRuntimePath","gdExtensionsPath","files","extensionPath","isDirectory","Boolean","extensionDevelopmentWatchPaths","concat","gdjsDevelopmentWatchPaths","importGDJSRuntime","startTime","exec","stdout","stderr","duration","onWatchEvent","debounce","eventName","resolvedFilename","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","stopWatchers","watchers","watchPath","watcher","watch","Object","keys","totalTimeStr","close","getResourcesToFetch","getAllResourceNames","toJSArray","getFile","fetchResources","onProgress","baseAssetsPath","downloadedFilePaths","erroredResources","fetchedResources","fetchedResourcesCount","resourcesToFetch","PromisePool","withConcurrency","for","extname","filenameWithoutExtension","newNameGenerator","tentativePath","has","newPath","add","invoke","LocalResourceFetcher","promise_pool_1","defineProperty","goodies_1","promise_pool_executor_1","constructor","items","concurrency","errorHandler","tap","handleError","callback","PromisePoolExecutor","withHandler","start","ifNullish","isAsyncFunction","isPromise","upon","Goodies","promise","input","tapAsync","tapSync","isFunction","uponAsync","uponSync","predicate","promise_pool_error_1","tasks","errors","results","action","hasReachedConcurrencyLimit","activeCount","validateInputs","TypeError","Array","isArray","processingSlot","startProcessing","drained","waitForTaskToFinish","task","createTaskFor","PromisePoolError","createFrom","drainActiveTasks","unsupportedIterableToArray","o","Symbol","iterator","i","F","s","n","done","_e","f","it","normalCompletion","didErr","step","next","_e2","arrayLikeToArray","minLen","prototype","call","slice","from","test","arr","len","arr2","super","messageFrom","captureStackTrace","LocalFolderPicker","_onChooseFolder","_getTitleAndMessage","titleAndMessage","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","log","pointer","pipe","directory","finalize","localFilePath","stepCurrentProgress","stepMaxProgress","onOpenWithPicker","unsplit","getReferencePartialObject","referencePath","maxUnsplitDepth","hasAutoSave","compareLastModified","autoSavedTime","mtime","getTime","onGetAutoSave","internalName","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","createOperations","getOpenErrorMessage","create","authentification","setUpContextMenu","getArguments","isDev","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","renderMainMenu","renderPreviewLauncher","renderExportDialog","exporters","renderCreateDialog","examplesComponent","LocalExamples","startersComponent","renderGDJSDevelopmentWatcher","resourceSources","localResourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","showErrorBox","errorId","exampleNames","onExamplesLoaded","onCreateFromExample","tryPath","onExists","onNoAccess","access","constants","R_OK","cb","appPath","getAppPath","createReference","referenceTo","splitObject","currentObject","currentPath","currentReference","index","itemPath","itemReference","propertyName","propertyPath","propertyReference","unsplitObject","depth","indexOrPropertyName","isReference","existingNamesForReference","property","newName"],"mappings":"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","file":"static/js/local-app.549ccce5.chunk.js","sourcesContent":["import optionalRequire from '../../Utils/OptionalRequire.js';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nexport default {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return os.tmpdir();\n  },\n  fileNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return fullPath;\n\n    fullPath = this._translateUrl(fullPath);\n    return path.basename(fullPath);\n  },\n  dirNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return '';\n\n    fullPath = this._translateUrl(fullPath);\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  isAbsolute: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    fullPath = this._translateUrl(fullPath);\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalUrl(source)) return true;\n\n    source = this._translateUrl(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateUrl(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalUrl: function(filename) {\n    return (\n      filename.startsWith('http://') ||\n      filename.startsWith('https://') ||\n      filename.startsWith('ftp://')\n    );\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateUrl: function(filename) {\n    // TODO: remove\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n","// @flow\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\n\nconst gd: libGDevelop = global.gd;\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nconst writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata }; // Save was properly done\n  });\n};\n\nexport const onSaveProjectAs = (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n  const browserWindow = electron.remote.getCurrentWindow();\n  const options = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    return Promise.reject('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, options);\n  if (!filePath) {\n    return Promise.resolve({ wasSaved: false, fileMetadata });\n  }\n  const projectPath = path.dirname(filePath);\n\n  // TODO: Ideally, errors while copying resources should be reported.\n  gd.ProjectResourcesCopier.copyAllResourcesTo(\n    project,\n    fileSystem,\n    projectPath,\n    true, // Update the project with the new resource paths\n    false, // Don't move absolute files\n    true // Keep relative files folders structure.\n  );\n\n  // Update the project with the new file path (resources have already been updated)\n  project.setProjectFile(filePath);\n\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return {\n      wasSaved: true,\n      fileMetadata: {\n        ...fileMetadata,\n        fileIdentifier: filePath,\n      },\n    }; // Save was properly done\n  });\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport RaisedButton from '../UI/RaisedButton';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport Text from '../UI/Text';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ListIcon from '../UI/ListIcon';\nimport { showGameFileCreationError } from './LocalExamples';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nimport { findEmptyPath } from './LocalPathFinder';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nvar fs = optionalRequire('fs-extra');\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onShowExamples: () => void,\n  outputPath: string,\n|};\n\ntype State = {||};\n\nexport default class LocalStarters extends Component<Props, State> {\n  createFromExample(i18n: I18nType, exampleName: string) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  }\n\n  createEmptyGame(i18n: I18nType) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    try {\n      fs.mkdirsSync(outputPath);\n    } catch (error) {\n      showGameFileCreationError(i18n, outputPath, error);\n      return;\n    }\n\n    const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n    const filePath = path.join(outputPath, 'game.json');\n    project.setProjectFile(filePath);\n    this.props.onCreate(project, LocalFileStorageProvider, {\n      fileIdentifier: filePath,\n    });\n    sendNewGameCreated('');\n  }\n\n  componentDidMount() {\n    if (this.props.outputPath === '')\n      if (path && app)\n        this.props.onChangeOutputPath(\n          findEmptyPath(\n            path.join(app.getPath('documents'), 'GDevelop projects')\n          )\n        );\n  }\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose a game to use as a starter:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column expand noMargin>\n                <List>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/platformer.png\"\n                      />\n                    }\n                    primaryText={<Trans>Platformer</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A simple platform game, with coins to collect, moving\n                        platforms and enemies.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'platformer')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/space-shooter.png\"\n                      />\n                    }\n                    primaryText={<Trans>8-bit Space Shooter</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A beautiful, retro side-scrolling shooter where you must\n                        defeat incoming enemies with your mecha transforming\n                        spaceship. Huge boss included!\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'space-shooter')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/geometry-monster.png\"\n                      />\n                    }\n                    primaryText={<Trans>Geometry Monster</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A hyper casual endless game where you have to collect\n                        shapes and avoid bombs, with a progressively increasing\n                        difficulty.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'geometry-monster')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/isometric-game.png\"\n                      />\n                    }\n                    primaryText={<Trans>Isometric game</Trans>}\n                    secondaryText={\n                      <Trans>\n                        An example of an isometric game where you can explore a\n                        map with your character.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'isometric-game')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                      />\n                    }\n                    primaryText=\"Downhill Bike Racing\"\n                    secondaryText={\n                      <Trans>\n                        An example of a 2D physics based game, where players\n                        have to reach the end as fast as possible.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'downhill-bike-physics-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/pairs.png\"\n                      />\n                    }\n                    primaryText=\"Pairs\"\n                    secondaryText={\n                      <Trans>\n                        Find all matching pairs of cards in this relaxing game.\n                        Use tweens to create smooth, natural animations with a\n                        few events.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'pairs')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/new.png\"\n                      />\n                    }\n                    primaryText={<Trans>Empty game</Trans>}\n                    secondaryText={\n                      <Trans>Start a new game from scratch.</Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createEmptyGame(i18n)}\n                  />\n                  <Subheader>\n                    <Trans>Advanced</Trans>\n                  </Subheader>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/particle-effects-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Particle Effects Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo of various high quality particle effects (fire,\n                        magic, snow, rune spell...) that you can try and use in\n                        your game.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'particle-effects-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/game-feel-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Game Feel Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo showing how to enhance the \"game feel\" of your\n                        project: VFX, shot trail, ambient sounds and SFX,\n                        screenshake, wobble...\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'game-feel-demo')\n                    }\n                  />\n                </List>\n                <Line alignItems=\"center\" justifyContent=\"center\">\n                  <RaisedButton\n                    label={<Trans>See examples</Trans>}\n                    onClick={() => this.props.onShowExamples()}\n                  />\n                </Line>\n              </Column>\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","import generateName from '../Utils/NewNameGenerator';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\nexport const findEmptyPath = basePath => {\n  if (!path) return basePath;\n\n  const folderName = generateName('My project', name => {\n    try {\n      fs.accessSync(path.join(basePath, name));\n    } catch (ex) {\n      return false;\n    }\n    return true;\n  });\n\n  return path.join(basePath, folderName);\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\nimport type { ResourceKind } from './ResourceSource.flow';\nimport { type ResourceSourceComponentProps } from './ResourceSource.flow';\nimport { Component } from 'react';\nimport {\n  isPathInProjectFolder,\n  copyAllToProjectFolder,\n} from './ResourceUtils.js';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport Window from '../Utils/Window';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nexport default [\n  {\n    name: 'localAudioFileOpener',\n    displayName: 'Choose a new audio file',\n    kind: 'audio',\n    component: class LocalAudioFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an audio file`),\n          name: i18n._(t`Audio files`),\n          extensions: ['aac', 'wav', 'mp3', 'ogg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'audio'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const audioResource = new gd.AudioResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            audioResource.setFile(path.relative(projectPath, resourcePath));\n            audioResource.setName(path.relative(projectPath, resourcePath));\n\n            return audioResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFileOpener',\n    displayName: 'Choose a new image',\n    kind: 'image',\n    component: class LocalFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an image`),\n          name: i18n._(t`Image files`),\n          extensions: ['png', 'jpg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'image'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const imageResource = new gd.ImageResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            imageResource.setFile(path.relative(projectPath, resourcePath));\n            imageResource.setName(path.relative(projectPath, resourcePath));\n\n            return imageResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFontFileOpener',\n    displayName: 'Choose a new font file',\n    kind: 'font',\n    component: class LocalFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a font file`),\n          name: i18n._(t`Font files`),\n          extensions: ['ttf', 'otf'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'font'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const fontResource = new gd.FontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            fontResource.setFile(path.relative(projectPath, resourcePath));\n            fontResource.setName(path.relative(projectPath, resourcePath));\n\n            return fontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localVideoFileOpener',\n    displayName: 'Choose a new video file',\n    kind: 'video',\n    component: class LocalVideoFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a video file`),\n          name: i18n._(t`Video files`),\n          extensions: ['mp4'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'video'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const videoResource = new gd.VideoResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            videoResource.setFile(path.relative(projectPath, resourcePath));\n            videoResource.setName(path.relative(projectPath, resourcePath));\n\n            return videoResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localJsonFileOpener',\n    displayName: 'Choose a new json file',\n    kind: 'json',\n    component: class LocalJsonFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a json file`),\n          name: i18n._(t`JSON file`),\n          extensions: ['json'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'json'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const jsonResource = new gd.JsonResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            jsonResource.setFile(path.relative(projectPath, resourcePath));\n            jsonResource.setName(path.relative(projectPath, resourcePath));\n\n            return jsonResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n];\n\nconst selectLocalResourcePath = (\n  i18n: I18nType,\n  project: gdProject,\n  options: {\n    multiSelections: boolean,\n    title: string,\n    name: string,\n    extensions: Array<string>,\n  },\n  getLastUsedPath: (project: gdProject, kind: ResourceKind) => string,\n  setLastUsedPath: (\n    project: gdProject,\n    kind: ResourceKind,\n    path: string\n  ) => void,\n  kind: ResourceKind\n): Promise<Array<string>> => {\n  if (!dialog) return Promise.reject('Not supported');\n\n  const properties = ['openFile'];\n  if (options.multiSelections) properties.push('multiSelections');\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: options.title,\n      properties,\n      filters: [{ name: options.name, extensions: options.extensions }],\n      defaultPath: latestPath,\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return [];\n\n      const lastUsedPath = path.parse(filePaths[0]).dir;\n      setLastUsedPath(project, kind, lastUsedPath);\n\n      const outsideProjectFolderPaths = filePaths.filter(\n        path => !isPathInProjectFolder(project, path)\n      );\n\n      if (outsideProjectFolderPaths.length) {\n        const answer = Window.showConfirmDialog(\n          i18n._(\n            t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n          )\n        );\n\n        if (answer) {\n          return copyAllToProjectFolder(project, filePaths);\n        }\n      }\n\n      return filePaths;\n    });\n};\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport { LocalPreviewDebuggerServer } from './LocalPreviewDebuggerServer';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst BrowserWindow = electron ? electron.remote.BrowserWindow : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  devToolsOpen: boolean,\n  previewBrowserWindowConfig: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    devToolsOpen: false,\n    previewBrowserWindowConfig: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    if (\n      !BrowserWindow ||\n      !this.state.previewBrowserWindowConfig ||\n      !this.state.previewGamePath\n    )\n      return;\n\n    const win = new BrowserWindow(this.state.previewBrowserWindowConfig);\n    win.loadURL(`file://${this.state.previewGamePath}/index.html`);\n    win.setMenuBarVisibility(this.state.hideMenuBar);\n    win.webContents.on('devtools-opened', () => {\n      this.setState({ devToolsOpen: true });\n    });\n    win.webContents.on('devtools-closed', () => {\n      this.setState({ devToolsOpen: false });\n    });\n    if (this.state.devToolsOpen) win.openDevTools();\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowConfig: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            nodeIntegration: true,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = this.getPreviewDebuggerServer().getServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.setDebuggerServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return LocalPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        cannotBeDismissed={true}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const LocalPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getServerAddress: () => debuggerServerAddress,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localCocos2dExportPipeline } from './LocalCocos2dExport';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport.js';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport.js';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getLocalExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'localonlinecordovaexport',\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'localonlinewebexport',\n    exportPipeline: localOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>Local folder</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'localexport',\n    exportPipeline: localHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'localfacebookinstantgames',\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually to\n        iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'localcordovaexport',\n    exportPipeline: localCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'localonlineelectronexport',\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'localelectronexport',\n    exportPipeline: localElectronExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Cocos2d-JS</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cocos2d-js',\n    description: (\n      <Trans>\n        Export your game using Cocos2d-JS game engine. The game can be compiled\n        for Android or iOS if you install Cocos2d-JS developer tools.\n      </Trans>\n    ),\n    key: 'localcocos2dexport',\n    exportPipeline: localCocos2dExportPipeline,\n    experimental: true,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport Toggle from '../../UI/Toggle';\nimport {\n  DoneFooter,\n  ExplanationHeader,\n} from '../GenericExporters/Cocos2dExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n  debugMode: boolean,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCocos2dExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cocos2d',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n    debugMode: false,\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(prevState => ({ ...prevState, outputDir }));\n          }}\n          fullWidth\n        />\n      </Line>\n      <Line>\n        <Toggle\n          onToggle={(e, check) =>\n            updateExportState(prevState => ({\n              ...prevState,\n              debugMode: check,\n            }))\n          }\n          toggled={exportState.debugMode}\n          labelPosition=\"right\"\n          label={\n            <Trans>\n              Debug mode (show FPS counter and stats in the bottom left)\n            </Trans>\n          }\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    exporter.exportWholeCocos2dProject(\n      context.project,\n      context.exportState.debugMode,\n      context.exportState.outputDir\n    );\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openItem(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          hintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, profile.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-start-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'main-menu-open-games-dashboard'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create a New Project...`),\n        accelerator: getElectronAccelerator(shortcutMap['CREATE_NEW_PROJECT']),\n        onClickSendEvent: 'main-menu-create',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Games Dashboard`),\n        onClickSendEvent: 'main-menu-open-games-dashboard',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { role: 'undo' },\n      { role: 'redo' },\n      { type: 'separator' },\n      { role: 'cut' },\n      { role: 'copy' },\n      { role: 'paste' },\n      { role: 'pasteandmatchstyle' },\n      { role: 'delete' },\n      { role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Start Page`),\n        onClickSendEvent: 'main-menu-open-start-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { role: 'toggledevtools' },\n      { type: 'separator' },\n      { role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop-app.com',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop-app.com',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/rjdYHvj',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop-app.com/contribute/',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Games Dashboard`),\n          onClickSendEvent: 'main-menu-open-games-dashboard',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create', props.onCreateProject);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-start-page', props.onOpenStartPage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    props.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', props.setUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples }) => {\n  return findGDJS().then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport slugs from 'slugs';\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n  const outputDir = os.tmpdir() + '/GDGeneratedEventsFunctions';\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nimport debounce from 'lodash/debounce';\nconst electron = optionalRequire('electron');\nconst fs = optionalRequire('fs');\nconst child_process = optionalRequire('child_process');\nconst process = optionalRequire('process');\nconst path = optionalRequire('path');\n\ntype DevelopmentWatchPaths = {\n  paths: Array<string>,\n  pathsWithErrors: { [string]: Error },\n};\n\n/**\n * Returns the folder corresponding to newIDE/app in **development**. Works\n * only when running in Electron.\n */\nconst findDevelopmentNewIdeAppPath = () /*: string */ => {\n  if (!electron) return '';\n\n  const developmentElectronAppFolder = process.cwd();\n  return path.join(developmentElectronAppFolder, '../app');\n};\n\n/**\n * Returns the list of folders to watch containing the **sources** of\n * GDJS and Extensions, found relatively to the current working directory which is the\n * Electron working directory during **development**. Won't work\n * if running on production.\n */\nconst getAllDevelopmentWatchPaths = (): Promise<DevelopmentWatchPaths> => {\n  if (!electron || !fs)\n    return Promise.resolve({ paths: [], pathsWithErrors: {} });\n\n  const pathsWithErrors: { [string]: Error } = {};\n\n  const gdevelopRepositoryRoot = path.join(\n    findDevelopmentNewIdeAppPath(),\n    '../..'\n  );\n  const gdjsSourcesRuntimePath = path.join(\n    gdevelopRepositoryRoot,\n    'GDJS/Runtime'\n  );\n  const gdExtensionsPath = path.join(gdevelopRepositoryRoot, 'Extensions');\n\n  const getExtensionDevelopmentWatchPaths = (): Promise<Array<string>> =>\n    new Promise(resolve =>\n      fs.readdir(gdExtensionsPath, (error: ?Error, files: Array<string>) => {\n        if (error) {\n          pathsWithErrors[gdExtensionsPath] = error;\n          resolve([]);\n          return;\n        }\n\n        resolve(\n          Promise.all(\n            files.map(\n              (file): Promise<?string> =>\n                new Promise(resolve => {\n                  const extensionPath = path.join(gdExtensionsPath, file);\n                  fs.stat(extensionPath, (error, stat) => {\n                    if (error) {\n                      pathsWithErrors[extensionPath] = error;\n                      resolve(extensionPath);\n                      return;\n                    }\n\n                    resolve(stat.isDirectory() ? extensionPath : null);\n                  });\n                })\n            )\n          ).then(paths => paths.filter(Boolean))\n        );\n      })\n    );\n\n  const getGDJSDevelopmentWatchPaths = (): Promise<Array<string>> => {\n    return Promise.resolve(\n      [gdjsSourcesRuntimePath].concat(\n        [\n          // List of all sub folders in GDJS Runtime.\n          // If you add any folder, add it here too so that it\n          // can be watched for changes.\n          'Cocos2d',\n          'Cordova',\n          'Electron',\n          'FacebookInstantGames',\n          'cocos-renderers',\n          'cocos-sound-manager',\n          'events-tools',\n          'fontfaceobserver-font-manager',\n          'howler-sound-manager',\n          'libs',\n          'pixi-renderers',\n          'websocket-debugger-client',\n        ].map(folder => path.join(gdjsSourcesRuntimePath, folder))\n      )\n    );\n  };\n\n  return getExtensionDevelopmentWatchPaths().then(\n    extensionDevelopmentWatchPaths => {\n      return getGDJSDevelopmentWatchPaths().then(gdjsDevelopmentWatchPaths => {\n        return {\n          paths: [\n            ...gdjsDevelopmentWatchPaths,\n            ...extensionDevelopmentWatchPaths,\n          ],\n          pathsWithErrors,\n        };\n      });\n    }\n  );\n};\n\n/**\n * Launch the newIDE script `import-GDJS-Runtime`.\n */\nconst importGDJSRuntime = (): Promise<void> => {\n  if (!child_process || !path) return Promise.reject(new Error('Unsupported'));\n\n  return new Promise((resolve, reject) => {\n    const startTime = performance.now();\n    child_process.exec(\n      `node \"${path.join(\n        findDevelopmentNewIdeAppPath(),\n        'scripts/import-GDJS-Runtime.js'\n      )}\"`,\n      (error, stdout, stderr) => {\n        if (error) {\n          console.error(`GDJS Runtime update error:\\n${error}`);\n          reject(error);\n          return;\n        }\n\n        const duration = (performance.now() - startTime).toFixed(0);\n        console.info(`GDJS Runtime updated in ${duration}ms:\\n${stdout}`);\n\n        if (stderr) {\n          console.error(`GDJS Runtime update error:\\n${stderr}`);\n          reject(new Error('Error while updating GDJS Runtime'));\n          return;\n        }\n\n        resolve();\n      }\n    );\n  });\n};\n\n/**\n * Callback for fs.watch, so that  whenever a source file is changed,\n * it relaunchs automatically the script to import.\n */\nconst onWatchEvent = debounce((event: ?string, filename: ?string) => {\n  const eventName = event || 'unknown-event';\n  const resolvedFilename = filename || 'unknown-file';\n  console.info(\n    `GDJS/extensions watchers found a \"${eventName}\" in ${resolvedFilename}, updating GDJS Runtime...`\n  );\n  importGDJSRuntime().catch(() => {});\n}, 100 /* Avoid running the script too much in case multiple changes are fired at the same time. */);\n\nconst genericWatcherErrorMessage =\n  'Error in watcher for GDJS Runtime - manually call npm run `node import-GDJS-Runtime.js` in the newIDE/app/scripts folder if you make changes to GDJS.';\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      let stopWatchers = false;\n      let watchers = [];\n      let startTime = performance.now();\n      getAllDevelopmentWatchPaths().then(({ paths, pathsWithErrors }) => {\n        // There is a non nul chance that for some reason the effect was cleaned up\n        // before we retrieved all the paths. Stop there if it's the case.\n        if (stopWatchers) return;\n\n        if (!fs) {\n          console.error(\n            \"Unable to use 'fs' from Node.js to watch changes in GDJS.\"\n          );\n          return;\n        }\n\n        // Reload extensions when the component is first mounted\n        importGDJSRuntime().catch(() => {});\n\n        // Create watchers\n        paths.forEach(watchPath => {\n          let watcher = null;\n          try {\n            watcher = fs.watch(watchPath, {}, onWatchEvent);\n          } catch (error) {\n            pathsWithErrors[watchPath] = error;\n            return null;\n          }\n\n          if (watcher) {\n            watcher.on('error', error => {\n              console.warn(genericWatcherErrorMessage, error);\n            });\n\n            watchers.push(watcher);\n          }\n        });\n\n        if (Object.keys(pathsWithErrors).length) {\n          console.warn(\n            'Error while setting up watchers for some paths: ',\n            pathsWithErrors\n          );\n        }\n\n        const totalTimeStr = (performance.now() - startTime).toFixed(2);\n        if (watchers.length) {\n          console.info(\n            `Watchers for GDJS Runtime/extensions installed in ${totalTimeStr}ms.`\n          );\n        } else {\n          console.warn(\n            `No watchers for GDJS Runtime/extensions installed (took ${totalTimeStr}ms).`\n          );\n        }\n      });\n\n      // Close all the watchers when the React effect is unregistered\n      return () => {\n        stopWatchers = true;\n        if (!watchers.length) return;\n\n        watchers.forEach(watcher => {\n          watcher.close();\n        });\n        console.info('Watchers for GDJS Runtime closed.');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\nimport PromisePool from '@supercharge/promise-pool';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\nconst isExternalUrl = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://')\n  );\n};\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  const resourcesManager = project.getResourcesManager();\n\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  return allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isExternalUrl(resource.getFile());\n  });\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n  const resourcesManager = project.getResourcesManager();\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n  const fetchedResources = [];\n\n  let fetchedResourcesCount = 0;\n  const resourcesToFetch = getResourcesToFetch(project);\n\n  return PromisePool.withConcurrency(3)\n    .for(resourceNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      const extension = path.extname(url);\n      const filenameWithoutExtension = path.basename(url, extension);\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const newPath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(newPath);\n\n      try {\n        await fs.ensureDir(baseAssetsPath);\n        await ipcRenderer.invoke('local-file-download', url, newPath);\n        resource.setFile(\n          path.relative(projectPath, newPath).replace(/\\\\/g, '/')\n        );\n        fetchedResources.push({ resourceName });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourcesToFetch.length);\n    })\n    .then(() => ({\n      fetchedResources,\n      erroredResources,\n    }));\n};\n\nexport const LocalResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","'use strict';\nconst promise_pool_1 = require(\"./promise-pool\");\nmodule.exports = promise_pool_1.PromisePool;\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisePool = void 0;\nconst goodies_1 = require(\"@supercharge/goodies\");\nconst promise_pool_executor_1 = require(\"./promise-pool-executor\");\nclass PromisePool {\n    /**\n     * Instantiates a new promise pool with a default `concurrency: 10` and `items: []`.\n     *\n     * @param {Object} options\n     */\n    constructor() {\n        this.items = [];\n        this.concurrency = 10;\n        this.errorHandler = undefined;\n    }\n    /**\n     * Set the number of tasks to process concurrently in the promise pool.\n     *\n     * @param {Integer} concurrency\n     *\n     * @returns {PromisePool}\n     */\n    withConcurrency(concurrency) {\n        return goodies_1.tap(this, () => {\n            this.concurrency = concurrency;\n        });\n    }\n    /**\n     * Set the number of tasks to process concurrently in the promise pool.\n     *\n     * @param {Number} concurrency\n     *\n     * @returns {PromisePool}\n     */\n    static withConcurrency(concurrency) {\n        return goodies_1.tap(this, () => {\n            this.concurrency = concurrency;\n        });\n    }\n    /**\n     * Set the items to be processed in the promise pool.\n     *\n     * @param {Array} items\n     *\n     * @returns {PromisePool}\n     */\n    for(items) {\n        return goodies_1.tap(this, () => {\n            this.items = items;\n        });\n    }\n    /**\n     * Set the items to be processed in the promise pool.\n     *\n     * @param {Array} items\n     *\n     * @returns {PromisePool}\n     */\n    static for(items) {\n        return new this()\n            .for(items)\n            .withConcurrency(this.concurrency);\n    }\n    /**\n     * Set the error handler function to execute when an error occurs.\n     *\n     * @param {Function} handler\n     *\n     * @returns {PromisePool}\n     */\n    handleError(handler) {\n        return goodies_1.tap(this, () => {\n            this.errorHandler = handler;\n        });\n    }\n    /**\n     * Starts processing the promise pool by iterating over the items\n     * and running each item through the async `callback` function.\n     *\n     * @param {Function} The async processing function receiving each item from the `items` array.\n     *\n     * @returns Promise<{ results, errors }>\n     */\n    async process(callback) {\n        return new promise_pool_executor_1.PromisePoolExecutor()\n            .withConcurrency(this.concurrency)\n            .withHandler(callback)\n            .handleError(this.errorHandler)\n            .for(this.items)\n            .start();\n    }\n}\nexports.PromisePool = PromisePool;\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ifNullish = exports.isAsyncFunction = exports.isPromise = exports.upon = exports.tap = void 0;\nconst goodies_1 = require(\"./goodies\");\nfunction tap(value, callback) {\n    return new goodies_1.Goodies().tap(value, callback);\n}\nexports.tap = tap;\nfunction upon(value, callback) {\n    return new goodies_1.Goodies().upon(value, callback);\n}\nexports.upon = upon;\n/**\n * Determine whether the given `promise` is a Promise.\n *\n * @param {*} promise\n *\n * @returns {Boolean}\n *\n * @example\n * isPromise('no') // false\n * isPromise(new Promise(() => {})) // true\n */\nfunction isPromise(promise) {\n    return new goodies_1.Goodies().isPromise(promise);\n}\nexports.isPromise = isPromise;\n/**\n * Determine whether the given `input` is an async function.\n *\n * @param {*} input\n *\n * @returns {Boolean}\n */\nfunction isAsyncFunction(input) {\n    return new goodies_1.Goodies().isAsyncFunction(input);\n}\nexports.isAsyncFunction = isAsyncFunction;\nfunction ifNullish(input, callback) {\n    return new goodies_1.Goodies().ifNullish(input, callback);\n}\nexports.ifNullish = ifNullish;\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Goodies = void 0;\nclass Goodies {\n    /**\n     * Handles the tap call and delegates it either to an async tap\n     * handler or to a sync tap handler.\n     *\n     * @param {*} value\n     * @param {Function} callback\n     *\n     * @returns {*} value\n     */\n    tap(value, callback) {\n        if (this.isPromise(value)) {\n            return this.tapAsync(value, callback);\n        }\n        if (this.isAsyncFunction(callback)) {\n            return this.tapAsync(value, callback);\n        }\n        return this.tapSync(value, callback);\n    }\n    /**\n     * Calls the given `callback` function with the\n     * given `value` and returns `value`.\n     *\n     * @param {*} value\n     * @param {Function} callback\n     *\n     * @returns {*} value\n     */\n    tapSync(value, callback) {\n        if (!callback) {\n            return value;\n        }\n        if (this.isFunction(callback)) {\n            callback(value);\n        }\n        return value;\n    }\n    /**\n    * Calls the given `callback` function with the given `value`\n    * and returns `value`. It resolves the `value` before\n    * passing it to the callback in case it is a Promise.\n     *\n     * @param {*} value\n     * @param {Function} callback\n     *\n     * @returns {*} value\n     */\n    async tapAsync(value, callback) {\n        if (!callback) {\n            return value;\n        }\n        if (this.isPromise(value)) {\n            value = await value;\n        }\n        if (this.isFunction(callback)) {\n            await callback(value);\n        }\n        return value;\n    }\n    /**\n     * Calls the given `callback` function with the given `value` and returns\n     * the result of the callback. It resolves the `value` before passing\n     * it to the callback in case it is a Promise.\n     *\n     * @param {*} value\n     * @param {Function} callback\n     *\n     * @returns {*} value\n     */\n    upon(value, callback) {\n        if (this.isPromise(value)) {\n            return this.uponAsync(value, callback);\n        }\n        if (this.isAsyncFunction(callback)) {\n            return this.uponAsync(value, callback);\n        }\n        return this.uponSync(value, callback);\n    }\n    /**\n     * Calls the given `callback` function with the given `value` and returns\n     * the result of the callback.\n     *\n     * @param {*} value\n     * @param {Function} callback\n     *\n     * @returns {*} value\n     */\n    uponSync(value, callback) {\n        if (!callback) {\n            return value;\n        }\n        return this.isFunction(callback)\n            ? callback(value)\n            : value;\n    }\n    /**\n     * Calls the given `callback` function with the given `value` and returns\n     * the result of the callback. It resolves the `value` before passing\n     * it to the callback in case it is a Promise.\n     *\n     * @param {*} value\n     * @param {Function} callback\n     *\n     * @returns {*} value\n     */\n    async uponAsync(value, callback) {\n        if (!callback) {\n            return value;\n        }\n        if (this.isPromise(value)) {\n            value = await value;\n        }\n        return this.isFunction(callback)\n            ? callback(value)\n            : value;\n    }\n    /**\n     * Determine whether the given `promise` is a Promise.\n     *\n     * @param {*} promise\n     *\n     * @returns {Boolean}\n     */\n    isPromise(promise) {\n        return !!promise && this.isFunction(promise.then);\n    }\n    /**\n     * Determine whether the given `input` is a function.\n     *\n     * @param {*} input\n     *\n     * @returns {Boolean}\n     */\n    isFunction(input) {\n        return typeof input === 'function';\n    }\n    /**\n     * Determine whether the given `func` is an async function.\n     *\n     * @param {*} input\n     *\n     * @returns {Boolean}\n     */\n    isAsyncFunction(input) {\n        return this.isFunction(input) && input.constructor.name === 'AsyncFunction';\n    }\n    /**\n     * Runs the given `callback` if the `predicate` is `null` or `undefined`.\n     *\n     * @param {Boolean} predicate\n     * @param {Function} callback\n     *\n     * @returns {*}\n     */\n    ifNullish(predicate, callback) {\n        if (predicate === null || predicate === undefined) {\n            return callback();\n        }\n    }\n}\nexports.Goodies = Goodies;\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisePoolExecutor = void 0;\nconst goodies_1 = require(\"@supercharge/goodies\");\nconst promise_pool_error_1 = require(\"./promise-pool-error\");\nclass PromisePoolExecutor {\n    /**\n     * Creates a new promise pool executer instance with a default concurrency of 10.\n     */\n    constructor() {\n        this.tasks = [];\n        this.items = [];\n        this.errors = [];\n        this.results = [];\n        this.concurrency = 10;\n        this.handler = () => { };\n        this.errorHandler = undefined;\n    }\n    /**\n     * Set the number of tasks to process concurrently the promise pool.\n     *\n     * @param {Integer} concurrency\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    withConcurrency(concurrency) {\n        return goodies_1.tap(this, () => {\n            this.concurrency = concurrency;\n        });\n    }\n    /**\n     * Set the items to be processed in the promise pool.\n     *\n     * @param {Array} items\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    for(items) {\n        return goodies_1.tap(this, () => {\n            this.items = items;\n        });\n    }\n    /**\n     * Set the handler that is applied to each item.\n     *\n     * @param {Function} action\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    withHandler(action) {\n        return goodies_1.tap(this, () => {\n            this.handler = action;\n        });\n    }\n    /**\n     * Set the error handler function to execute when an error occurs.\n     *\n     * @param {Function} handler\n     *\n     * @returns {PromisePoolExecutor}\n     */\n    handleError(handler) {\n        return goodies_1.tap(this, () => {\n            this.errorHandler = handler;\n        });\n    }\n    /**\n     * Determines whether the number of active tasks is greater or equal to the concurrency limit.\n     *\n     * @returns {Boolean}\n     */\n    hasReachedConcurrencyLimit() {\n        return this.activeCount() >= this.concurrency;\n    }\n    /**\n     * Returns the number of active tasks.\n     *\n     * @returns {Number}\n     */\n    activeCount() {\n        return this.tasks.length;\n    }\n    /**\n     * Start processing the promise pool.\n     *\n     * @returns {Array}\n     */\n    async start() {\n        return goodies_1.upon(this.validateInputs(), async () => {\n            return this.process();\n        });\n    }\n    /**\n     * Ensure valid inputs and throw otherwise.\n     *\n     * @throws\n     */\n    validateInputs() {\n        if (typeof this.handler !== 'function') {\n            throw new Error('The first parameter for the .process(fn) method must be a function');\n        }\n        if (!(typeof this.concurrency === 'number' && this.concurrency >= 1)) {\n            throw new TypeError(`\"concurrency\" must be a number, 1 or up. Received \"${this.concurrency}\" (${typeof this.concurrency})`);\n        }\n        if (!Array.isArray(this.items)) {\n            throw new TypeError(`\"items\" must be an array. Received ${typeof this.items}`);\n        }\n        if (this.errorHandler) {\n            if (typeof this.errorHandler !== 'function') {\n                throw new Error(`The error handler must be a function. Received ${typeof this.errorHandler}`);\n            }\n        }\n    }\n    /**\n     * Starts processing the promise pool by iterating over the items\n     * and running each item through the async `callback` function.\n     *\n     * @param {Function} callback\n     *\n     * @returns {Promise}\n     */\n    async process() {\n        for (const item of this.items) {\n            if (this.hasReachedConcurrencyLimit()) {\n                await this.processingSlot();\n            }\n            this.startProcessing(item);\n        }\n        return this.drained();\n    }\n    /**\n     * Creates a deferred promise and pushes the related callback to the pending\n     * queue. Returns the promise which is used to wait for the callback.\n     *\n     * @returns {Promise}\n     */\n    async processingSlot() {\n        return this.waitForTaskToFinish();\n    }\n    /**\n     * Wait for one of the active tasks to finish processing.\n     */\n    async waitForTaskToFinish() {\n        await Promise.race(this.tasks);\n    }\n    /**\n     * Create a processing function for the given `item`.\n     *\n     * @param {*} item\n     */\n    startProcessing(item) {\n        const task = this.createTaskFor(item)\n            .then(result => {\n            this.results.push(result);\n            this.tasks.splice(this.tasks.indexOf(task), 1);\n        })\n            .catch(error => {\n            this.tasks.splice(this.tasks.indexOf(task), 1);\n            if (this.errorHandler) {\n                return this.errorHandler(error, item);\n            }\n            this.errors.push(promise_pool_error_1.PromisePoolError.createFrom(error, item));\n        });\n        this.tasks.push(task);\n    }\n    /**\n     * Ensures a returned promise for the processing of the given `item`.\n     *\n     * @param item\n     *\n     * @returns {*}\n     */\n    async createTaskFor(item) {\n        return this.handler(item);\n    }\n    /**\n     * Wait for all active tasks to finish. Once all the tasks finished\n     * processing, returns an object containing the results and errors.\n     *\n     * @returns {Object}\n     */\n    async drained() {\n        await this.drainActiveTasks();\n        return {\n            results: this.results,\n            errors: this.errors\n        };\n    }\n    /**\n     * Wait for all of the active tasks to finish processing.\n     */\n    async drainActiveTasks() {\n        await Promise.all(this.tasks);\n    }\n}\nexports.PromisePoolExecutor = PromisePoolExecutor;\n","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nfunction _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PromisePoolError = void 0;\nclass PromisePoolError extends Error {\n    /**\n     * Create a new instance for the given `message` and `item`.\n     *\n     * @param error  The original error\n     * @param item   The item causing the error\n     */\n    constructor(error, item) {\n        super();\n        this.item = item;\n        this.name = this.constructor.name;\n        this.message = this.messageFrom(error);\n        Error.captureStackTrace(this, this.constructor);\n    }\n    /**\n     * Returns a new promise pool error instance wrapping the `error` and `item`.\n     *\n     * @param {*} error\n     * @param {*} item\n     *\n     * @returns {PromisePoolError}\n     */\n    static createFrom(error, item) {\n        return new this(error, item);\n    }\n    /**\n     * Returns the error message from the given `error`.\n     *\n     * @param {*} error\n     *\n     * @returns {String}\n     */\n    messageFrom(error) {\n        if (error instanceof Error) {\n            return error.message;\n        }\n        if (typeof error === 'object') {\n            return error.message;\n        }\n        if (typeof error === 'string' || typeof error === 'number') {\n            return error.toString();\n        }\n        return '';\n    }\n}\nexports.PromisePoolError = PromisePoolError;\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport RaisedButton from '../RaisedButton';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  type: 'export' | 'create-game',\n  value: string,\n  onChange: string => void,\n  defaultPath?: string,\n  fullWidth?: boolean,\n|};\n\ntype TitleAndMessage = {|\n  title: ?string,\n  message: ?string,\n|};\n\nexport default class LocalFolderPicker extends PureComponent<Props, {||}> {\n  _onChooseFolder = ({ title, message }: TitleAndMessage) => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    dialog\n      .showOpenDialog(browserWindow, {\n        title,\n        properties: ['openDirectory', 'createDirectory'],\n        message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return;\n        this.props.onChange(filePaths[0]);\n      });\n  };\n\n  _getTitleAndMessage = (i18n: I18nType): TitleAndMessage => {\n    const { type } = this.props;\n    if (type === 'export') {\n      return {\n        title: i18n._(t`Choose an export folder`),\n        message: i18n._(t`Choose where to export the game`),\n      };\n    } else if (type === 'create-game') {\n      return {\n        title: i18n._(t`Choose a folder for the new game`),\n        message: i18n._(t`Choose where to create the game`),\n      };\n    }\n\n    return {\n      title: undefined,\n      message: undefined,\n    };\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => {\n          const titleAndMessage = this._getTitleAndMessage(i18n);\n          return (\n            <div\n              style={{\n                ...styles.container,\n                width: this.props.fullWidth ? '100%' : undefined,\n              }}\n            >\n              <TextField\n                margin=\"dense\"\n                style={styles.textField}\n                type=\"text\"\n                hintText={titleAndMessage.title}\n                value={this.props.value}\n                onChange={(event, value) => this.props.onChange(value)}\n              />\n              <RaisedButton\n                label={<Trans>Choose folder</Trans>}\n                primary={false}\n                style={styles.button}\n                onClick={() => this._onChooseFolder(titleAndMessage)}\n              />\n            </div>\n          );\n        }}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from './OptionalRequire.js';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n}: {|\n  path: string,\n  outputFilename: string,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      console.log(\n        `Archive written at ${outputFilename}, ${archive.pointer()} total bytes.`\n      );\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter.js';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onSaveProjectAs,\n  onAutoSaveProject,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Local file system`,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorizations to open it.`;\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentification from './Utils/GDevelopServices/Authentification';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for Electron powered IDE.\nimport LocalExamples from './ProjectCreation/LocalExamples';\nimport LocalStarters from './ProjectCreation/LocalStarters';\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport { getLocalExporters } from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport { LocalResourceFetcher } from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentification: Authentification) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentification={authentification}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n      resourceFetcher={LocalResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[LocalFileStorageProvider]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={props => <ElectronMainMenu {...props} />}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog {...props} exporters={getLocalExporters()} />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  examplesComponent={LocalExamples}\n                  startersComponent={LocalStarters}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport Text from '../UI/Text';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ExamplesList from './ExamplesList';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\n// To add a new example, add it first in resources/examples (at which point you can see it\n// in the desktop version), then run these scripts:\n// * scripts/update-examples-information-from-resources-examples.js (update metadata)\n// * scripts/update-fixtures-from-resources-examples.js (update web-app examples)\n// and upload the examples to `gdevelop-resources` s3.\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onExamplesLoaded: () => void,\n  outputPath: string,\n|};\n\ntype State = {|\n  exampleNames: ?Array<string>,\n|};\n\nexport const showGameFileCreationError = (\n  i18n: I18nType,\n  outputPath: string,\n  rawError: Error\n) => {\n  showErrorBox({\n    message: i18n._(\n      t`Unable to create the game in the specified folder. Check that you have permissions to write in this folder: ${outputPath} or choose another folder.`\n    ),\n    rawError,\n    errorId: 'local-example-creation-error',\n  });\n};\n\nexport default class LocalExamples extends Component<Props, State> {\n  state = {\n    exampleNames: null,\n  };\n\n  componentDidMount() {\n    findExamples(examplesPath => {\n      fs.readdir(examplesPath, (error, exampleNames) => {\n        if (error) {\n          console.error('Unable to read examples:', error);\n          return;\n        }\n\n        this.setState(\n          {\n            exampleNames: exampleNames.filter(name => name !== '.DS_Store'),\n          },\n          () => this.props.onExamplesLoaded()\n        );\n      });\n    });\n  }\n\n  createFromExample = (i18n: I18nType, exampleName: string) => {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose or search for an example to open:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <ExamplesList\n                exampleNames={this.state.exampleNames}\n                onCreateFromExample={exampleName =>\n                  this.createFromExample(i18n, exampleName)\n                }\n              />\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst app = electron ? electron.remote.app : null;\nconst fs = optionalRequire('fs');\nconst process = optionalRequire('process');\n\nconst tryPath = (\n  path: string,\n  onExists: string => void,\n  onNoAccess: Function\n) =>\n  fs.access(path, fs.constants.R_OK, err => {\n    if (!err) onExists(path);\n    else onNoAccess();\n  });\n\nexport const findExamples = (cb: (?string) => void) => {\n  if (!process || !fs) return '';\n\n  const appPath = app ? app.getAppPath() : process.cwd();\n\n  // First try to find examples in app resources folder\n  tryPath(path.join(appPath, '..', 'examples'), cb, () => {\n    tryPath(\n      path.join(appPath, '..', '..', 'app', 'resources', 'examples'),\n      cb,\n      () => {\n        cb(null);\n      }\n    );\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","'use strict'\n\nmodule.exports = require('./dist')\n"],"sourceRoot":""}