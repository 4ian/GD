{"version":3,"sources":["GameEngineFinder/BrowserS3GDJSFinder.js","ProjectCreation/BrowserStarters.js","ResourcesList/BrowserResourceSources.js","Export/BrowserExporters/BrowserS3PreviewLauncher/index.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewLinkDialog.js","Export/BrowserExporters/BrowserS3PreviewLauncher/BrowserPreviewErrorDialog.js","Export/BrowserExporters/BrowserS3FileSystem.js","Export/BrowserExporters/BrowserOnlineCordovaExport.js","Utils/Zip.js/index.js","Export/BrowserExporters/BrowserOnlineElectronExport.js","Export/BrowserExporters/BrowserOnlineWebExport.js","Export/BrowserExporters/BrowserHTML5Export.js","Export/BrowserExporters/BrowserCordovaExport.js","Export/BrowserExporters/BrowserElectronExport.js","Export/BrowserExporters/BrowserCocos2dExport.js","Export/BrowserExporters/BrowserFacebookInstantGamesExport.js","JsExtensionsLoader/BrowserJsExtensionsLoader.js","ProjectsStorage/GoogleDriveStorageProvider/index.js","UI/CustomSvgIcons/GoogleDrive.js","Export/BrowserExporters/BrowserFileSystem.js","Utils/BrowserArchiver.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveFileOrFolderPicker.js","ProjectsStorage/GoogleDriveStorageProvider/GoogleDriveSaveAsDialog.js","Export/BrowserExporters/index.js","Utils/BlobDownloadUrlHolder.js","Utils/GDevelopServices/Preview.js","Export/BrowserExporters/BrowserFileUploader.js","ProjectsStorage/InternalFileStorageProvider/InternalExampleFiles.js","ProjectsStorage/InternalFileStorageProvider/index.js","ProjectCreation/BrowserExamples.js","MainFrame/BrowserIntroDialog.js","ResourcesList/BrowserResourceExternalEditors.js","EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter.js","ProjectsStorage/DownloadFileStorageProvider/DownloadSaveAsDialog.js","ProjectsStorage/DownloadFileStorageProvider/index.js","UI/CustomSvgIcons/Dropbox.js","ProjectsStorage/DropboxStorageProvider/index.js","UI/CustomSvgIcons/OneDrive.js","ProjectsStorage/OneDriveStorageProvider/index.js","ProjectsStorage/ResourceFetcher/BrowserResourceFetcher.js","BrowserApp.js"],"names":["filesToDownload","preview","web","cordova","electron","findGDJS","fileSet","gdjsRoot","getIDEVersion","Promise","all","map","relativeFilePath","url","fetch","then","response","ok","console","error","Error","status","text","filePath","filesContent","gd","global","BrowserStarters","Component","render","noMargin","expand","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","sendNewGameCreated","this","props","onOpen","InternalFileStorageProvider","fileIdentifier","project","ProjectHelper","createNewGDJSProject","onCreate","alignItems","justifyContent","label","onShowExamples","GenericResourcesChooser","state","open","resolveWithResources","chooseResources","multiSelections","resolve","setState","_onChoose","chosenResourceUrl","newResource","createNewResource","setFile","setName","path","basename","setOrigin","_onClose","title","actions","key","primary","cannotBeDismissed","onChoose","resource","resourceKind","name","displayName","kind","component","React","_chooser","AudioResource","ref","chooser","urlsAreImages","ImageResource","FontResource","VideoResource","JsonResource","BrowserS3PreviewLauncher","canDoNetworkPreview","canDoHotReload","showPreviewLinkDialog","_openPreviewWindow","windowObjectReference","window","_prepareExporter","info","prefix","makeTimestampedId","outputDir","getBaseUrl","browserS3FileSystem","BrowserS3FileSystem","bucketBaseUrl","fileSystem","assignIn","AbstractFileSystemJS","exporter","Exporter","setCodeOutputDirectory","launchPreview","previewOptions","layout","externalLayout","previewExportOptions","PreviewExportOptions","setLayoutName","getName","setExternalLayoutName","setNonRuntimeScriptsCacheBurst","Date","now","exportProjectForPixiPreview","delete","uploadPendingObjects","finalUrl","catch","getPreviewDebuggerServer","onClose","BrowserPreviewLinkDialog","_makeOnOpen","i18n","showErrorBox","message","_","rawError","undefined","errorId","BrowserPreviewErrorDialog","onRequestClose","code","isURL","filename","substr","constructor","_pendingUploadObjects","_allCopiedExternalUrls","Set","uploadObject","result","log","mkDir","dirExists","clearDir","getTempDir","fileNameFrom","fullpath","dirNameFrom","dirname","makeAbsolute","baseDirectory","isAbsolute","normalize","makeRelative","relative","length","charAt","copyFile","source","dest","add","warn","writeToFile","fullPath","contents","replace","fileExtension","extname","push","Key","Body","ContentType","readFile","file","_indexedFilesContent","readDir","ext","toUpperCase","output","VectorString","forEach","upperCaseUrl","indexOf","push_back","fileExists","textFileDescriptor","browserOnlineCordovaExportPipeline","onlineBuildType","packageNameWarningType","getInitialExportState","canLaunchBuild","renderHeader","renderLaunchButtonLabel","prepareExporter","context","abstractFileSystem","BrowserFileSystem","textFiles","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","getAllTextFilesIn","urlFiles","getAllUrlFilesIn","launchResourcesDownload","downloadUrlsToBlobs","onProgress","updateStepProgress","blobFiles","launchCompression","archiveFiles","basePath","launchUpload","blobFile","getBuildFileUploadOptions","uploadOptions","uploadBlobFile","launchOnlineBuild","exportState","userProfile","uploadBucketKey","getAuthorizationHeader","profile","buildCordovaAndroid","uid","reject","zipJsLoaded","zipJsLoadingPromise","initializeZipJs","zip","loadScript","PUBLIC_URL","workerScripts","deflater","inflater","browserOnlineElectronExportPipeline","targets","buildElectron","browserOnlineWebExportPipeline","buildWeb","browserHTML5ExportPipeline","renderDoneFooter","compressionOutput","renderGameButton","blob","blobDownloadUrl","fullWidth","body","document","a","createElement","appendChild","style","display","href","download","click","removeChild","openBlobDownloadUrl","browserCordovaExportPipeline","browserElectronExportPipeline","browserCocos2dExportPipeline","debugMode","updateExportState","onToggle","e","check","prevState","toggled","labelPosition","exportWholeCocos2dProject","browserFacebookInstantGamesExportPipeline","jsExtensions","extensionModule","require","objectsRenderingServiceModules","makeExtensionsLoader","objectsEditorService","objectsRenderingService","filterExamples","loadAllExtensions","filter","includes","registerEditorConfigurations","requirePath","registerModule","registerInstanceRenderers","extensionModulePath","loadExtension","JsPlatform","get","DEVELOPER_KEY","DISCOVERY_DOCS","SCOPE","apisLoaded","apisLoadingPromise","initializeApis","gapi","load","callback","auth2LoadPromise","auth2","init","apiKey","clientId","discoveryDocs","scope","client","setApiKey","driveLoadPromise","onerror","isAuthenticated","authenticate","googleAuth","getAuthInstance","isSignedIn","currentUser","listen","authenticated","signIn","googleUser","getAuthResponse","patchJsonFile","fileId","content","method","headers","Headers","Authorization","access_token","res","showFilePicker","selectFolderEnabled","showUploadView","google","picker","pickerBuilder","PickerBuilder","addView","DocsView","setIncludeFolders","setSelectFolderEnabled","setOAuthToken","setDeveloperKey","setAppId","setCallback","data","Response","ACTION","Action","PICKED","doc","DOCUMENTS","id","Document","ID","NAME","parentId","PARENT_ID","TYPE","Type","LOCATION","MIME_TYPE","type","dispose","CANCEL","DocsUploadView","build","setVisible","pickerElements","getElementsByClassName","i","zIndex","internalName","renderIcon","getFileMetadataFromAppArguments","appArguments","googleDriveState","JSON","parse","ids","createOperations","setDialog","closeDialog","doesInitialOpenRequireUserInteraction","fileMetadata","fileContent","ex","onOpenWithPicker","googleDriveFileOrFolder","onSaveProject","serializeToJSON","wasSaved","onSaveProjectAs","onShowFilePicker","onCancel","onSave","selectedFileOrFolder","newFileName","createNewJsonFile","drive","files","create","uploadType","parents","mimeType","fields","apiResponse","newFileId","getOpenErrorMessage","memo","d","pathPosix","posix","_textFiles","_filesToDownload","pathPrefix","Object","keys","filePathOrURL","baseDirectoryOrURL","substring","upperCaseFilePath","normalizedFilePath","addSearchParameterToUrl","urlEncodedParameterName","urlEncodedValue","separator","eachCallback","array","done","index","callNextCallback","count","urlWithParameters","downloadedBlobs","zipJs","zippedFilesCount","totalFilesCount","createWriter","BlobWriter","zipWriter","BlobReader","TextReader","close","styles","container","position","width","button","marginLeft","textField","flex","TextField","floatingLabelText","floatingLabelFixed","hintText","value","onChange","RaisedButton","onOpenPicker","setSelectedFileOrFolder","setNewFileName","saving","setSaving","saveError","setSaveError","pickerError","setPickerError","dialogHidden","hideDialog","canCancel","Dialog","FlatButton","disabled","LeftLoader","isLoading","canSave","maxWidth","GoogleDriveFileOrFolderPicker","event","AlertMessage","getBrowserExporters","helpPage","description","exportPipeline","advanced","experimental","BlobDownloadUrlHolder","children","setBlobDownloadUrl","URL","revokeObjectURL","createObjectURL","params","getSignedUrl","contentType","signedUrl","axios","put","GDevelopGamePreviews","baseUrl","maxContentLength","Infinity","onUploadProgress","progressEvent","total","loaded","hiddenInOpenDialog","hiddenInSaveDialog","POSITIONAL_ARGUMENTS_KEY","internalExampleFiles","exampleNames","ExamplesInformation","BrowserExamples","ExamplesList","onCreateFromExample","exampleName","BetaIntroDialog","_onOpenWebsite","Window","openExternalURL","ResponsiveWindowMeasurer","windowWidth","Text","editors","edit","sendExternalEditorOpened","showMessageBox","makeBrowserS3EventsFunctionCodeWriter","onWriteFile","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","includeFile","writeBehaviorCode","behaviorCodeNamespace","DownloadSaveAsDialog","_download","stringify","serializeToJSObject","uri","encodeURI","downloadLink","onDone","SvgIcon","Dropbox","OneDrive","BrowserResourceFetcher","getResourcesToFetch","fetchResources","resourceNames","fetchedResources","erroredResources","authentification","setUpContextMenu","app","getArguments","Providers","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","ProjectStorageProviders","storageProviders","GoogleDriveStorageProvider","DropboxStorageProvider","OneDriveStorageProvider","DownloadFileStorageProvider","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","MainFrame","renderPreviewLauncher","renderExportDialog","ExportDialog","exporters","allExportersRequireOnline","renderCreateDialog","CreateProjectDialog","examplesComponent","startersComponent","introDialog","resourceSources","browserResourceSources","resourceExternalEditors","browserResourceExternalEditors","extensionsLoader","ObjectsEditorService","ObjectsRenderingService","isDev"],"mappings":"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","file":"static/js/browser-app.0ddf586f.chunk.js","sourcesContent":["// @flow\nimport { getIDEVersion } from '../Version';\n\ntype FileSet =\n  | 'preview'\n  | 'cordova'\n  | 'electron'\n  | 'web'\n  | 'cocos2d-js'\n  | 'facebook-instant-games';\n\nconst filesToDownload: { [FileSet]: Array<string> } = {\n  preview: ['/Runtime/index.html'],\n  web: ['/Runtime/index.html'],\n  'cocos2d-js': [\n    '/Runtime/Cocos2d/cocos2d-js-v3.10.js',\n    '/Runtime/Cocos2d/index.html',\n    '/Runtime/Cocos2d/main.js',\n    '/Runtime/Cocos2d/project.json',\n  ],\n  'facebook-instant-games': [\n    '/Runtime/FacebookInstantGames/fbapp-config.json',\n    '/Runtime/FacebookInstantGames/index.html',\n  ],\n  cordova: [\n    '/Runtime/Cordova/www/index.html',\n    '/Runtime/Cordova/config.xml',\n    '/Runtime/Cordova/package.json',\n  ],\n  electron: [\n    '/Runtime/index.html',\n    '/Runtime/Electron/main.js',\n    '/Runtime/Electron/package.json',\n  ],\n};\n\nexport type TextFileDescriptor = {| text: string, filePath: string |};\n\nexport const findGDJS = (\n  fileSet: FileSet\n): Promise<{|\n  gdjsRoot: string,\n  filesContent: Array<TextFileDescriptor>,\n|}> => {\n  // Get GDJS for this version. If you updated the version,\n  // run `newIDE/web-app/scripts/deploy-GDJS-Runtime` script.\n  const gdjsRoot = `https://resources.gdevelop-app.com/GDJS-${getIDEVersion()}`;\n\n  return Promise.all(\n    filesToDownload[fileSet].map(relativeFilePath => {\n      const url = gdjsRoot + relativeFilePath;\n\n      // Don't do any caching, rely on the browser cache only.\n      return fetch(url).then(response => {\n        if (!response.ok) {\n          console.error(`Error while downloading \"${url}\"`, response);\n          throw new Error(\n            `Error while downloading \"${url}\" (status: ${response.status})`\n          );\n        }\n        return response.text().then(text => ({\n          filePath: url,\n          text,\n        }));\n      });\n    })\n  ).then(filesContent => {\n    return {\n      gdjsRoot,\n      filesContent,\n    };\n  });\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport React, { Component } from 'react';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport RaisedButton from '../UI/RaisedButton';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport ListIcon from '../UI/ListIcon';\nimport Text from '../UI/Text';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport InternalFileStorageProvider from '../ProjectsStorage/InternalFileStorageProvider';\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onShowExamples: () => void,\n|};\n\nexport default class BrowserStarters extends Component<Props> {\n  render() {\n    return (\n      <Column noMargin>\n        <Line>\n          <Column>\n            <Text>\n              <Trans>Choose a game to use as a starter:</Trans>\n            </Text>\n          </Column>\n        </Line>\n        <Line>\n          <Column expand noMargin>\n            <List>\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/platformer.png\"\n                  />\n                }\n                primaryText={<Trans>Platformer</Trans>}\n                secondaryText={\n                  <Trans>\n                    A simple platform game, with coins to collect, moving\n                    platforms and enemies.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('platformer');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://platformer',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/space-shooter.png\"\n                  />\n                }\n                primaryText={<Trans>8-bit Space Shooter</Trans>}\n                secondaryText={\n                  <Trans>\n                    A beautiful, retro side-scrolling shooter where you must\n                    defeat incoming enemies with your mecha transforming\n                    spaceship. Huge boss included!\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('space-shooter');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://space-shooter',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/geometry-monster.png\"\n                  />\n                }\n                primaryText={<Trans>Geometry Monster</Trans>}\n                secondaryText={\n                  <Trans>\n                    A hyper casual endless game where you have to collect shapes\n                    and avoid bombs, with a progressively increasing difficulty.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('geometry-monster');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://geometry-monster',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/isometric-game.png\"\n                  />\n                }\n                primaryText={<Trans>Isometric game</Trans>}\n                secondaryText={\n                  <Trans>\n                    An example of an isometric game where you can explore a map\n                    with your character.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('isometric-game');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://isometric-game',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                  />\n                }\n                primaryText=\"Downhill Bike Racing\"\n                secondaryText={\n                  <Trans>\n                    An example of a 2D physics based game, where players have to\n                    reach the end as fast as possible.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('downhill-bike-physics-demo');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://downhill-bike-physics-demo',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon iconSize={40} src=\"res/starters_icons/pairs.png\" />\n                }\n                primaryText=\"Pairs\"\n                secondaryText={\n                  <Trans>\n                    Find all matching pairs of cards in this relaxing game. Use\n                    tweens to create smooth, natural animations with a few\n                    events.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('pairs');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://pairs',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon iconSize={40} src=\"res/starters_icons/new.png\" />\n                }\n                primaryText={<Trans>Empty game</Trans>}\n                secondaryText={<Trans>Start a new game from scratch.</Trans>}\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('');\n\n                  const project = gd.ProjectHelper.createNewGDJSProject();\n                  this.props.onCreate(project, null, null);\n                }}\n              />\n              <Subheader>\n                <Trans>Advanced</Trans>\n              </Subheader>\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/particle-effects-demo.png\"\n                  />\n                }\n                primaryText={<Trans>Particle Effects Demo</Trans>}\n                secondaryText={\n                  <Trans>\n                    A demo of various high quality particle effects (fire,\n                    magic, snow, rune spell...) that you can try and use in your\n                    game.\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('particle-effects-demo');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://particle-effects-demo',\n                  });\n                }}\n              />\n              <ListItem\n                leftIcon={\n                  <ListIcon\n                    iconSize={40}\n                    src=\"res/starters_icons/game-feel-demo.png\"\n                  />\n                }\n                primaryText={<Trans>Game Feel Demo</Trans>}\n                secondaryText={\n                  <Trans>\n                    A demo showing how to enhance the \"game feel\" of your\n                    project: VFX, shot trail, ambient sounds and SFX,\n                    screenshake, wobble...\n                  </Trans>\n                }\n                secondaryTextLines={2}\n                onClick={() => {\n                  sendNewGameCreated('game-feel-demo');\n                  this.props.onOpen(InternalFileStorageProvider, {\n                    fileIdentifier: 'example://game-feel-demo',\n                  });\n                }}\n              />\n            </List>\n            <Line alignItems=\"center\" justifyContent=\"center\">\n              <RaisedButton\n                label={<Trans>See examples</Trans>}\n                onClick={() => this.props.onShowExamples()}\n              />\n            </Line>\n          </Column>\n        </Line>\n      </Column>\n    );\n  }\n}\n","import { Trans } from '@lingui/macro';\nimport React, { Component } from 'react';\nimport FlatButton from '../UI/FlatButton';\nimport Dialog from '../UI/Dialog';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport path from 'path';\nconst gd = global.gd;\n\nclass GenericResourcesChooser extends Component {\n  state = {\n    open: false,\n    resolveWithResources: null,\n  };\n\n  chooseResources = (project, multiSelections = true): Promise<Array<any>> => {\n    return new Promise(resolve => {\n      this.setState({\n        open: true,\n        resolveWithResources: resolve,\n      });\n    });\n  };\n\n  _onChoose = (chosenResourceUrl: string) => {\n    const { resolveWithResources } = this.state;\n    if (!resolveWithResources) return;\n\n    const newResource = this.props.createNewResource();\n    newResource.setFile(chosenResourceUrl);\n    newResource.setName(path.basename(chosenResourceUrl));\n    newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n    resolveWithResources([newResource]);\n    this.setState({\n      open: false,\n      resolveWithResources: null,\n    });\n  };\n\n  _onClose = () => {\n    const { resolveWithResources } = this.state;\n    if (!resolveWithResources) return;\n\n    resolveWithResources([]);\n    this.setState({\n      open: false,\n      resolveWithResources: null,\n    });\n  };\n\n  render() {\n    // Avoid rendering the dialog if it's not opened.\n    if (!this.state.open) return null;\n\n    return (\n      <Dialog\n        title={this.props.title}\n        actions={[\n          <FlatButton\n            key=\"cancel\"\n            label={<Trans>Cancel</Trans>}\n            primary={false}\n            onClick={this._onClose}\n          />,\n        ]}\n        cannotBeDismissed={false}\n        open={this.state.open}\n        noMargin\n      >\n        <ResourceStore\n          onChoose={resource => {\n            this._onChoose(resource.url);\n          }}\n          resourceKind={this.props.resourceKind}\n        />\n      </Dialog>\n    );\n  }\n}\n\nexport default [\n  {\n    name: 'publicAudioUrlChooser',\n    displayName: 'Choose an audio file from library',\n    kind: 'audio',\n    component: class AudioResourceChooser extends React.Component {\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"audio\"\n            createNewResource={() => new gd.AudioResource()}\n            title={<Trans>Choose an audio file from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicImageUrlChooser',\n    displayName: 'Choose an image from library',\n    kind: 'image',\n    component: class ImageResourceChooser extends React.Component {\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"image\"\n            urlsAreImages\n            createNewResource={() => new gd.ImageResource()}\n            title={<Trans>Choose an image from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicFontUrlChooser',\n    displayName: 'Choose a font from library',\n    kind: 'font',\n    component: class FontResourceChooser extends React.Component {\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"font\"\n            createNewResource={() => new gd.FontResource()}\n            title={<Trans>Choose a font from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicVideoUrlChooser',\n    displayName: 'Choose a video from library',\n    kind: 'video',\n    component: class VideoResourceChooser extends React.Component {\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"video\"\n            createNewResource={() => new gd.VideoResource()}\n            title={<Trans>Choose a video from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n  {\n    name: 'publicJsonUrlChooser',\n    displayName: 'Choose a json file from library',\n    kind: 'json',\n    component: class JsonResourceChooser extends React.Component {\n      chooseResources = () => {\n        if (this._chooser) return this._chooser.chooseResources();\n      };\n      render() {\n        return (\n          <GenericResourcesChooser\n            {...this.props}\n            resourceKind=\"json\"\n            createNewResource={() => new gd.JsonResource()}\n            title={<Trans>Choose a Json File from the library</Trans>}\n            ref={chooser => (this._chooser = chooser)}\n          />\n        );\n      }\n    },\n  },\n];\n","// @flow\nimport * as React from 'react';\nimport BrowserPreviewLinkDialog from './BrowserPreviewLinkDialog';\nimport BrowserPreviewErrorDialog from './BrowserPreviewErrorDialog';\nimport BrowserS3FileSystem from '../BrowserS3FileSystem';\nimport { findGDJS } from '../../../GameEngineFinder/BrowserS3GDJSFinder';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport { getBaseUrl } from '../../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../../Utils/TimestampedId';\nconst gd: libGDevelop = global.gd;\n\ntype State = {|\n  showPreviewLinkDialog: boolean,\n  url: ?string,\n  error: ?Error,\n|};\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\nexport default class BrowserS3PreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => false;\n  canDoHotReload = () => false;\n\n  state = {\n    showPreviewLinkDialog: false,\n    url: null,\n    error: null,\n  };\n\n  _openPreviewWindow = (project: gdProject, url: string): any => {\n    const windowObjectReference = window.open(url, `_blank`);\n    return {\n      url,\n      windowObjectReference,\n    };\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS('preview').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const prefix = makeTimestampedId();\n\n      const outputDir = getBaseUrl() + prefix;\n      const browserS3FileSystem = new BrowserS3FileSystem({\n        filesContent,\n        bucketBaseUrl: getBaseUrl(),\n        prefix,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        browserS3FileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      exporter.setCodeOutputDirectory(outputDir);\n\n      return {\n        exporter,\n        outputDir,\n        browserS3FileSystem,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n    this.setState({\n      error: null,\n    });\n\n    return this._prepareExporter()\n      .then(({ exporter, outputDir, browserS3FileSystem }) => {\n        const previewExportOptions = new gd.PreviewExportOptions(\n          project,\n          outputDir\n        );\n        previewExportOptions.setLayoutName(layout.getName());\n        if (externalLayout) {\n          previewExportOptions.setExternalLayoutName(externalLayout.getName());\n        }\n\n        // Scripts generated from extensions keep the same URL even after being modified.\n        // Use a cache bursting parameter to force the browser to reload them.\n        previewExportOptions.setNonRuntimeScriptsCacheBurst(Date.now());\n\n        exporter.exportProjectForPixiPreview(previewExportOptions);\n        previewExportOptions.delete();\n        exporter.delete();\n        return browserS3FileSystem\n          .uploadPendingObjects()\n          .then(() => {\n            const finalUrl = outputDir + '/index.html';\n            return this._openPreviewWindow(project, finalUrl);\n          })\n          .then(({ url, windowObjectReference }) => {\n            if (!windowObjectReference) {\n              this.setState({\n                showPreviewLinkDialog: true,\n                url,\n              });\n            }\n          });\n      })\n      .catch((error: Error) => {\n        this.setState({\n          error,\n        });\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    // Debugger server is not supported in the web-app.\n    return null;\n  }\n\n  render() {\n    const { showPreviewLinkDialog, url, error } = this.state;\n\n    if (error) {\n      return (\n        <BrowserPreviewErrorDialog\n          error={error}\n          onClose={() =>\n            this.setState({\n              error: null,\n            })\n          }\n        />\n      );\n    }\n\n    if (showPreviewLinkDialog) {\n      return (\n        <BrowserPreviewLinkDialog\n          url={url}\n          onClose={() =>\n            this.setState({\n              showPreviewLinkDialog: false,\n            })\n          }\n        />\n      );\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { showErrorBox } from '../../../UI/Messages/MessageBox';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\n\ntype Props = {|\n  url: ?string,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewLinkDialog extends Component<Props> {\n  _makeOnOpen = (i18n: I18nType) => () => {\n    const windowObjectReference = window.open(this.props.url, '_blank');\n    if (!windowObjectReference) {\n      showErrorBox({\n        message: i18n._(\n          t`Unable to open the preview! Be sure that popup are allowed for this website.`\n        ),\n        rawError: undefined,\n        errorId: 'preview-popup-disallowed',\n      });\n    }\n    this.props.onClose();\n  };\n\n  render() {\n    const { url } = this.props;\n    if (!url) return null;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"launch-preview\"\n                label={<Trans>Launch the preview</Trans>}\n                primary\n                onClick={this._makeOnOpen(i18n)}\n              />,\n            ]}\n            cannotBeDismissed={true}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Your preview is ready! Click on the button to launch the\n                    preview.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    To skip this dialog and{' '}\n                    <b>directly open the preview next time</b>, please allow\n                    popups to be opened for this website in your browser.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport React, { Component } from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport { Column, Line } from '../../../UI/Grid';\nimport Text from '../../../UI/Text';\n\ntype Props = {|\n  error: Error,\n  onClose: () => void,\n|};\n\nexport default class BrowserPreviewErrorDialog extends Component<Props> {\n  render() {\n    const { error, onClose } = this.props;\n\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Dialog\n            actions={[\n              <FlatButton\n                key=\"close\"\n                label={<Trans>Close</Trans>}\n                onClick={onClose}\n              />,\n            ]}\n            title={<Trans>Could not launch the preview</Trans>}\n            cannotBeDismissed={false}\n            onRequestClose={onClose}\n            open\n          >\n            <Line>\n              <Column>\n                <Text>\n                  {// $FlowFixMe - AWS returned errors can have extra fields\n                  error.code === 'NetworkingError' ? (\n                    <Trans>\n                      The preview could not be launched because you're offline.\n                    </Trans>\n                  ) : (\n                    <Trans>\n                      The preview could not be launched because an error\n                      happened: {error.message}.\n                    </Trans>\n                  )}\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>\n                    Make sure you're online, have a proper internet connection\n                    and try again. If you download and use GDevelop desktop\n                    application, you can also run previews without any internet\n                    connection.\n                  </Trans>\n                </Text>\n              </Column>\n            </Line>\n          </Dialog>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\nimport path from 'path';\nimport { uploadObject } from '../../Utils/GDevelopServices/Preview';\nconst gd: libGDevelop = global.gd;\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\ntype PendingUploadFileDescriptor = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\ntype ConstructorArgs = {|\n  filesContent: Array<TextFileDescriptor>,\n  prefix: string,\n  bucketBaseUrl: string,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.substr(0, 7) === 'http://' ||\n    filename.substr(0, 8) === 'https://' ||\n    filename.substr(0, 6) === 'ftp://'\n  );\n};\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop previews.\n */\nexport default class BrowserS3FileSystem {\n  prefix: string;\n  bucketBaseUrl: string;\n\n  // Store the content of some files.\n  _indexedFilesContent: { [string]: TextFileDescriptor };\n\n  // Store all the objects that should be written on the S3 bucket.\n  // Call uploadPendingObjects to send them\n  _pendingUploadObjects: Array<PendingUploadFileDescriptor> = [];\n\n  // Store a set of all external URLs copied so that we can simulate\n  // readDir result.\n  _allCopiedExternalUrls = new Set<string>();\n\n  constructor({ filesContent, prefix, bucketBaseUrl }: ConstructorArgs) {\n    this.prefix = prefix;\n    this.bucketBaseUrl = bucketBaseUrl;\n\n    this._indexedFilesContent = {};\n    filesContent.forEach(textFileDescriptor => {\n      this._indexedFilesContent[\n        textFileDescriptor.filePath\n      ] = textFileDescriptor;\n    });\n  }\n\n  uploadPendingObjects = () => {\n    return Promise.all(this._pendingUploadObjects.map(uploadObject)).then(\n      result => {\n        console.log('Uploaded all objects:', result);\n        this._pendingUploadObjects = [];\n      },\n      error => {\n        console.error(\"Can't upload all objects:\", error);\n        throw error;\n      }\n    );\n  };\n\n  mkDir = (path: string) => {\n    // Assume required directories always exist.\n  };\n  dirExists = (path: string) => {\n    // Assume required directories always exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Assume path is cleared.\n  };\n  getTempDir = () => {\n    return '/virtual-unused-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return fullpath;\n\n    return path.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    if (isURL(fullpath)) return '';\n\n    return path.dirname(fullpath);\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path.resolve(baseDirectory, path.normalize(filename));\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path.relative(baseDirectory, path.normalize(filename));\n  };\n  isAbsolute = (fullpath: string) => {\n    if (isURL(fullpath)) return true;\n\n    if (fullpath.length === 0) return true;\n    return (\n      (fullpath.length > 0 && fullpath.charAt(0) === '/') ||\n      (fullpath.length > 1 && fullpath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    //URL are not copied.\n    if (isURL(source)) {\n      this._allCopiedExternalUrls.add(source);\n      return true;\n    }\n\n    console.warn('Copy not done from', source, 'to', dest);\n    return true;\n  };\n  writeToFile = (fullPath: string, contents: string) => {\n    const key = fullPath.replace(this.bucketBaseUrl, '');\n    const mime = {\n      '.js': 'text/javascript',\n      '.html': 'text/html',\n    };\n    const fileExtension = path.extname(fullPath);\n\n    // Defer real upload until it's triggered by calling\n    // uploadPendingObjects.\n    this._pendingUploadObjects.push({\n      Key: key,\n      Body: contents,\n      ContentType: mime[fileExtension],\n    });\n    return true;\n  };\n\n  readFile = (file: string) => {\n    if (!!this._indexedFilesContent[file])\n      return this._indexedFilesContent[file].text;\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    this._allCopiedExternalUrls.forEach(url => {\n      const upperCaseUrl = url.toUpperCase();\n      if (upperCaseUrl.indexOf(ext) === upperCaseUrl.length - ext.length) {\n        output.push_back(url);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filename: string) => {\n    if (isURL(filename)) return true;\n\n    // Assume all files asked for exists.\n    return true;\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineCordovaExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-cordova',\n  onlineBuildType: 'cordova-build',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey\n    );\n  },\n};\n","// @flow\nimport { loadScript } from '../LoadScript';\n\nconst PUBLIC_URL: string = process.env.PUBLIC_URL || '';\nconst ZIPJS_EXTERNAL_PATH = '/external/zip.js/WebContent';\nconst ZLIBASM_EXTERNAL_PATH = '/external/zlib-asm';\n\nlet zipJsLoaded = false;\nlet zipJsLoadingPromise: ?Promise<ZipJs> = null;\n\n/**\n * Initialize Zip.js, resolving with the instance of it.\n * Promise will be rejected if there is an error while loading Zip.js\n * (call initializeZipJs again to retry).\n */\nexport const initializeZipJs = (): Promise<ZipJs> => {\n  if (zipJsLoaded) {\n    const zip: ZipJs = global.zip;\n    return Promise.resolve(zip);\n  }\n\n  if (zipJsLoadingPromise) {\n    return zipJsLoadingPromise;\n  }\n\n  zipJsLoadingPromise = loadScript(\n    PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zip.js'\n  ).then(() => {\n    const zip: ?ZipJs = global.zip;\n    if (!zip) {\n      throw new Error(\n        'Can not find \"zip\" in the global namespace after loading zip.js. Has the zip.js script being loaded properly?'\n      );\n    }\n\n    zipJsLoadingPromise = null;\n    zipJsLoaded = true;\n\n    zip.workerScripts = {\n      deflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n      inflater: [\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/z-worker.js',\n        PUBLIC_URL + ZLIBASM_EXTERNAL_PATH + '/zlib.js',\n        PUBLIC_URL + ZIPJS_EXTERNAL_PATH + '/zlib-asm/codecs.js',\n      ],\n    };\n    return zip;\n  });\n\n  return zipJsLoadingPromise;\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-electron',\n  onlineBuildType: 'electron-build',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadBlobFile } from './BrowserFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    blobFile: Blob\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadBlobFile(\n        blobFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, profile.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nconst openBlobDownloadUrl = (url: string, filename: string) => {\n  const { body } = document;\n  if (!body) return;\n\n  // Not using Window.openExternalURL because blob urls are blocked\n  // by Adblock Plus (and maybe other ad blockers).\n  const a = document.createElement('a');\n  body.appendChild(a);\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  a.click();\n  body.removeChild(a);\n};\n\nexport const browserHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-html5',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('web').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cordova').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('electron').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/Cocos2dExport';\nimport { openBlobDownloadUrl } from '.';\nimport { Column, Line } from '../../UI/Grid';\nimport Toggle from '../../UI/Toggle';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  debugMode: boolean,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserCocos2dExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-cocos2d',\n\n  getInitialExportState: () => ({\n    debugMode: false,\n  }),\n\n  canLaunchBuild: () => true,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <Toggle\n          onToggle={(e, check) =>\n            updateExportState(prevState => ({\n              ...prevState,\n              debugMode: check,\n            }))\n          }\n          toggled={exportState.debugMode}\n          labelPosition=\"right\"\n          label={\n            <Trans>\n              Debug mode (show FPS counter and stats in the bottom left)\n            </Trans>\n          }\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('cocos2d-js').then(({ gdjsRoot, filesContent }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const outputDir = '/export/';\n      const abstractFileSystem = new BrowserFileSystem({\n        textFiles: filesContent,\n      });\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        abstractFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        outputDir,\n        abstractFileSystem,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    exporter.exportWholeCocos2dProject(\n      context.project,\n      context.exportState.debugMode,\n      outputDir\n    );\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                fullWidth\n                primary\n                onClick={() => openBlobDownloadUrl(blobDownloadUrl, 'game.zip')}\n                label={<Trans>Download the exported game</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport { findGDJS } from '../../GameEngineFinder/BrowserS3GDJSFinder';\nimport BrowserFileSystem from './BrowserFileSystem';\nimport {\n  type UrlFileDescriptor,\n  type TextFileDescriptor,\n  type BlobFileDescriptor,\n  downloadUrlsToBlobs,\n  archiveFiles,\n} from '../../Utils/BrowserArchiver';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { BlobDownloadUrlHolder } from '../../Utils/BlobDownloadUrlHolder';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { openBlobDownloadUrl } from '.';\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  abstractFileSystem: BrowserFileSystem,\n  outputDir: string,\n|};\n\ntype ExportOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n|};\n\ntype CompressionOutput = Blob;\n\nexport const browserFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'browser-facebook-instant-games',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS('facebook-instant-games').then(\n      ({ gdjsRoot, filesContent }) => {\n        console.info('GDJS found in ', gdjsRoot);\n\n        const outputDir = '/export/';\n        const abstractFileSystem = new BrowserFileSystem({\n          textFiles: filesContent,\n        });\n        // TODO: Memory leak? Check for other exporters too.\n        const fileSystem = assignIn(\n          new gd.AbstractFileSystemJS(),\n          abstractFileSystem\n        );\n        const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n        return {\n          exporter,\n          outputDir,\n          abstractFileSystem,\n        };\n      }\n    );\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, outputDir, abstractFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const { project } = context;\n\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(project, outputDir, exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({\n      textFiles: abstractFileSystem.getAllTextFilesIn(outputDir),\n      urlFiles: abstractFileSystem.getAllUrlFilesIn(outputDir),\n    });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return downloadUrlsToBlobs({\n      urlFiles,\n      onProgress: context.updateStepProgress,\n    }).then(blobFiles => ({\n      blobFiles,\n      textFiles,\n    }));\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { textFiles, blobFiles }: ResourcesDownloadOutput\n  ): Promise<Blob> => {\n    return archiveFiles({\n      blobFiles,\n      textFiles,\n      basePath: '/export/',\n      onProgress: context.updateStepProgress,\n    });\n  },\n\n  renderDoneFooter: ({ compressionOutput, exportState, onClose }) => {\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <BlobDownloadUrlHolder blob={compressionOutput}>\n            {blobDownloadUrl => (\n              <RaisedButton\n                primary\n                onClick={() =>\n                  openBlobDownloadUrl(blobDownloadUrl, 'fb-instant-game.zip')\n                }\n                label={<Trans>Download the Instant Game archive</Trans>}\n              />\n            )}\n          </BlobDownloadUrlHolder>\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport {\n  type JsExtensionsLoader,\n  type ExtensionLoadingResult,\n  type TranslationFunction,\n  loadExtension,\n} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\nconst gd: libGDevelop = global.gd;\n\n// The list of \"JsExtension.js\" files to be bundled in the webapp, keyed by their extension name.\nconst jsExtensions = [\n  {\n    name: 'AdMob',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/AdMob/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FacebookInstantGames',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FacebookInstantGames/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceSensors',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceSensors/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DeviceVibration',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DeviceVibration/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Physics2',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Physics2Behavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'ExampleJsExtension',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/ExampleJsExtension/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Tween',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TweenBehavior/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Video',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Video/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'FileSystem',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/FileSystem/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Firebase',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Firebase/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'DialogueTree',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/DialogueTree/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'BBText',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/BBText/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-multistyle-text/dist/pixi-multistyle-text.umd': require('GDJS-for-web-app-only/Runtime/Extensions/BBText/pixi-multistyle-text/dist/pixi-multistyle-text.umd'),\n    },\n  },\n  {\n    name: 'TileMap',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/JsExtension.js'),\n    objectsRenderingServiceModules: {\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap/dist/pixi-tilemap.umd': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap/dist/pixi-tilemap.umd'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pixi-tilemap-helper': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pixi-tilemap-helper'),\n      // $FlowExpectedError - this path is ignored for Flow.\n      'pako/dist/pako.min': require('GDJS-for-web-app-only/Runtime/Extensions/TileMap/pako/dist/pako.min'),\n    },\n  },\n  {\n    name: 'Effects',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Effects/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'P2P',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/P2P/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'Lighting',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/Lighting/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n  {\n    name: 'SpatialSound',\n    // $FlowExpectedError - this path is ignored for Flow.\n    extensionModule: require('GDJS-for-web-app-only/Runtime/Extensions/SpatialSound/JsExtension.js'),\n    objectsRenderingServiceModules: {},\n  },\n];\n\ntype MakeExtensionsLoaderArguments = {|\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n\n/**\n * Loader that load all JS extensions required in this file.\n * Extensions are usually auto-discovered when declared in Extensions/xxx/JsExtension.js, but not\n * for the web-app where everything must be bundled.\n */\nexport default function makeExtensionsLoader({\n  objectsEditorService,\n  objectsRenderingService,\n  filterExamples,\n}: MakeExtensionsLoaderArguments): JsExtensionsLoader {\n  return {\n    loadAllExtensions(\n      _: TranslationFunction\n    ): Promise<\n      Array<{ extensionModulePath: string, result: ExtensionLoadingResult }>\n    > {\n      return Promise.resolve(\n        jsExtensions\n          .filter(({ name }) => !filterExamples || !name.includes('Example'))\n          .map(({ name, extensionModule, objectsRenderingServiceModules }) => {\n            // Load any editor for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsEditorService &&\n              extensionModule.registerEditorConfigurations\n            ) {\n              extensionModule.registerEditorConfigurations(\n                objectsEditorService\n              );\n            }\n\n            // Register modules for ObjectsRenderingService\n            if (objectsRenderingService && objectsRenderingServiceModules) {\n              for (let requirePath in objectsRenderingServiceModules) {\n                objectsRenderingService.registerModule(\n                  requirePath,\n                  objectsRenderingServiceModules[requirePath]\n                );\n              }\n            }\n\n            // Load any renderer for objects, if we have somewhere where\n            // to register them.\n            if (\n              objectsRenderingService &&\n              extensionModule.registerInstanceRenderers\n            ) {\n              extensionModule.registerInstanceRenderers(\n                objectsRenderingService\n              );\n            }\n\n            return {\n              extensionModulePath: 'internal-extension://' + name,\n              result: loadExtension(\n                _,\n                gd,\n                gd.JsPlatform.get(),\n                extensionModule\n              ),\n            };\n          })\n      );\n    },\n  };\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport { serializeToJSON } from '../../Utils/Serializer';\nimport GoogleDrive from '../../UI/CustomSvgIcons/GoogleDrive';\nimport GoogleDriveSaveAsDialog from './GoogleDriveSaveAsDialog';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport { type AppArguments } from '../../Utils/Window';\nimport { loadScript } from '../../Utils/LoadScript';\nconst isDev = process.env.NODE_ENV === 'development';\n\nconst DEVELOPER_KEY = isDev\n  ? 'AIzaSyDH3UNpxzIpcTyd6aMCWI5oNFSptG_BhOc'\n  : 'AIzaSyDJYQmzLCfjXnNImDa1X_cDTWjl2BOrcM4';\nconst CLIENT_ID = isDev\n  ? '28563107180-bd29h9f3og4h1632m94nv6hat2igrej6.apps.googleusercontent.com'\n  : '44882707384-3t4tubr3fbht87sbtdp7u5mlo45k5uku.apps.googleusercontent.com';\nconst APP_ID = isDev ? '28563107180' : '44882707384'; // This is the first part of CLIENT_ID.\nconst DISCOVERY_DOCS = [\n  'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest',\n];\nconst SCOPE =\n  'https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.install';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Google Drive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = loadScript('https://apis.google.com/js/api:client.js')\n    .then(() => {\n      const gapi = global.gapi;\n      if (!gapi) {\n        throw new Error(\n          'No gapi global object found after loading Google Drive API script'\n        );\n      }\n\n      return new Promise((resolve, reject) => {\n        gapi.load('client:auth2:picker', {\n          callback: () => {\n            const auth2LoadPromise = gapi.auth2.init({\n              apiKey: DEVELOPER_KEY,\n              clientId: CLIENT_ID,\n              discoveryDocs: DISCOVERY_DOCS,\n              scope: SCOPE,\n            });\n\n            gapi.client.setApiKey(DEVELOPER_KEY);\n            const driveLoadPromise = gapi.client.load('drive', 'v3');\n\n            resolve(Promise.all([auth2LoadPromise, driveLoadPromise]));\n          },\n          onerror: () => {\n            reject(\n              new Error(\n                'Unable to load auth2 and picker APIs for Google Drive.'\n              )\n            );\n          },\n        });\n      });\n    })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Google Drive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype GoogleUser = {\n  getAuthResponse: () => { access_token: string, error?: ?Error },\n};\n\nlet isAuthenticated = false;\n\n/**\n * Sign in the user to Google Drive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<GoogleUser> => {\n  return initializeApis().then(() => {\n    const gapi = global.gapi;\n    const googleAuth = gapi.auth2.getAuthInstance();\n    if (isAuthenticated && googleAuth.isSignedIn.get()) {\n      return googleAuth.currentUser.get();\n    }\n\n    isAuthenticated = false;\n    googleAuth.isSignedIn.listen(authenticated => {\n      console.info('Authenticated with Google APIs: ', authenticated);\n      isAuthenticated = authenticated;\n    });\n    return googleAuth\n      .signIn({ scope: SCOPE })\n      .then((googleUser: GoogleUser) => {\n        if (\n          !googleUser.getAuthResponse() ||\n          googleUser.getAuthResponse().error\n        ) {\n          console.error(\n            'OAuth2 error while sign in:',\n            googleUser.getAuthResponse()\n              ? googleUser.getAuthResponse().error\n              : 'No AuthResponse'\n          );\n          throw new Error('Authentication error');\n        }\n\n        isAuthenticated = true;\n        return googleUser;\n      });\n  });\n};\n\n/**\n * Update a JSON file, given its file id.\n */\nexport const patchJsonFile = (\n  fileId: string,\n  googleUser: GoogleUser,\n  content: string\n): Promise<void> => {\n  return fetch(`https://www.googleapis.com/upload/drive/v3/files/${fileId}`, {\n    method: 'PATCH',\n    headers: new Headers({\n      Authorization: `Bearer ${googleUser.getAuthResponse().access_token}`,\n      'Content-Type': 'application/json',\n    }),\n    body: content,\n  }).then(res => {\n    if (res.status !== 200) {\n      if (res.status === 401) {\n        isAuthenticated = false;\n      }\n\n      throw res;\n    }\n  });\n};\n\n/**\n * Create a new empty JSON file, returning its fileid.\n */\nexport const createNewJsonFile = (\n  parentId: string,\n  name: string\n): Promise<string> => {\n  const gapi = global.gapi;\n\n  return gapi.client.drive.files\n    .create({\n      'content-type': 'application/json',\n      uploadType: 'multipart',\n      name: name,\n      parents: [parentId],\n      mimeType: 'application/json',\n      fields: 'id, name, kind, size',\n    })\n    .then(apiResponse => {\n      return apiResponse.result.id;\n    });\n};\n\n/**\n * Information about a file or folder picked by the user.\n */\nexport type GoogleDriveFileOrFolder =\n  | {|\n      type: 'FOLDER',\n      id: string,\n      name: string,\n    |}\n  | {|\n      type: 'FILE',\n      id: string,\n      name: string,\n      parentId: string,\n    |};\n\nexport type GoogleDriveFilePickerOptions = {|\n  selectFolderEnabled: boolean,\n  showUploadView: boolean,\n|};\n\n/**\n * Display a file picker as a modal, resolving with the selected file or folder,\n * if any.\n *\n * The picker dialog is not playing nice with material-ui dialogs or overlays. They should\n * not be displayed when the picker is on screen.\n */\nconst showFilePicker = ({\n  selectFolderEnabled,\n  showUploadView,\n}: GoogleDriveFilePickerOptions): Promise<?GoogleDriveFileOrFolder> => {\n  return authenticate().then(googleUser => {\n    const google = global.google;\n\n    return new Promise(resolve => {\n      let picker = null;\n      const pickerBuilder = new google.picker.PickerBuilder()\n        .addView(\n          new google.picker.DocsView()\n            .setIncludeFolders(true)\n            .setSelectFolderEnabled(selectFolderEnabled)\n        )\n        .setOAuthToken(googleUser.getAuthResponse().access_token)\n        .setDeveloperKey(DEVELOPER_KEY)\n        .setAppId(APP_ID) // App ID is required to correctly identify files created with the app.\n        .setCallback(data => {\n          if (\n            data[google.picker.Response.ACTION] === google.picker.Action.PICKED\n          ) {\n            const doc = data[google.picker.Response.DOCUMENTS][0];\n            const id: string = doc[google.picker.Document.ID];\n            const name: string = doc[google.picker.Document.NAME];\n            const parentId: string = doc[google.picker.Document.PARENT_ID];\n            if (\n              doc[google.picker.Document.TYPE] ===\n                google.picker.Type.LOCATION ||\n              doc[google.picker.Document.MIME_TYPE] ===\n                'application/vnd.google-apps.folder'\n            ) {\n              resolve({ id, name, type: 'FOLDER' });\n            } else {\n              resolve({ id, name, type: 'FILE', parentId });\n            }\n            if (picker) picker.dispose();\n          } else if (\n            data[google.picker.Response.ACTION] === google.picker.Action.CANCEL\n          ) {\n            resolve(null);\n            if (picker) picker.dispose();\n          }\n        });\n      if (showUploadView) {\n        pickerBuilder.addView(\n          new google.picker.DocsUploadView().setIncludeFolders(true)\n        );\n      }\n\n      picker = pickerBuilder.build();\n\n      picker.setVisible(true);\n      const pickerElements = document.getElementsByClassName('picker-dialog');\n      for (var i = 0; i < pickerElements.length; ++i) {\n        pickerElements[i].style.zIndex = '5000'; // Higher than Material UI modals\n      }\n    });\n  });\n};\n\n/**\n * A storage that is using Google Drive to open and store files.\n */\nexport default ({\n  internalName: 'GoogleDrive',\n  name: t`Google Drive`,\n  renderIcon: () => <GoogleDrive />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (appArguments.state) {\n      try {\n        // See \"state\" argument passed by Google Drive API:\n        // https://developers.google.com/drive/api/v3/enable-sdk#construct\n        const googleDriveState = JSON.parse(appArguments.state);\n        if (googleDriveState.ids && googleDriveState.ids[0]) {\n          return {\n            fileIdentifier: googleDriveState.ids[0],\n          };\n        }\n      } catch (e) {\n        console.warn(\n          \"Error while trying to parse the Google Drive 'ids' in 'state' from the app arguments.\"\n        );\n      }\n    }\n\n    return null;\n  },\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {\n      // Ignore error as we'll retry later.\n    });\n\n    return {\n      doesInitialOpenRequireUserInteraction: true, // Authentication will open a popup, requiring user interaction\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        return authenticate()\n          .then(googleUser =>\n            fetch(\n              `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,\n              {\n                method: 'GET',\n                headers: new Headers({\n                  Authorization: `Bearer ${\n                    googleUser.getAuthResponse().access_token\n                  }`,\n                }),\n              }\n            )\n          )\n          .then(\n            response => {\n              return response.text().then(\n                fileContent => {\n                  return new Promise((resolve, reject) => {\n                    try {\n                      const dataObject = JSON.parse(fileContent);\n                      return resolve({\n                        content: dataObject,\n                      });\n                    } catch (ex) {\n                      return reject(fileId + ' is a corrupted/malformed file.');\n                    }\n                  });\n                },\n                error => {\n                  console.error(\n                    'Error while reading the file from Google Drive API: ',\n                    error\n                  );\n                  throw error;\n                }\n              );\n            },\n            error => {\n              console.error(\n                'Error while fetching the file from Google Drive API: ',\n                error\n              );\n              throw error;\n            }\n          );\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return authenticate()\n          .then(googleUser =>\n            showFilePicker({ selectFolderEnabled: false, showUploadView: true })\n          )\n          .then(googleDriveFileOrFolder => {\n            if (!googleDriveFileOrFolder) {\n              return null;\n            }\n\n            return {\n              fileIdentifier: googleDriveFileOrFolder.id,\n            };\n          });\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        const fileId = fileMetadata.fileIdentifier;\n\n        const content = serializeToJSON(project);\n        return authenticate()\n          .then(googleUser => patchJsonFile(fileId, googleUser, content))\n          .then(() => ({\n            wasSaved: true,\n            fileMetadata,\n          }));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return new Promise(resolve => {\n          setDialog(() => (\n            <GoogleDriveSaveAsDialog\n              onShowFilePicker={showFilePicker}\n              onCancel={() => {\n                closeDialog();\n                resolve({ wasSaved: false, fileMetadata });\n              }}\n              onSave={({ selectedFileOrFolder, newFileName }) => {\n                const content = serializeToJSON(project);\n\n                if (selectedFileOrFolder.type === 'FOLDER') {\n                  return authenticate().then(googleUser =>\n                    createNewJsonFile(\n                      selectedFileOrFolder.id,\n                      newFileName\n                    ).then(newFileId =>\n                      patchJsonFile(newFileId, googleUser, content).then(() => {\n                        closeDialog();\n                        resolve({\n                          wasSaved: true,\n                          fileMetadata: {\n                            fileIdentifier: newFileId,\n                          },\n                        });\n                      })\n                    )\n                  );\n                } else {\n                  return authenticate()\n                    .then(googleUser =>\n                      patchJsonFile(\n                        selectedFileOrFolder.id,\n                        googleUser,\n                        content\n                      )\n                    )\n                    .then(() => {\n                      closeDialog();\n                      resolve({\n                        wasSaved: true,\n                        fileMetadata: {\n                          fileIdentifier: selectedFileOrFolder.id,\n                        },\n                      });\n                    });\n                }\n              }}\n            />\n          ));\n        });\n      },\n      getOpenErrorMessage: (error: Error): MessageDescriptor => {\n        if (!apisLoaded) {\n          return t`Google Drive could not be loaded. Check that you are not offline and have a proper internet connection, then try again.`;\n        }\n\n        return t`Check that you don't have any blocked popup (if so, allow them and retry) and that you have the authorizations for reading the file you're trying to access.`;\n      },\n    };\n  },\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M7.71,3.5L1.15,15L4.58,21L11.13,9.5M9.73,15L6.3,21H19.42L22.85,15M22.28,14L15.42,2H8.58L8.57,2L15.43,14H22.28Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport path from 'path';\nconst gd: libGDevelop = global.gd;\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\ntype ConstructorArgs = {|\n  textFiles: Array<TextFileDescriptor>,\n|};\n\nconst isURL = (filename: string) => {\n  return (\n    filename.substr(0, 7) === 'http://' ||\n    filename.substr(0, 8) === 'https://' ||\n    filename.substr(0, 6) === 'ftp://'\n  );\n};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\nconst pathPosix = path.posix || path;\n\n// TODO: Merge BrowserS3FileSystem into this? The way URLs are handled\n// is different though (BrowserS3FileSystem is not downloading anything\n// from URLs, while this file system does download files).\n\n/**\n * An in-memory \"file system\" that can be used for GDevelop exports.\n */\nexport default class BrowserFileSystem {\n  // The representation of the \"file system\":\n\n  /**\n   * Store all the text files (filepath => content)\n   * @private\n   */\n  _textFiles: { [string]: string } = {};\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  /**\n   * Create a new in-memory file system.\n   */\n  constructor({ textFiles }: ConstructorArgs) {\n    textFiles.forEach(textFileDescriptor => {\n      this._textFiles[textFileDescriptor.filePath] = textFileDescriptor.text;\n    });\n  }\n\n  /**\n   * Returns all the in memory text files with the specified path prefix.\n   */\n  getAllTextFilesIn = (pathPrefix: string): Array<TextFileDescriptor> => {\n    return Object.keys(this._textFiles)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        text: this._textFiles[filePath],\n      }));\n  };\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(pathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  dirExists = (path: string) => {\n    // TODO: To be changed to be EnsureDirExists.\n    // \"Directories\" are assumed to exist.\n    return true;\n  };\n  clearDir = (path: string) => {\n    // Clear the files to be written in the specified directory.\n    const filePaths = Object.keys(this._textFiles);\n    filePaths.forEach(filePath => {\n      if (filePath.indexOf(path) === 0) {\n        delete this._textFiles[filePath];\n      }\n    });\n\n    return true;\n  };\n  getTempDir = () => {\n    return '/browser-file-system-tmp-dir';\n  };\n  fileNameFrom = (fullpath: string) => {\n    return pathPosix.basename(fullpath);\n  };\n  dirNameFrom = (fullpath: string) => {\n    return pathPosix.dirname(fullpath);\n  };\n  makeAbsolute = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    // URLs are always absolute\n    if (isURL(filePathOrURL)) return filePathOrURL;\n\n    if (!this.isAbsolute(baseDirectoryOrURL))\n      baseDirectoryOrURL = pathPosix.resolve(baseDirectoryOrURL);\n\n    return pathPosix.resolve(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  makeRelative = (filePathOrURL: string, baseDirectoryOrURL: string) => {\n    if (isURL(filePathOrURL)) {\n      // Cutting the start if the URL is relative to the base URL\n      if (filePathOrURL.indexOf(baseDirectoryOrURL) === 0) {\n        return filePathOrURL.substring(baseDirectoryOrURL.length);\n      }\n\n      // Keep the URL \"absolute\" if on different domains.\n      console.warn(\n        `${filePathOrURL} cannot be made relative to ${baseDirectoryOrURL}, please double check this behavior is correct.`\n      );\n      return filePathOrURL;\n    }\n\n    // Paths are treated as usual paths.\n    return pathPosix.relative(\n      baseDirectoryOrURL,\n      pathPosix.normalize(filePathOrURL)\n    );\n  };\n  isAbsolute = (fullpath: string) => {\n    // URLs are always absolute\n    if (isURL(fullpath)) return true;\n\n    // Paths are absolute if starting from the root\n    return fullpath.length > 0 && fullpath.charAt(0) === '/';\n  };\n\n  copyFile = (source: string, dest: string) => {\n    // URLs are not copied, but marked as to be downloaded.\n    if (isURL(source)) {\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    // If this is a file that we have already in memory,\n    // copy its path.\n    if (!!this._textFiles[source]) {\n      this._textFiles[pathPosix.normalize(dest)] = this._textFiles[source];\n      return true;\n    }\n\n    console.error(`File not found in copyFile (from ${source} to ${dest}).`);\n    return false;\n  };\n\n  writeToFile = (filePath: string, content: string) => {\n    this._textFiles[pathPosix.normalize(filePath)] = content;\n    return true;\n  };\n\n  readFile = (file: string): string => {\n    if (this._textFiles[file]) return this._textFiles[file];\n\n    console.error(`Unknown file ${file}, returning an empty string`);\n    return '';\n  };\n\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n\n    // Simulate ReadDir by returning all external URLs\n    // with the filename matching the extension.\n    Object.keys(this._filesToDownload).forEach(filePath => {\n      const upperCaseFilePath = filePath.toUpperCase();\n      if (\n        upperCaseFilePath.indexOf(ext) ===\n        upperCaseFilePath.length - ext.length\n      ) {\n        output.push_back(filePath);\n      }\n    });\n\n    return output;\n  };\n\n  fileExists = (filePath: string) => {\n    if (isURL(filePath)) return true;\n\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    return (\n      !!this._textFiles[normalizedFilePath] ||\n      !!this._filesToDownload[normalizedFilePath]\n    );\n  };\n}\n","// @flow\n\nimport { initializeZipJs } from './Zip.js';\nimport path from 'path';\n\nexport type BlobFileDescriptor = {|\n  filePath: string,\n  blob: Blob,\n|};\n\nexport type TextFileDescriptor = {|\n  filePath: string,\n  text: string,\n|};\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\nconst addSearchParameterToUrl = (\n  url: string,\n  urlEncodedParameterName: string,\n  urlEncodedValue: string\n) => {\n  const separator = url.indexOf('?') === -1 ? '?' : '&';\n  return url + separator + urlEncodedParameterName + '=' + urlEncodedValue;\n};\n\nfunction eachCallback<T>(\n  array: Array<T>,\n  callback: (T, () => void) => void,\n  done: () => void\n) {\n  if (!array.length) {\n    done();\n    return;\n  }\n  let index = 0;\n\n  const callNextCallback = () => {\n    callback(array[index], () => {\n      index++;\n      if (index >= array.length) {\n        done();\n      } else {\n        callNextCallback();\n      }\n    });\n  };\n\n  callNextCallback();\n}\n\nexport const downloadUrlsToBlobs = async ({\n  urlFiles,\n  onProgress,\n}: {|\n  urlFiles: Array<UrlFileDescriptor>,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Array<BlobFileDescriptor>> => {\n  let count = 0;\n  return Promise.all(\n    urlFiles\n      .filter(({ url }) => url.indexOf('.h') === -1) // TODO\n      .map(({ url, filePath }) => {\n        // To avoid strange/hard to understand CORS issues, we add a dummy parameter.\n        // By doing so, we force browser to consider this URL as different than the one traditionally\n        // used to render the resource in the editor (usually as an `<img>` or as a background image).\n        // If we don't add this distinct parameter, it can happen that browsers fail to load the image\n        // as it's already in the **browser cache** but with slightly different request parameters -\n        // making the CORS checks fail (even if it's coming from the browser cache).\n        //\n        // It's happening sometimes (according to loading order probably) in Chrome and (more often)\n        // in Safari. It might be linked to Amazon S3 + CloudFront that \"doesn't support the Vary: Origin header\".\n        // To be safe, we entirely avoid the issue with this parameter, making the browsers consider\n        // the resources for use in Pixi.js and for the rest of the editor as entirely separate.\n        //\n        // See:\n        // - https://stackoverflow.com/questions/26140487/cross-origin-amazon-s3-not-working-using-chrome\n        // - https://stackoverflow.com/questions/20253472/cors-problems-with-amazon-s3-on-the-latest-chomium-and-google-canary\n        // - https://stackoverflow.com/a/20299333\n        //\n        // Search for \"cors-cache-workaround\" in the codebase for the same workarounds.\n        const urlWithParameters = addSearchParameterToUrl(\n          url,\n          'gdUsage',\n          'export'\n        );\n\n        return fetch(urlWithParameters)\n          .then(\n            response => {\n              if (!response.ok) {\n                console.error(\n                  `Error while downloading \"${urlWithParameters}\"`,\n                  response\n                );\n                throw new Error(\n                  `Error while downloading \"${urlWithParameters}\" (status: ${\n                    response.status\n                  })`\n                );\n              }\n              return response.blob();\n            },\n            error => {\n              console.error(\n                `Error while downloading \"${urlWithParameters}\"`,\n                error\n              );\n              throw new Error(\n                `Error while downloading \"${urlWithParameters}\" (network error)`\n              );\n            }\n          )\n          .then(blob => {\n            count++;\n            onProgress(count, urlFiles.length);\n            return {\n              filePath,\n              blob,\n            };\n          });\n      })\n  ).then((downloadedBlobs: Array<BlobFileDescriptor>) => {\n    console.info('All downloads done');\n    return downloadedBlobs;\n  });\n};\n\n/**\n * Archive the specified blobs and texts into a zip file,\n * returned as a blob.\n */\nexport const archiveFiles = async ({\n  textFiles,\n  blobFiles,\n  basePath,\n  onProgress,\n}: {|\n  textFiles: Array<TextFileDescriptor>,\n  blobFiles: Array<BlobFileDescriptor>,\n  basePath: string,\n  onProgress: (count: number, total: number) => void,\n|}): Promise<Blob> => {\n  const zipJs: ZipJs = await initializeZipJs();\n\n  let zippedFilesCount = 0;\n  let totalFilesCount = blobFiles.length + textFiles.length;\n\n  return new Promise((resolve, reject) => {\n    zipJs.createWriter(\n      new zipJs.BlobWriter('application/zip'),\n      function(zipWriter) {\n        eachCallback(\n          blobFiles,\n          ({ filePath, blob }, done) => {\n            // All files in a zip are relative\n            const relativeFilePath = path.relative(basePath, filePath);\n\n            zipWriter.add(\n              relativeFilePath,\n              new zipJs.BlobReader(blob),\n              () => {\n                zippedFilesCount++;\n                onProgress(zippedFilesCount, totalFilesCount);\n                done();\n              },\n              () => {\n                /* We don't track progress at the file level */\n              }\n            );\n          },\n          () => {\n            eachCallback(\n              textFiles,\n              ({ filePath, text }, done) => {\n                // All files in a zip are relative\n                const relativeFilePath = path.relative(basePath, filePath);\n\n                zipWriter.add(\n                  relativeFilePath,\n                  new zipJs.TextReader(text),\n                  () => {\n                    zippedFilesCount++;\n                    onProgress(zippedFilesCount, totalFilesCount);\n                    done();\n                  },\n                  () => {\n                    /* We don't track progress at the file level */\n                  }\n                );\n              },\n              () => {\n                zipWriter.close((blob: Blob) => {\n                  resolve(blob);\n                });\n              }\n            );\n          }\n        );\n      },\n      error => {\n        console.error('Error while making zip:', error);\n        reject(error);\n      }\n    );\n  });\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport TextField from '../../UI/TextField';\nimport { type GoogleDriveFileOrFolder } from '.';\n\ntype Props = {|\n  floatingLabelText: React.Node,\n  value: ?GoogleDriveFileOrFolder,\n  onOpenPicker: () => void,\n|};\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n    width: '100%',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\nexport default (props: Props) => {\n  return (\n    <div\n      style={{\n        ...styles.container,\n      }}\n    >\n      <TextField\n        style={styles.textField}\n        floatingLabelText={props.floatingLabelText}\n        floatingLabelFixed\n        type=\"text\"\n        hintText={t`Choose a file or folder`}\n        value={props.value ? props.value.name : ''}\n        onChange={() => {}}\n      />\n      <RaisedButton\n        label={<Trans>Choose...</Trans>}\n        primary\n        style={styles.button}\n        onClick={props.onOpenPicker}\n      />\n    </div>\n  );\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport { Column, Line } from '../../UI/Grid';\nimport GoogleDriveFileOrFolderPicker from './GoogleDriveFileOrFolderPicker';\nimport {\n  type GoogleDriveFileOrFolder,\n  type GoogleDriveFilePickerOptions,\n} from '.';\nimport TextField from '../../UI/TextField';\nimport LeftLoader from '../../UI/LeftLoader';\nimport AlertMessage from '../../UI/AlertMessage';\n\ntype Props = {|\n  onCancel: () => void,\n  onSave: ({|\n    selectedFileOrFolder: GoogleDriveFileOrFolder,\n    newFileName: string,\n  |}) => Promise<void>,\n  onShowFilePicker: GoogleDriveFilePickerOptions => Promise<?GoogleDriveFileOrFolder>,\n|};\n\n/**\n * A \"Save as\" dialog for Google Drive, allowing to pick a file to overwrite or a folder\n * and a new filename where to save the game.\n */\nexport default (props: Props) => {\n  const [selectedFileOrFolder, setSelectedFileOrFolder] = React.useState(\n    (null: ?GoogleDriveFileOrFolder)\n  );\n  const [newFileName, setNewFileName] = React.useState('');\n  const [saving, setSaving] = React.useState(false);\n  const [saveError, setSaveError] = React.useState((null: ?Error));\n  const [pickerError, setPickerError] = React.useState((null: ?Error));\n  const [dialogHidden, hideDialog] = React.useState(false);\n\n  const canSave = () => {\n    if (saving) return;\n    if (!selectedFileOrFolder) return;\n\n    return selectedFileOrFolder.type === 'FOLDER' ? !!newFileName : true;\n  };\n  const save = () => {\n    if (!selectedFileOrFolder) return;\n\n    setSaveError(null);\n    setSaving(true);\n    props\n      .onSave({\n        selectedFileOrFolder,\n        newFileName,\n      })\n      .catch(error => {\n        setSaveError(error);\n        setSaving(false);\n      });\n  };\n  const canCancel = () => !saving;\n  const cancel = () => {\n    if (!canCancel()) return;\n\n    props.onCancel();\n  };\n  const openPicker = () => {\n    hideDialog(true);\n    setPickerError(null);\n    props\n      .onShowFilePicker({ selectFolderEnabled: true, showUploadView: false })\n      .then(selectedFileOrFolder => {\n        setSelectedFileOrFolder(selectedFileOrFolder);\n        hideDialog(false);\n      })\n      .catch(error => {\n        setPickerError(error);\n        hideDialog(false);\n      });\n  };\n\n  // Hide the dialog while the picker is opened, as it does not play nice with material-ui's\n  // Dialog.\n  if (dialogHidden) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      title={<Trans>Save on Google Drive</Trans>}\n      actions={[\n        <FlatButton\n          key=\"cancel\"\n          label={<Trans>Cancel</Trans>}\n          primary={false}\n          disabled={!canCancel()}\n          onClick={props.onCancel}\n        />,\n        <LeftLoader key=\"save\" isLoading={saving}>\n          <FlatButton\n            label={<Trans>Save</Trans>}\n            primary\n            disabled={!canSave()}\n            onClick={save}\n          />\n        </LeftLoader>,\n      ]}\n      cannotBeDismissed={true}\n      open\n      onRequestClose={cancel}\n      maxWidth=\"sm\"\n    >\n      <Column noMargin>\n        <Line>\n          <GoogleDriveFileOrFolderPicker\n            floatingLabelText={\n              <Trans>Google Drive folder or existing file to overwrite</Trans>\n            }\n            value={selectedFileOrFolder}\n            onOpenPicker={openPicker}\n          />\n        </Line>\n        <Line>\n          {selectedFileOrFolder && selectedFileOrFolder.type === 'FOLDER' ? (\n            <TextField\n              floatingLabelText={<Trans>New file name</Trans>}\n              floatingLabelFixed\n              type=\"text\"\n              hintText={t`YourGame.json`}\n              value={newFileName}\n              onChange={(event, newFileName) => setNewFileName(newFileName)}\n              fullWidth\n            />\n          ) : null}\n        </Line>\n        {saveError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when saving your game. Verify that you have the\n              rights on the folder or file that you selected and try again.\n            </AlertMessage>\n          </Line>\n        )}\n        {pickerError && (\n          <Line>\n            <AlertMessage kind=\"error\">\n              There was an error when selecting a file or folder from Google\n              Drive. Try again later or verify that you are properly connected\n              to Google Drive.\n            </AlertMessage>\n          </Line>\n        )}\n      </Column>\n    </Dialog>\n  );\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { browserOnlineCordovaExportPipeline } from './BrowserOnlineCordovaExport.js';\nimport { browserOnlineElectronExportPipeline } from './BrowserOnlineElectronExport.js';\nimport { browserOnlineWebExportPipeline } from './BrowserOnlineWebExport';\nimport { browserHTML5ExportPipeline } from './BrowserHTML5Export';\nimport { browserCordovaExportPipeline } from './BrowserCordovaExport';\nimport { browserElectronExportPipeline } from './BrowserElectronExport';\nimport { browserCocos2dExportPipeline } from './BrowserCocos2dExport';\nimport { browserFacebookInstantGamesExportPipeline } from './BrowserFacebookInstantGamesExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getBrowserExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'browseronlinecordovaexport',\n    exportPipeline: browserOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'browsers3export',\n    exportPipeline: browserOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>HTML5 game (zip)</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'browserhtml5export',\n    exportPipeline: browserHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'browserfacebookinstantgames',\n    exportPipeline: browserFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually then\n        to iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'browsercordovaexport',\n    exportPipeline: browserCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'browseronlineelectronexport',\n    exportPipeline: browserOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'browserelectronexport',\n    exportPipeline: browserElectronExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Cocos2d-JS</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cocos2d-js',\n    description: (\n      <Trans>\n        Export your game using Cocos2d-JS game engine. The game can be compiled\n        for Android or iOS if you install Cocos2d-JS developer tools.\n      </Trans>\n    ),\n    key: 'browsercocos2dexport',\n    exportPipeline: browserCocos2dExportPipeline,\n    experimental: true,\n  },\n];\n\n/**\n * Open an URL generated from a blob, to download it with the specified filename.\n */\nexport const openBlobDownloadUrl = (url: string, filename: string) => {\n  const { body } = document;\n  if (!body) return;\n\n  // Not using Window.openExternalURL because blob urls are blocked\n  // by Adblock Plus (and maybe other ad blockers).\n  const a = document.createElement('a');\n  body.appendChild(a);\n  a.style.display = 'none';\n  a.href = url;\n  a.download = filename;\n  a.click();\n  body.removeChild(a);\n};\n","// @flow\nimport * as React from 'react';\n\ntype Props = {\n  blob: ?Blob,\n  children: (blobDownloadUrl: string) => React.Node,\n};\n\nexport const BlobDownloadUrlHolder = ({ blob, children }: Props) => {\n  const [blobDownloadUrl, setBlobDownloadUrl] = React.useState('');\n  React.useEffect(\n    () => {\n      // Release the existing blob URL, if any.\n      if (blobDownloadUrl) {\n        URL.revokeObjectURL(blobDownloadUrl);\n      }\n\n      if (blob) {\n        setBlobDownloadUrl(URL.createObjectURL(blob));\n      } else {\n        setBlobDownloadUrl('');\n      }\n\n      return () => {\n        // Release the blob URL if component is unmounted.\n        if (blobDownloadUrl) {\n          URL.revokeObjectURL(blobDownloadUrl);\n        }\n      };\n    },\n    [blob, blobDownloadUrl]\n  );\n\n  return children(blobDownloadUrl);\n};\n","// @flow\nimport axios from 'axios';\nimport { GDevelopGamePreviews } from './ApiConfigs';\nimport { getSignedUrl } from './Usage';\n\nexport type UploadedObject = {|\n  Key: string,\n  Body: string,\n  ContentType: 'text/javascript' | 'text/html',\n|};\n\nexport const uploadObject = (params: UploadedObject): Promise<any> => {\n  return getSignedUrl({\n    uploadType: 'preview',\n    key: params.Key,\n    contentType: params.ContentType,\n  }).then(({ signedUrl }) =>\n    axios.put(signedUrl, params.Body, {\n      headers: {\n        'Content-Type': params.ContentType,\n      },\n    })\n  );\n};\n\nexport const getBaseUrl = () => {\n  return GDevelopGamePreviews.baseUrl;\n};\n","// @flow\nimport axios from 'axios';\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadBlobFile = (\n  blob: Blob,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  return axios\n    .put(uploadOptions.signedUrl, blob, {\n      headers: {\n        'Content-Type': uploadOptions.contentType,\n      },\n      // Allow any arbitrary large file to be sent\n      maxContentLength: Infinity,\n      onUploadProgress: progressEvent => {\n        if (!progressEvent || !progressEvent.total) {\n          onProgress(0, 0);\n          return;\n        }\n\n        onProgress(progressEvent.loaded, progressEvent.total);\n      },\n    })\n    .then(() => undefined);\n};\n","// @flow\n// This file is generated by update-fixtures-from-resources-examples.js script\n\nimport exampleFile0 from '../../fixtures/admob/admob.json';\nimport exampleFile1 from '../../fixtures/advanced-shape-based-painter/advanced-shape-based-painter.json';\nimport exampleFile2 from '../../fixtures/animation-speed-scale/animation-speed-scale.json';\nimport exampleFile3 from '../../fixtures/asteroids/asteroids.json';\nimport exampleFile4 from '../../fixtures/basic-ai-with-pathfinding/basic-ai-with-pathfinding.json';\nimport exampleFile5 from '../../fixtures/basic-artificial-intelligence/basic-artificial-intelligence.json';\nimport exampleFile6 from '../../fixtures/basic-topdown-car-driving/basic-topdown-car-driving.json';\nimport exampleFile7 from '../../fixtures/bbtext-object-demo/bbtext-object-demo.json';\nimport exampleFile8 from '../../fixtures/betabox-basics-learning-experience/betabox-basics-learning-experience.json';\nimport exampleFile9 from '../../fixtures/board-walk-with-raycast/board-walk-with-raycast.json';\nimport exampleFile10 from '../../fixtures/bomb-the-crate/bomb-the-crate.json';\nimport exampleFile11 from '../../fixtures/bouncing-ball-and-rope/bouncing-ball-and-rope.json';\nimport exampleFile12 from '../../fixtures/breakout/breakout.json';\nimport exampleFile13 from '../../fixtures/buttons/buttons.json';\nimport exampleFile14 from '../../fixtures/cannon-ball-with-physics/cannon-ball-with-physics.json';\nimport exampleFile15 from '../../fixtures/car-physics/car-physics.json';\nimport exampleFile16 from '../../fixtures/center-object-within-another/center-object-within-another.json';\nimport exampleFile17 from '../../fixtures/change-position-of-object/change-position-of-object.json';\nimport exampleFile18 from '../../fixtures/change-scale-of-sprites/change-scale-of-sprites.json';\nimport exampleFile19 from '../../fixtures/change-sprite-animation/change-sprite-animation.json';\nimport exampleFile20 from '../../fixtures/change-sprite-color/change-sprite-color.json';\nimport exampleFile21 from '../../fixtures/character-selection/character-selection.json';\nimport exampleFile22 from '../../fixtures/count-down-timer/count-down-timer.json';\nimport exampleFile23 from '../../fixtures/create-object-with-mouseclick/create-object-with-mouseclick.json';\nimport exampleFile24 from '../../fixtures/create-random-object/create-random-object.json';\nimport exampleFile25 from '../../fixtures/custom-font/custom-font.json';\nimport exampleFile26 from '../../fixtures/custom-mouse-pointer/custom-mouse-pointer.json';\nimport exampleFile27 from '../../fixtures/customize-keys-with-lastpressedkey/customize-keys-with-lastpressedkey.json';\nimport exampleFile28 from '../../fixtures/device-orientation-ballgame/device-orientation-ballgame.json';\nimport exampleFile29 from '../../fixtures/device-orientation-compass/device-orientation-compass.json';\nimport exampleFile30 from '../../fixtures/device-vibration/device-vibration.json';\nimport exampleFile31 from '../../fixtures/dialogue-tree-with-yarn/dialogue-tree-with-yarn.json';\nimport exampleFile32 from '../../fixtures/downhill-bike-physics-demo/downhill-bike-physics-demo.json';\nimport exampleFile33 from '../../fixtures/drag-camera-with-mouse/drag-camera-with-mouse.json';\nimport exampleFile34 from '../../fixtures/drop-collect-items-from-storage/drop-collect-items-from-storage.json';\nimport exampleFile35 from '../../fixtures/endless-up-runner/endless-up-runner.json';\nimport exampleFile36 from '../../fixtures/exit-app/exit-app.json';\nimport exampleFile37 from '../../fixtures/facebook-instant-game/facebook-instant-game.json';\nimport exampleFile38 from '../../fixtures/filesystem-create-directory/filesystem-create-directory.json';\nimport exampleFile39 from '../../fixtures/find-diagonals/find-diagonals.json';\nimport exampleFile40 from '../../fixtures/firebase-example/firebase-example.json';\nimport exampleFile41 from '../../fixtures/flappy-bird/flappy-bird.json';\nimport exampleFile42 from '../../fixtures/game-feel-demo/game-feel-demo.json';\nimport exampleFile43 from '../../fixtures/geodash/geodash.json';\nimport exampleFile44 from '../../fixtures/geometry-monster/geometry-monster.json';\nimport exampleFile45 from '../../fixtures/health-bar/health-bar.json';\nimport exampleFile46 from '../../fixtures/infinite-scrolling-background/infinite-scrolling-background.json';\nimport exampleFile47 from '../../fixtures/inventory-system/inventory-system.json';\nimport exampleFile48 from '../../fixtures/isometric-game/isometric-game.json';\nimport exampleFile49 from '../../fixtures/javascript-blocks-in-platformer/javascript-blocks-in-platformer.json';\nimport exampleFile50 from '../../fixtures/keyboard-practice/keyboard-practice.json';\nimport exampleFile51 from '../../fixtures/layer-effects/layer-effects.json';\nimport exampleFile52 from '../../fixtures/level-editor/level-editor.json';\nimport exampleFile53 from '../../fixtures/level-selection-unlock/level-selection-unlock.json';\nimport exampleFile54 from '../../fixtures/lights/lights.json';\nimport exampleFile55 from '../../fixtures/load-image-from-url/load-image-from-url.json';\nimport exampleFile56 from '../../fixtures/magnet/magnet.json';\nimport exampleFile57 from '../../fixtures/manipulate-text-object/manipulate-text-object.json';\nimport exampleFile58 from '../../fixtures/menu-with-functions-and-text-effects/menu-with-functions-and-text-effects.json';\nimport exampleFile59 from '../../fixtures/move-camera-to-position/move-camera-to-position.json';\nimport exampleFile60 from '../../fixtures/move-object-back-and-forth/move-object-back-and-forth.json';\nimport exampleFile61 from '../../fixtures/move-object-in-circle/move-object-in-circle.json';\nimport exampleFile62 from '../../fixtures/move-object-toward-position/move-object-toward-position.json';\nimport exampleFile63 from '../../fixtures/move-object-with-mouse-joint/move-object-with-mouse-joint.json';\nimport exampleFile64 from '../../fixtures/move-object-with-physics/move-object-with-physics.json';\nimport exampleFile65 from '../../fixtures/multi-language-menu/multi-language-menu.json';\nimport exampleFile66 from '../../fixtures/multiplayer-platformer-with-gamepads/multiplayer-platformer-with-gamepads.json';\nimport exampleFile67 from '../../fixtures/multitouch/multitouch.json';\nimport exampleFile68 from '../../fixtures/object-gravity/object-gravity.json';\nimport exampleFile69 from '../../fixtures/object-selection/object-selection.json';\nimport exampleFile70 from '../../fixtures/objects-timers/objects-timers.json';\nimport exampleFile71 from '../../fixtures/open-url-in-browser/open-url-in-browser.json';\nimport exampleFile72 from '../../fixtures/p2p-networking/p2p-networking.json';\nimport exampleFile73 from '../../fixtures/pairs/pairs.json';\nimport exampleFile74 from '../../fixtures/parallax/parallax.json';\nimport exampleFile75 from '../../fixtures/parallax-scrolling/parallax-scrolling.json';\nimport exampleFile76 from '../../fixtures/parse-json-from-api/parse-json-from-api.json';\nimport exampleFile77 from '../../fixtures/parse-json-string/parse-json-string.json';\nimport exampleFile78 from '../../fixtures/particle-effects-demo/particle-effects-demo.json';\nimport exampleFile79 from '../../fixtures/particles-explosions/particles-explosions.json';\nimport exampleFile80 from '../../fixtures/particles-various-effects/particles-various-effects.json';\nimport exampleFile81 from '../../fixtures/pathfinding/pathfinding.json';\nimport exampleFile82 from '../../fixtures/pathfinding-basics/pathfinding-basics.json';\nimport exampleFile83 from '../../fixtures/physics/physics.json';\nimport exampleFile84 from '../../fixtures/physics-joints-demo/physics-joints-demo.json';\nimport exampleFile85 from '../../fixtures/physics-joints-settings-demo/physics-joints-settings-demo.json';\nimport exampleFile86 from '../../fixtures/pin-object-to-another/pin-object-to-another.json';\nimport exampleFile87 from '../../fixtures/pin-object-to-another-multiple-parents/pin-object-to-another-multiple-parents.json';\nimport exampleFile88 from '../../fixtures/pixel-perfect-platform-game/pixel-perfect-platform-game.json';\nimport exampleFile89 from '../../fixtures/plane-and-clouds/plane-and-clouds.json';\nimport exampleFile90 from '../../fixtures/platformer/platformer.json';\nimport exampleFile91 from '../../fixtures/platformer-double-jump/platformer-double-jump.json';\nimport exampleFile92 from '../../fixtures/platformer-with-tilemap/platformer-with-tilemap.json';\nimport exampleFile93 from '../../fixtures/play-music-on-mobile/play-music-on-mobile.json';\nimport exampleFile94 from '../../fixtures/play-stop-sprite-animation/play-stop-sprite-animation.json';\nimport exampleFile95 from '../../fixtures/procedural-generation/procedural-generation.json';\nimport exampleFile96 from '../../fixtures/racing-game/racing-game.json';\nimport exampleFile97 from '../../fixtures/ragdoll/ragdoll.json';\nimport exampleFile98 from '../../fixtures/rain/rain.json';\nimport exampleFile99 from '../../fixtures/random-color-picker/random-color-picker.json';\nimport exampleFile100 from '../../fixtures/rotate-toward-mouse/rotate-toward-mouse.json';\nimport exampleFile101 from '../../fixtures/rotate-toward-position/rotate-toward-position.json';\nimport exampleFile102 from '../../fixtures/rotate-with-keypress/rotate-with-keypress.json';\nimport exampleFile103 from '../../fixtures/save-load/save-load.json';\nimport exampleFile104 from '../../fixtures/screen-shake/screen-shake.json';\nimport exampleFile105 from '../../fixtures/shoot-bullet-in-parabola/shoot-bullet-in-parabola.json';\nimport exampleFile106 from '../../fixtures/shoot-bullets/shoot-bullets.json';\nimport exampleFile107 from '../../fixtures/shooting-bullets-explanation/shooting-bullets-explanation.json';\nimport exampleFile108 from '../../fixtures/simple-space-shooter/simple-space-shooter.json';\nimport exampleFile109 from '../../fixtures/snap-object-to-grid/snap-object-to-grid.json';\nimport exampleFile110 from '../../fixtures/space-invaders/space-invaders.json';\nimport exampleFile111 from '../../fixtures/space-shooter/space-shooter.json';\nimport exampleFile112 from '../../fixtures/spatial-sound/spatial-sound.json';\nimport exampleFile113 from '../../fixtures/splash-screen/splash-screen.json';\nimport exampleFile114 from '../../fixtures/sprite-fade-in-out/sprite-fade-in-out.json';\nimport exampleFile115 from '../../fixtures/tabbed-menu-with-layers/tabbed-menu-with-layers.json';\nimport exampleFile116 from '../../fixtures/take-screenshot/take-screenshot.json';\nimport exampleFile117 from '../../fixtures/tetris-demo/tetris-demo.json';\nimport exampleFile118 from '../../fixtures/text-entry-object/text-entry-object.json';\nimport exampleFile119 from '../../fixtures/text-fade-in-out/text-fade-in-out.json';\nimport exampleFile120 from '../../fixtures/text-to-speech/text-to-speech.json';\nimport exampleFile121 from '../../fixtures/tilemaps-made-with-tiled-editor/tilemaps-made-with-tiled-editor.json';\nimport exampleFile122 from '../../fixtures/toggle-music-play-sound/toggle-music-play-sound.json';\nimport exampleFile123 from '../../fixtures/tween-animations/tween-animations.json';\nimport exampleFile124 from '../../fixtures/tween-test/tween-test.json';\nimport exampleFile125 from '../../fixtures/type-on-text-effect/type-on-text-effect.json';\nimport exampleFile126 from '../../fixtures/unlock-items/unlock-items.json';\nimport exampleFile127 from '../../fixtures/video-player/video-player.json';\nimport exampleFile128 from '../../fixtures/z-depth/z-depth.json';\nimport exampleFile129 from '../../fixtures/zombie-laser/zombie-laser.json';\n\n// prettier-ignore\nexport default {\n  'example://admob': exampleFile0,\n  'example://advanced-shape-based-painter': exampleFile1,\n  'example://animation-speed-scale': exampleFile2,\n  'example://asteroids': exampleFile3,\n  'example://basic-ai-with-pathfinding': exampleFile4,\n  'example://basic-artificial-intelligence': exampleFile5,\n  'example://basic-topdown-car-driving': exampleFile6,\n  'example://bbtext-object-demo': exampleFile7,\n  'example://betabox-basics-learning-experience': exampleFile8,\n  'example://board-walk-with-raycast': exampleFile9,\n  'example://bomb-the-crate': exampleFile10,\n  'example://bouncing-ball-and-rope': exampleFile11,\n  'example://breakout': exampleFile12,\n  'example://buttons': exampleFile13,\n  'example://cannon-ball-with-physics': exampleFile14,\n  'example://car-physics': exampleFile15,\n  'example://center-object-within-another': exampleFile16,\n  'example://change-position-of-object': exampleFile17,\n  'example://change-scale-of-sprites': exampleFile18,\n  'example://change-sprite-animation': exampleFile19,\n  'example://change-sprite-color': exampleFile20,\n  'example://character-selection': exampleFile21,\n  'example://count-down-timer': exampleFile22,\n  'example://create-object-with-mouseclick': exampleFile23,\n  'example://create-random-object': exampleFile24,\n  'example://custom-font': exampleFile25,\n  'example://custom-mouse-pointer': exampleFile26,\n  'example://customize-keys-with-lastpressedkey': exampleFile27,\n  'example://device-orientation-ballgame': exampleFile28,\n  'example://device-orientation-compass': exampleFile29,\n  'example://device-vibration': exampleFile30,\n  'example://dialogue-tree-with-yarn': exampleFile31,\n  'example://downhill-bike-physics-demo': exampleFile32,\n  'example://drag-camera-with-mouse': exampleFile33,\n  'example://drop-collect-items-from-storage': exampleFile34,\n  'example://endless-up-runner': exampleFile35,\n  'example://exit-app': exampleFile36,\n  'example://facebook-instant-game': exampleFile37,\n  'example://filesystem-create-directory': exampleFile38,\n  'example://find-diagonals': exampleFile39,\n  'example://firebase-example': exampleFile40,\n  'example://flappy-bird': exampleFile41,\n  'example://game-feel-demo': exampleFile42,\n  'example://geodash': exampleFile43,\n  'example://geometry-monster': exampleFile44,\n  'example://health-bar': exampleFile45,\n  'example://infinite-scrolling-background': exampleFile46,\n  'example://inventory-system': exampleFile47,\n  'example://isometric-game': exampleFile48,\n  'example://javascript-blocks-in-platformer': exampleFile49,\n  'example://keyboard-practice': exampleFile50,\n  'example://layer-effects': exampleFile51,\n  'example://level-editor': exampleFile52,\n  'example://level-selection-unlock': exampleFile53,\n  'example://lights': exampleFile54,\n  'example://load-image-from-url': exampleFile55,\n  'example://magnet': exampleFile56,\n  'example://manipulate-text-object': exampleFile57,\n  'example://menu-with-functions-and-text-effects': exampleFile58,\n  'example://move-camera-to-position': exampleFile59,\n  'example://move-object-back-and-forth': exampleFile60,\n  'example://move-object-in-circle': exampleFile61,\n  'example://move-object-toward-position': exampleFile62,\n  'example://move-object-with-mouse-joint': exampleFile63,\n  'example://move-object-with-physics': exampleFile64,\n  'example://multi-language-menu': exampleFile65,\n  'example://multiplayer-platformer-with-gamepads': exampleFile66,\n  'example://multitouch': exampleFile67,\n  'example://object-gravity': exampleFile68,\n  'example://object-selection': exampleFile69,\n  'example://objects-timers': exampleFile70,\n  'example://open-url-in-browser': exampleFile71,\n  'example://p2p-networking': exampleFile72,\n  'example://pairs': exampleFile73,\n  'example://parallax': exampleFile74,\n  'example://parallax-scrolling': exampleFile75,\n  'example://parse-json-from-api': exampleFile76,\n  'example://parse-json-string': exampleFile77,\n  'example://particle-effects-demo': exampleFile78,\n  'example://particles-explosions': exampleFile79,\n  'example://particles-various-effects': exampleFile80,\n  'example://pathfinding': exampleFile81,\n  'example://pathfinding-basics': exampleFile82,\n  'example://physics': exampleFile83,\n  'example://physics-joints-demo': exampleFile84,\n  'example://physics-joints-settings-demo': exampleFile85,\n  'example://pin-object-to-another': exampleFile86,\n  'example://pin-object-to-another-multiple-parents': exampleFile87,\n  'example://pixel-perfect-platform-game': exampleFile88,\n  'example://plane-and-clouds': exampleFile89,\n  'example://platformer': exampleFile90,\n  'example://platformer-double-jump': exampleFile91,\n  'example://platformer-with-tilemap': exampleFile92,\n  'example://play-music-on-mobile': exampleFile93,\n  'example://play-stop-sprite-animation': exampleFile94,\n  'example://procedural-generation': exampleFile95,\n  'example://racing-game': exampleFile96,\n  'example://ragdoll': exampleFile97,\n  'example://rain': exampleFile98,\n  'example://random-color-picker': exampleFile99,\n  'example://rotate-toward-mouse': exampleFile100,\n  'example://rotate-toward-position': exampleFile101,\n  'example://rotate-with-keypress': exampleFile102,\n  'example://save-load': exampleFile103,\n  'example://screen-shake': exampleFile104,\n  'example://shoot-bullet-in-parabola': exampleFile105,\n  'example://shoot-bullets': exampleFile106,\n  'example://shooting-bullets-explanation': exampleFile107,\n  'example://simple-space-shooter': exampleFile108,\n  'example://snap-object-to-grid': exampleFile109,\n  'example://space-invaders': exampleFile110,\n  'example://space-shooter': exampleFile111,\n  'example://spatial-sound': exampleFile112,\n  'example://splash-screen': exampleFile113,\n  'example://sprite-fade-in-out': exampleFile114,\n  'example://tabbed-menu-with-layers': exampleFile115,\n  'example://take-screenshot': exampleFile116,\n  'example://tetris-demo': exampleFile117,\n  'example://text-entry-object': exampleFile118,\n  'example://text-fade-in-out': exampleFile119,\n  'example://text-to-speech': exampleFile120,\n  'example://tilemaps-made-with-tiled-editor': exampleFile121,\n  'example://toggle-music-play-sound': exampleFile122,\n  'example://tween-animations': exampleFile123,\n  'example://tween-test': exampleFile124,\n  'example://type-on-text-effect': exampleFile125,\n  'example://unlock-items': exampleFile126,\n  'example://video-player': exampleFile127,\n  'example://z-depth': exampleFile128,\n  'example://zombie-laser': exampleFile129,\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport internalExampleFiles from './InternalExampleFiles';\nimport {\n  POSITIONAL_ARGUMENTS_KEY,\n  type AppArguments,\n} from '../../Utils/Window';\n\n/**\n * \"Internal\" storage giving access to embedded examples.\n * Used for the web-app.\n */\nexport default ({\n  internalName: 'InternalFile',\n  name: t`Internal files`,\n  hiddenInOpenDialog: true,\n  hiddenInSaveDialog: true,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onOpen: (fileMetadata: FileMetadata) => {\n      const url = fileMetadata.fileIdentifier;\n      if (internalExampleFiles[url])\n        return Promise.resolve({\n          content: internalExampleFiles[url],\n        });\n\n      return Promise.reject(new Error(`Unknown built-in game with URL ${url}`));\n    },\n  }),\n}: StorageProvider);\n","import React, { Component } from 'react';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column } from '../UI/Grid';\nimport ExamplesList from './ExamplesList';\nimport InternalFileStorageProvider from '../ProjectsStorage/InternalFileStorageProvider';\nimport ExamplesInformation from './ExamplesInformation';\n\n// To add a new example, add it first in resources/examples (at which point you can see it\n// in the desktop version), then run these scripts:\n// * scripts/update-examples-information-from-resources-examples.js (update metadata)\n// * scripts/update-fixtures-from-resources-examples.js (update web-app examples)\n// and upload the examples to `gdevelop-resources` s3.\nconst exampleNames: Array<string> = Object.keys(ExamplesInformation);\n\nexport default class BrowserExamples extends Component {\n  render() {\n    return (\n      <Column noMargin>\n        <ExamplesList\n          exampleNames={exampleNames}\n          onCreateFromExample={exampleName => {\n            sendNewGameCreated(exampleName);\n            this.props.onOpen(InternalFileStorageProvider, {\n              fileIdentifier: `example://${exampleName}`,\n            });\n          }}\n        />\n      </Column>\n    );\n  }\n}\n","import { Trans } from '@lingui/macro';\nimport React, { Component } from 'react';\nimport Dialog from '../UI/Dialog';\nimport Window from '../Utils/Window';\nimport FlatButton from '../UI/FlatButton';\nimport Text from '../UI/Text';\nimport { ResponsiveWindowMeasurer } from '../UI/Reponsive/ResponsiveWindowMeasurer';\nimport RaisedButton from '../UI/RaisedButton';\nimport { Line } from '../UI/Grid';\n\nexport default class BetaIntroDialog extends Component {\n  _onOpenWebsite() {\n    Window.openExternalURL('http://gdevelop-app.com');\n  }\n\n  render() {\n    const { open, onClose } = this.props;\n\n    return (\n      <ResponsiveWindowMeasurer>\n        {windowWidth => (\n          <Dialog\n            title={<Trans>Welcome to GDevelop</Trans>}\n            actions={[\n              <FlatButton\n                key=\"download\"\n                label={<Trans>Download GDevelop desktop app</Trans>}\n                primary={false}\n                onClick={this._onOpenWebsite}\n              />,\n              <FlatButton\n                label={<Trans>Close</Trans>}\n                primary={false}\n                onClick={onClose}\n                key=\"close\"\n              />,\n            ]}\n            cannotBeDismissed={false}\n            open={open}\n            onRequestClose={onClose}\n          >\n            <div>\n              <Text>\n                <Trans>\n                  This is a version of GDevelop 5 that you can try online.\n                </Trans>\n              </Text>\n              <Text>\n                Choose a <b>new project to create</b>, then edit the scene or\n                the events ruling the game. You can{' '}\n                <b>launch a preview of your game</b> at any time.\n              </Text>\n              <Text>\n                <Trans>\n                  Download the full version of GDevelop on your desktop computer\n                  to create your own game without limits!\n                </Trans>\n              </Text>\n              <Line justifyContent=\"center\">\n                <RaisedButton\n                  label={<Trans>Start using GDevelop</Trans>}\n                  primary\n                  onClick={onClose}\n                />\n              </Line>\n            </div>\n          </Dialog>\n        )}\n      </ResponsiveWindowMeasurer>\n    );\n  }\n}\n","// @flow\nimport Window from '../Utils/Window';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * when running in a browser.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: () => {\n      sendExternalEditorOpened('piskel');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'jfxr-app',\n    displayName: 'Edit with Jfxr',\n    kind: 'audio',\n    edit: () => {\n      sendExternalEditorOpened('jfxr');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n  {\n    name: 'yarn-app',\n    displayName: 'Edit with Yarn',\n    kind: 'json',\n    edit: () => {\n      sendExternalEditorOpened('yarn');\n      Window.showMessageBox(\n        'This feature is only supported in the desktop version for now!\\nDownload it from GDevelop website.'\n      );\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport { uploadObject, getBaseUrl } from '../../Utils/GDevelopServices/Preview';\nimport { makeTimestampedId } from '../../Utils/TimestampedId';\nimport slugs from 'slugs';\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to temporary S3 files.\n */\nexport const makeBrowserS3EventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  const prefix = makeTimestampedId();\n  const getPathFor = (codeNamespace: string) => {\n    return `${prefix}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) =>\n      getBaseUrl() + getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(functionCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading function generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(functionCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      const key = getPathFor(behaviorCodeNamespace);\n      onWriteFile({ includeFile: key, content: code });\n      console.log(`Uploading behavior generated code to ${key}...`);\n      return uploadObject({\n        Key: getPathFor(behaviorCodeNamespace),\n        Body: code,\n        ContentType: 'text/javascript',\n      });\n    },\n  };\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport Dialog from '../../UI/Dialog';\nimport FlatButton from '../../UI/FlatButton';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport Window from '../../Utils/Window';\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport { showErrorBox } from '../../UI/Messages/MessageBox';\nimport Text from '../../UI/Text';\n\ntype Props = {|\n  project: gdProject,\n  onDone: () => void,\n|};\n\nexport default class DownloadSaveAsDialog extends React.Component<Props> {\n  _download = () => {\n    let content = '';\n    try {\n      content = JSON.stringify(serializeToJSObject(this.props.project));\n    } catch (rawError) {\n      showErrorBox({\n        message: 'Unable to save your project',\n        rawError,\n        errorId: 'download-as-json-error',\n      });\n      return;\n    }\n    var uri = encodeURI('data:application/json;charset=utf-8,' + content);\n\n    var downloadLink = document.createElement('a');\n    downloadLink.href = uri;\n    downloadLink.download = 'game.json';\n\n    const { body } = document;\n    if (!body) return;\n\n    body.appendChild(downloadLink);\n    downloadLink.click();\n    body.removeChild(downloadLink);\n  };\n\n  render() {\n    const { onDone } = this.props;\n\n    const actions = [\n      <FlatButton\n        key=\"download\"\n        label={<Trans>Download GDevelop desktop version</Trans>}\n        primary={false}\n        onClick={() => Window.openExternalURL('http://gdevelop-app.com')}\n      />,\n      <FlatButton\n        key=\"close\"\n        label={<Trans>Close</Trans>}\n        primary={false}\n        onClick={onDone}\n      />,\n    ];\n\n    return (\n      <Dialog\n        actions={actions}\n        open\n        cannotBeDismissed={false}\n        onRequestClose={onDone}\n        maxWidth=\"sm\"\n      >\n        <Column noMargin>\n          <Line>\n            <Text>\n              <Trans>\n                You can download the file of your game to continue working on it\n                using the full GDevelop version:\n              </Trans>\n            </Text>\n          </Line>\n          <Line>\n            <Column expand>\n              <RaisedButton\n                label={<Trans>Download game file</Trans>}\n                fullWidth\n                primary\n                onClick={this._download}\n              />\n            </Column>\n          </Line>\n        </Column>\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport DownloadSaveAsDialog from './DownloadSaveAsDialog';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\n\n/**\n * \"Storage\" allowing to download a copy of the game.\n * Used for the web-app.\n */\nexport default ({\n  internalName: 'DownloadFile',\n  name: t`Download a copy`,\n  renderIcon: () => <SaveAlt />,\n  hiddenInOpenDialog: true,\n  createOperations: ({ setDialog, closeDialog }) => ({\n    onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n      return new Promise(resolve => {\n        setDialog(() => (\n          <DownloadSaveAsDialog\n            onDone={() => {\n              closeDialog();\n              resolve({ wasSaved: false, fileMetadata });\n            }}\n            project={project}\n          />\n        ));\n      });\n    },\n  }),\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M12,14.56L16.35,18.16L18.2,16.95V18.3L12,22L5.82,18.3V16.95L7.68,18.16L12,14.56M7.68,2.5L12,6.09L16.32,2.5L22.5,6.5L18.23,9.94L22.5,13.36L16.32,17.39L12,13.78L7.68,17.39L1.5,13.36L5.77,9.94L1.5,6.5L7.68,2.5M12,13.68L18.13,9.94L12,6.19L5.87,9.94L12,13.68Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport Dropbox from '../../UI/CustomSvgIcons/Dropbox';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load Dropbox APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = new Promise((resolve, reject) => {\n    reject(new Error('Unimplemented'));\n  })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading Dropbox APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype DropboxUser = {};\n\n/**\n * Sign in the user to Dropbox, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<DropboxUser> => {\n  return initializeApis().then(() => {\n    throw new Error('Unimplemented');\n  });\n};\n\n/**\n * A storage that is using Dropbox to open and store files.\n */\nexport default ({\n  internalName: 'Dropbox',\n  name: t`Dropbox (coming soon)`,\n  disabled: true,\n  renderIcon: () => <Dropbox />,\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {});\n\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props}>\n    <path d=\"M20.08,13.64C21.17,13.81 22,14.75 22,15.89C22,16.78 21.5,17.55 20.75,17.92L20.58,18H9.18L9.16,18V18C7.71,18 6.54,16.81 6.54,15.36C6.54,13.9 7.72,12.72 9.18,12.72L9.4,12.73L9.39,12.53A3.3,3.3 0 0,1 12.69,9.23C13.97,9.23 15.08,9.96 15.63,11C16.08,10.73 16.62,10.55 17.21,10.55A2.88,2.88 0 0,1 20.09,13.43L20.08,13.64M8.82,12.16C7.21,12.34 5.96,13.7 5.96,15.36C5.96,16.04 6.17,16.66 6.5,17.18H4.73A2.73,2.73 0 0,1 2,14.45C2,13 3.12,11.83 4.53,11.73L4.46,11.06C4.46,9.36 5.84,8 7.54,8C8.17,8 8.77,8.18 9.26,8.5C9.95,7.11 11.4,6.15 13.07,6.15C15.27,6.15 17.08,7.83 17.3,9.97H17.21C16.73,9.97 16.27,10.07 15.84,10.25C15.12,9.25 13.96,8.64 12.69,8.64C10.67,8.64 9,10.19 8.82,12.16Z\" />\n  </SvgIcon>\n));\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport OneDrive from '../../UI/CustomSvgIcons/OneDrive';\n\nlet apisLoaded = false;\nlet apisLoadingPromise = null;\n\n/**\n * Load OneDrive APIs. Return a fulfilled promise when done.\n */\nconst initializeApis = (): Promise<void> => {\n  if (apisLoaded) {\n    return Promise.resolve();\n  }\n\n  if (apisLoadingPromise) {\n    // Only do a single initialization attempt at a given time.\n    return apisLoadingPromise;\n  }\n\n  apisLoadingPromise = new Promise((resolve, reject) => {\n    reject(new Error('Unimplemented'));\n  })\n    .then(() => {\n      apisLoaded = true;\n      apisLoadingPromise = null;\n    })\n    .catch(error => {\n      console.error('Error while loading OneDrive APIs:', error);\n      apisLoadingPromise = null;\n\n      throw error;\n    });\n\n  return apisLoadingPromise;\n};\n\ntype OneDriveUser = {};\n\n/**\n * Sign in the user to OneDrive, returning the user object after a successful sign up\n * (or if the user is already signed in).\n */\nexport const authenticate = (): Promise<OneDriveUser> => {\n  return initializeApis().then(() => {\n    throw new Error('Unimplemented');\n  });\n};\n\n/**\n * A storage that is using OneDrive to open and store files.\n */\nexport default ({\n  internalName: 'OneDrive',\n  name: t`OneDrive (coming soon)`,\n  disabled: true,\n  renderIcon: () => <OneDrive />,\n  createOperations: ({ setDialog, closeDialog }) => {\n    initializeApis().catch(() => {});\n\n    return {\n      doesInitialOpenRequireUserInteraction: true,\n      onOpen: (\n        fileMetadata: FileMetadata\n      ): Promise<{|\n        content: Object,\n      |}> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onOpenWithPicker: (): Promise<?FileMetadata> => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProject: (project: gdProject, fileMetadata: FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n      onSaveProjectAs: (project: gdProject, fileMetadata: ?FileMetadata) => {\n        return Promise.reject(new Error('Unimplemented'));\n      },\n    };\n  },\n}: StorageProvider);\n","// @flow\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  // Currently, the web-app only supports resources with URLs.\n  // TODO: Detect non URLs resources and explain that it can be opened\n  // only on the desktop app.\n  return [];\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  return {\n    fetchedResources: [],\n    erroredResources: [],\n  };\n};\n\nexport const BrowserResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","// @flow\nimport * as React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentification from './Utils/GDevelopServices/Authentification';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for browser only IDE\nimport BrowserExamples from './ProjectCreation/BrowserExamples';\nimport BrowserStarters from './ProjectCreation/BrowserStarters';\nimport BrowserIntroDialog from './MainFrame/BrowserIntroDialog';\nimport browserResourceSources from './ResourcesList/BrowserResourceSources';\nimport browserResourceExternalEditors from './ResourcesList/BrowserResourceExternalEditors';\nimport BrowserS3PreviewLauncher from './Export/BrowserExporters/BrowserS3PreviewLauncher';\nimport { getBrowserExporters } from './Export/BrowserExporters';\nimport makeExtensionsLoader from './JsExtensionsLoader/BrowserJsExtensionsLoader';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport { makeBrowserS3EventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/BrowserS3EventsFunctionCodeWriter';\nimport Providers from './MainFrame/Providers';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport InternalFileStorageProvider from './ProjectsStorage/InternalFileStorageProvider';\nimport GoogleDriveStorageProvider from './ProjectsStorage/GoogleDriveStorageProvider';\nimport DownloadFileStorageProvider from './ProjectsStorage/DownloadFileStorageProvider';\nimport DropboxStorageProvider from './ProjectsStorage/DropboxStorageProvider';\nimport OneDriveStorageProvider from './ProjectsStorage/OneDriveStorageProvider';\nimport { BrowserResourceFetcher } from './ProjectsStorage/ResourceFetcher/BrowserResourceFetcher';\n\nexport const create = (authentification: Authentification) => {\n  Window.setUpContextMenu();\n\n  let app = null;\n  const appArguments = Window.getArguments();\n\n  app = (\n    <Providers\n      authentification={authentification}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeBrowserS3EventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={null}\n      eventsFunctionsExtensionOpener={null}\n      resourceFetcher={BrowserResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            InternalFileStorageProvider,\n            GoogleDriveStorageProvider,\n            DropboxStorageProvider,\n            OneDriveStorageProvider,\n            DownloadFileStorageProvider,\n          ]}\n          defaultStorageProvider={InternalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderPreviewLauncher={(props, ref) => (\n                <BrowserS3PreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  {...props}\n                  exporters={getBrowserExporters()}\n                  allExportersRequireOnline\n                />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  examplesComponent={BrowserExamples}\n                  startersComponent={BrowserStarters}\n                />\n              )}\n              introDialog={<BrowserIntroDialog />}\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={browserResourceSources}\n              resourceExternalEditors={browserResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !Window.isDev(),\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n\n  return app;\n};\n"],"sourceRoot":""}