{"version":3,"sources":["ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","ProjectCreation/LocalStarters.js","ProjectCreation/LocalPathFinder.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalCocos2dExport.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","Export/LocalExporters/LocalFileSystem.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","UI/LocalFolderPicker/index.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/index.js","LocalApp.js","ProjectCreation/LocalExamples.js","ProjectCreation/LocalExamplesFinder.js","Utils/ObjectSplitter.js"],"names":["gd","global","fs","optionalRequire","path","electron","dialog","remote","checkFileContent","filePath","expectedContent","time","performance","now","Promise","resolve","reject","readFile","encoding","err","content","Error","verificationTime","console","info","toFixed","writeAndCheckFile","a","ensureDir","dirname","writeFile","writeAndCheckFormattedJSONFile","object","JSON","stringify","writeProjectFiles","project","projectPath","serializedProjectObject","serializeToJSObject","isFolderProject","partialObjects","split","pathSeparator","getArrayItemReferenceName","getSlugifiedUniqueNameFromProperty","shouldSplit","splitPaths","Set","isReferenceMagicPropertyName","all","map","partialObject","join","reference","catch","error","then","onSaveProject","fileMetadata","fileIdentifier","wasSaved","onSaveProjectAs","defaultPath","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","browserWindow","getCurrentWindow","options","filters","name","extensions","showSaveDialogSync","ProjectResourcesCopier","copyAllResourcesTo","setProjectFile","onAutoSaveProject","autoSavePath","serializeToJSON","app","LocalStarters","i18n","exampleName","outputPath","this","props","findExamples","examplesPath","mkdirsSync","copySync","showGameFileCreationError","onOpen","LocalFileStorageProvider","sendNewGameCreated","ProjectHelper","createNewGDJSProject","onCreate","onChangeOutputPath","findEmptyPath","getPath","noMargin","expand","fullWidth","value","onChange","type","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","createFromExample","createEmptyGame","alignItems","justifyContent","label","onShowExamples","Component","basePath","folderName","generateName","accessSync","ex","displayName","kind","component","chooseResources","multiSelections","getLastUsedPath","setLastUsedPath","title","_","selectLocalResourcePath","resources","resourcePath","audioResource","AudioResource","getProjectFile","setFile","relative","setName","imageResource","ImageResource","fontResource","FontResource","videoResource","VideoResource","jsonResource","JsonResource","properties","push","latestPath","showOpenDialog","filePaths","length","lastUsedPath","parse","dir","filter","isPathInProjectFolder","Window","showConfirmDialog","copyAllToProjectFolder","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","ipcRenderer","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resourceName","originalIndex","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","resourcesManager","getResourcesManager","forEach","resource","createOrUpdateResource","getResource","setMetadata","send","newFilePath","jfxr","BrowserWindow","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","devToolsOpen","previewBrowserWindowConfig","hotReloadsCount","hideMenuBar","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","win","loadURL","setMenuBarVisibility","webContents","setState","openDevTools","_openPreviewWindow","gamePath","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","nodeIntegration","getIsMenuBarHiddenInPreview","networkPreview","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","gdjsRoot","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","timeFunction","previewExportOptions","PreviewExportOptions","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getServerAddress","setDebuggerServerAddress","address","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","LocalPreviewDebuggerServer","ref","subscriptionChecker","onChangeSubscription","id","mode","open","url","onClose","onExport","onRunPreviewLocally","React","LocalNetworkDialog","actions","key","primary","secondaryActions","cannotBeDismissed","onRequestClose","debuggerServerState","debuggerServerAddress","callbacksList","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","onHandleParsedMessage","e","warn","serverStartTimeoutPromise","race","getServerState","registerCallbacks","callbacks","callbacksIndex","getLocalExporters","renderIcon","helpPage","description","exportPipeline","localOnlineCordovaExportPipeline","localOnlineWebExportPipeline","localHTML5ExportPipeline","advanced","localFacebookInstantGamesExportPipeline","localCordovaExportPipeline","localOnlineElectronExportPipeline","localElectronExportPipeline","localCocos2dExportPipeline","experimental","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","renderHeader","updateExportState","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openItem","renderGameButton","debugMode","prevState","onToggle","check","toggled","labelPosition","exportWholeCocos2dProject","archiveOutputFilename","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","styles","container","position","display","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","showSaveDialog","style","undefined","margin","hintText","PureComponent","os","onlineBuildType","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","launchOnlineBuild","userProfile","uploadBucketKey","getAuthorizationHeader","profile","buildCordovaAndroid","uid","targets","buildElectron","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onCloseProject","onCloseApp","onExportProject","onCreateProject","onOpenProjectManager","onOpenStartPage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","loadAllExtensions","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeBehaviorCode","behaviorCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","writeEventsFunctionsExtension","extension","filepath","stringifyException","writeJSONFile","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","dataObject","readJSONFile","dirExists","existsSync","emptyDirSync","fileNameFrom","fullPath","_isExternalUrl","_translateUrl","basename","dirNameFrom","replace","makeAbsolute","filename","baseDirectory","isAbsolute","normalize","makeRelative","charAt","copyFile","source","dest","writeToFile","file","contents","outputFileSync","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","statSync","startsWith","substr","child_process","process","findDevelopmentNewIdeAppPath","developmentElectronAppFolder","cwd","getAllDevelopmentWatchPaths","paths","pathsWithErrors","gdevelopRepositoryRoot","gdjsSourcesRuntimePath","gdExtensionsPath","files","extensionPath","isDirectory","Boolean","extensionDevelopmentWatchPaths","concat","gdjsDevelopmentWatchPaths","importGDJSRuntime","startTime","exec","stdout","stderr","duration","onWatchEvent","debounce","eventName","resolvedFilename","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","stopWatchers","watchers","watchPath","watcher","watch","Object","keys","totalTimeStr","close","getResourcesToFetch","getAllResourceNames","toJSArray","getFile","fetchResources","onProgress","baseAssetsPath","downloadedFilePaths","erroredResources","fetchedResources","fetchedResourcesCount","resourcesToFetch","PromisePool","withConcurrency","for","extname","filenameWithoutExtension","newNameGenerator","tentativePath","has","newPath","add","invoke","LocalResourceFetcher","LocalFolderPicker","_onChooseFolder","_getTitleAndMessage","titleAndMessage","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","log","pointer","pipe","directory","finalize","localFilePath","stepCurrentProgress","stepMaxProgress","onOpenWithPicker","unsplit","getReferencePartialObject","referencePath","maxUnsplitDepth","hasAutoSave","compareLastModified","mtime","getTime","onGetAutoSave","internalName","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","createOperations","getOpenErrorMessage","create","authentification","setUpContextMenu","getArguments","isDev","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","resourceFetcher","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","renderMainMenu","renderPreviewLauncher","renderExportDialog","exporters","renderCreateDialog","examplesComponent","LocalExamples","startersComponent","renderGDJSDevelopmentWatcher","resourceSources","localResourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","showErrorBox","errorId","exampleNames","onExamplesLoaded","onCreateFromExample","tryPath","onExists","onNoAccess","access","constants","R_OK","cb","appPath","getAppPath","createReference","referenceTo","splitObject","currentObject","currentPath","currentReference","Array","isArray","index","itemPath","itemReference","propertyName","propertyPath","propertyReference","unsplitObject","depth","indexOrPropertyName","isReference","existingNamesForReference","property","newName"],"mappings":"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","file":"static/js/local-app.3c3dc1b3.chunk.js","sourcesContent":["// @flow\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\n\nconst gd: libGDevelop = global.gd;\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nconst writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata }; // Save was properly done\n  });\n};\n\nexport const onSaveProjectAs = (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n  const browserWindow = electron.remote.getCurrentWindow();\n  const options = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    return Promise.reject('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, options);\n  if (!filePath) {\n    return Promise.resolve({ wasSaved: false, fileMetadata });\n  }\n  const projectPath = path.dirname(filePath);\n\n  // TODO: Ideally, errors while copying resources should be reported.\n  gd.ProjectResourcesCopier.copyAllResourcesTo(\n    project,\n    fileSystem,\n    projectPath,\n    true, // Update the project with the new resource paths\n    false, // Don't move absolute files\n    true // Keep relative files folders structure.\n  );\n\n  // Update the project with the new file path (resources have already been updated)\n  project.setProjectFile(filePath);\n\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return {\n      wasSaved: true,\n      fileMetadata: {\n        ...fileMetadata,\n        fileIdentifier: filePath,\n      },\n    }; // Save was properly done\n  });\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport RaisedButton from '../UI/RaisedButton';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport Text from '../UI/Text';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ListIcon from '../UI/ListIcon';\nimport { showGameFileCreationError } from './LocalExamples';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nimport { findEmptyPath } from './LocalPathFinder';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nvar fs = optionalRequire('fs-extra');\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onShowExamples: () => void,\n  outputPath: string,\n|};\n\ntype State = {||};\n\nexport default class LocalStarters extends Component<Props, State> {\n  createFromExample(i18n: I18nType, exampleName: string) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  }\n\n  createEmptyGame(i18n: I18nType) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    try {\n      fs.mkdirsSync(outputPath);\n    } catch (error) {\n      showGameFileCreationError(i18n, outputPath, error);\n      return;\n    }\n\n    const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n    const filePath = path.join(outputPath, 'game.json');\n    project.setProjectFile(filePath);\n    this.props.onCreate(project, LocalFileStorageProvider, {\n      fileIdentifier: filePath,\n    });\n    sendNewGameCreated('');\n  }\n\n  componentDidMount() {\n    if (this.props.outputPath === '')\n      if (path && app)\n        this.props.onChangeOutputPath(\n          findEmptyPath(\n            path.join(app.getPath('documents'), 'GDevelop projects')\n          )\n        );\n  }\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose a game to use as a starter:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column expand noMargin>\n                <List>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/platformer.png\"\n                      />\n                    }\n                    primaryText={<Trans>Platformer</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A simple platform game, with coins to collect, moving\n                        platforms and enemies.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'platformer')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/space-shooter.png\"\n                      />\n                    }\n                    primaryText={<Trans>8-bit Space Shooter</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A beautiful, retro side-scrolling shooter where you must\n                        defeat incoming enemies with your mecha transforming\n                        spaceship. Huge boss included!\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'space-shooter')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/geometry-monster.png\"\n                      />\n                    }\n                    primaryText={<Trans>Geometry Monster</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A hyper casual endless game where you have to collect\n                        shapes and avoid bombs, with a progressively increasing\n                        difficulty.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'geometry-monster')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/isometric-game.png\"\n                      />\n                    }\n                    primaryText={<Trans>Isometric game</Trans>}\n                    secondaryText={\n                      <Trans>\n                        An example of an isometric game where you can explore a\n                        map with your character.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'isometric-game')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                      />\n                    }\n                    primaryText=\"Downhill Bike Racing\"\n                    secondaryText={\n                      <Trans>\n                        An example of a 2D physics based game, where players\n                        have to reach the end as fast as possible.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'downhill-bike-physics-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/pairs.png\"\n                      />\n                    }\n                    primaryText=\"Pairs\"\n                    secondaryText={\n                      <Trans>\n                        Find all matching pairs of cards in this relaxing game.\n                        Use tweens to create smooth, natural animations with a\n                        few events.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'pairs')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/new.png\"\n                      />\n                    }\n                    primaryText={<Trans>Empty game</Trans>}\n                    secondaryText={\n                      <Trans>Start a new game from scratch.</Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createEmptyGame(i18n)}\n                  />\n                  <Subheader>\n                    <Trans>Advanced</Trans>\n                  </Subheader>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/particle-effects-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Particle Effects Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo of various high quality particle effects (fire,\n                        magic, snow, rune spell...) that you can try and use in\n                        your game.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'particle-effects-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/game-feel-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Game Feel Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo showing how to enhance the \"game feel\" of your\n                        project: VFX, shot trail, ambient sounds and SFX,\n                        screenshake, wobble...\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'game-feel-demo')\n                    }\n                  />\n                </List>\n                <Line alignItems=\"center\" justifyContent=\"center\">\n                  <RaisedButton\n                    label={<Trans>See examples</Trans>}\n                    onClick={() => this.props.onShowExamples()}\n                  />\n                </Line>\n              </Column>\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","import generateName from '../Utils/NewNameGenerator';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\nexport const findEmptyPath = basePath => {\n  if (!path) return basePath;\n\n  const folderName = generateName('My project', name => {\n    try {\n      fs.accessSync(path.join(basePath, name));\n    } catch (ex) {\n      return false;\n    }\n    return true;\n  });\n\n  return path.join(basePath, folderName);\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\nimport type { ResourceKind } from './ResourceSource.flow';\nimport { type ResourceSourceComponentProps } from './ResourceSource.flow';\nimport { Component } from 'react';\nimport {\n  isPathInProjectFolder,\n  copyAllToProjectFolder,\n} from './ResourceUtils.js';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport Window from '../Utils/Window';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nexport default [\n  {\n    name: 'localAudioFileOpener',\n    displayName: 'Choose a new audio file',\n    kind: 'audio',\n    component: class LocalAudioFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an audio file`),\n          name: i18n._(t`Audio files`),\n          extensions: ['aac', 'wav', 'mp3', 'ogg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'audio'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const audioResource = new gd.AudioResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            audioResource.setFile(path.relative(projectPath, resourcePath));\n            audioResource.setName(path.relative(projectPath, resourcePath));\n\n            return audioResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFileOpener',\n    displayName: 'Choose a new image',\n    kind: 'image',\n    component: class LocalFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an image`),\n          name: i18n._(t`Image files`),\n          extensions: ['png', 'jpg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'image'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const imageResource = new gd.ImageResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            imageResource.setFile(path.relative(projectPath, resourcePath));\n            imageResource.setName(path.relative(projectPath, resourcePath));\n\n            return imageResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFontFileOpener',\n    displayName: 'Choose a new font file',\n    kind: 'font',\n    component: class LocalFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a font file`),\n          name: i18n._(t`Font files`),\n          extensions: ['ttf', 'otf'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'font'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const fontResource = new gd.FontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            fontResource.setFile(path.relative(projectPath, resourcePath));\n            fontResource.setName(path.relative(projectPath, resourcePath));\n\n            return fontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localVideoFileOpener',\n    displayName: 'Choose a new video file',\n    kind: 'video',\n    component: class LocalVideoFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a video file`),\n          name: i18n._(t`Video files`),\n          extensions: ['mp4'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'video'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const videoResource = new gd.VideoResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            videoResource.setFile(path.relative(projectPath, resourcePath));\n            videoResource.setName(path.relative(projectPath, resourcePath));\n\n            return videoResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localJsonFileOpener',\n    displayName: 'Choose a new json file',\n    kind: 'json',\n    component: class LocalJsonFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a json file`),\n          name: i18n._(t`JSON file`),\n          extensions: ['json'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'json'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const jsonResource = new gd.JsonResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            jsonResource.setFile(path.relative(projectPath, resourcePath));\n            jsonResource.setName(path.relative(projectPath, resourcePath));\n\n            return jsonResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n];\n\nconst selectLocalResourcePath = (\n  i18n: I18nType,\n  project: gdProject,\n  options: {\n    multiSelections: boolean,\n    title: string,\n    name: string,\n    extensions: Array<string>,\n  },\n  getLastUsedPath: (project: gdProject, kind: ResourceKind) => string,\n  setLastUsedPath: (\n    project: gdProject,\n    kind: ResourceKind,\n    path: string\n  ) => void,\n  kind: ResourceKind\n): Promise<Array<string>> => {\n  if (!dialog) return Promise.reject('Not supported');\n\n  const properties = ['openFile'];\n  if (options.multiSelections) properties.push('multiSelections');\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: options.title,\n      properties,\n      filters: [{ name: options.name, extensions: options.extensions }],\n      defaultPath: latestPath,\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return [];\n\n      const lastUsedPath = path.parse(filePaths[0]).dir;\n      setLastUsedPath(project, kind, lastUsedPath);\n\n      const outsideProjectFolderPaths = filePaths.filter(\n        path => !isPathInProjectFolder(project, path)\n      );\n\n      if (outsideProjectFolderPaths.length) {\n        const answer = Window.showConfirmDialog(\n          i18n._(\n            t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n          )\n        );\n\n        if (answer) {\n          return copyAllToProjectFolder(project, filePaths);\n        }\n      }\n\n      return filePaths;\n    });\n};\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport { LocalPreviewDebuggerServer } from './LocalPreviewDebuggerServer';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst BrowserWindow = electron ? electron.remote.BrowserWindow : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  devToolsOpen: boolean,\n  previewBrowserWindowConfig: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    devToolsOpen: false,\n    previewBrowserWindowConfig: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    if (\n      !BrowserWindow ||\n      !this.state.previewBrowserWindowConfig ||\n      !this.state.previewGamePath\n    )\n      return;\n\n    const win = new BrowserWindow(this.state.previewBrowserWindowConfig);\n    win.loadURL(`file://${this.state.previewGamePath}/index.html`);\n    win.setMenuBarVisibility(this.state.hideMenuBar);\n    win.webContents.on('devtools-opened', () => {\n      this.setState({ devToolsOpen: true });\n    });\n    win.webContents.on('devtools-closed', () => {\n      this.setState({ devToolsOpen: false });\n    });\n    if (this.state.devToolsOpen) win.openDevTools();\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowConfig: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            nodeIntegration: true,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = this.getPreviewDebuggerServer().getServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.setDebuggerServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return LocalPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        cannotBeDismissed={true}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const LocalPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getServerAddress: () => debuggerServerAddress,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localCocos2dExportPipeline } from './LocalCocos2dExport';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport.js';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport.js';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getLocalExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'localonlinecordovaexport',\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'localonlinewebexport',\n    exportPipeline: localOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>Local folder</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'localexport',\n    exportPipeline: localHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'localfacebookinstantgames',\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually to\n        iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'localcordovaexport',\n    exportPipeline: localCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'localonlineelectronexport',\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'localelectronexport',\n    exportPipeline: localElectronExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Cocos2d-JS</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cocos2d-js',\n    description: (\n      <Trans>\n        Export your game using Cocos2d-JS game engine. The game can be compiled\n        for Android or iOS if you install Cocos2d-JS developer tools.\n      </Trans>\n    ),\n    key: 'localcocos2dexport',\n    exportPipeline: localCocos2dExportPipeline,\n    experimental: true,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport Toggle from '../../UI/Toggle';\nimport {\n  DoneFooter,\n  ExplanationHeader,\n} from '../GenericExporters/Cocos2dExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n  debugMode: boolean,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCocos2dExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cocos2d',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n    debugMode: false,\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(prevState => ({ ...prevState, outputDir }));\n          }}\n          fullWidth\n        />\n      </Line>\n      <Line>\n        <Toggle\n          onToggle={(e, check) =>\n            updateExportState(prevState => ({\n              ...prevState,\n              debugMode: check,\n            }))\n          }\n          toggled={exportState.debugMode}\n          labelPosition=\"right\"\n          label={\n            <Trans>\n              Debug mode (show FPS counter and stats in the bottom left)\n            </Trans>\n          }\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    exporter.exportWholeCocos2dProject(\n      context.project,\n      context.exportState.debugMode,\n      context.exportState.outputDir\n    );\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openItem(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          hintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, profile.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-start-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'main-menu-open-games-dashboard'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create a New Project...`),\n        accelerator: getElectronAccelerator(shortcutMap['CREATE_NEW_PROJECT']),\n        onClickSendEvent: 'main-menu-create',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Games Dashboard`),\n        onClickSendEvent: 'main-menu-open-games-dashboard',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { role: 'undo' },\n      { role: 'redo' },\n      { type: 'separator' },\n      { role: 'cut' },\n      { role: 'copy' },\n      { role: 'paste' },\n      { role: 'pasteandmatchstyle' },\n      { role: 'delete' },\n      { role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Start Page`),\n        onClickSendEvent: 'main-menu-open-start-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { role: 'toggledevtools' },\n      { type: 'separator' },\n      { role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop-app.com',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop-app.com',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/rjdYHvj',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop-app.com/contribute/',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Games Dashboard`),\n          onClickSendEvent: 'main-menu-open-games-dashboard',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create', props.onCreateProject);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-start-page', props.onOpenStartPage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    props.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', props.setUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples }) => {\n  return findGDJS().then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport slugs from 'slugs';\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n  const outputDir = os.tmpdir() + '/GDGeneratedEventsFunctions';\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","import optionalRequire from '../../Utils/OptionalRequire.js';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nexport default {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return os.tmpdir();\n  },\n  fileNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return fullPath;\n\n    fullPath = this._translateUrl(fullPath);\n    return path.basename(fullPath);\n  },\n  dirNameFrom: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return '';\n\n    fullPath = this._translateUrl(fullPath);\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalUrl(filename)) return filename;\n\n    filename = this._translateUrl(filename);\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  },\n  isAbsolute: function(fullPath) {\n    if (this._isExternalUrl(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    fullPath = this._translateUrl(fullPath);\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalUrl(source)) return true;\n\n    source = this._translateUrl(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateUrl(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalUrl: function(filename) {\n    return (\n      filename.startsWith('http://') ||\n      filename.startsWith('https://') ||\n      filename.startsWith('ftp://')\n    );\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateUrl: function(filename) {\n    // TODO: remove\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nimport debounce from 'lodash/debounce';\nconst electron = optionalRequire('electron');\nconst fs = optionalRequire('fs');\nconst child_process = optionalRequire('child_process');\nconst process = optionalRequire('process');\nconst path = optionalRequire('path');\n\ntype DevelopmentWatchPaths = {\n  paths: Array<string>,\n  pathsWithErrors: { [string]: Error },\n};\n\n/**\n * Returns the folder corresponding to newIDE/app in **development**. Works\n * only when running in Electron.\n */\nconst findDevelopmentNewIdeAppPath = () /*: string */ => {\n  if (!electron) return '';\n\n  const developmentElectronAppFolder = process.cwd();\n  return path.join(developmentElectronAppFolder, '../app');\n};\n\n/**\n * Returns the list of folders to watch containing the **sources** of\n * GDJS and Extensions, found relatively to the current working directory which is the\n * Electron working directory during **development**. Won't work\n * if running on production.\n */\nconst getAllDevelopmentWatchPaths = (): Promise<DevelopmentWatchPaths> => {\n  if (!electron || !fs)\n    return Promise.resolve({ paths: [], pathsWithErrors: {} });\n\n  const pathsWithErrors: { [string]: Error } = {};\n\n  const gdevelopRepositoryRoot = path.join(\n    findDevelopmentNewIdeAppPath(),\n    '../..'\n  );\n  const gdjsSourcesRuntimePath = path.join(\n    gdevelopRepositoryRoot,\n    'GDJS/Runtime'\n  );\n  const gdExtensionsPath = path.join(gdevelopRepositoryRoot, 'Extensions');\n\n  const getExtensionDevelopmentWatchPaths = (): Promise<Array<string>> =>\n    new Promise(resolve =>\n      fs.readdir(gdExtensionsPath, (error: ?Error, files: Array<string>) => {\n        if (error) {\n          pathsWithErrors[gdExtensionsPath] = error;\n          resolve([]);\n          return;\n        }\n\n        resolve(\n          Promise.all(\n            files.map(\n              (file): Promise<?string> =>\n                new Promise(resolve => {\n                  const extensionPath = path.join(gdExtensionsPath, file);\n                  fs.stat(extensionPath, (error, stat) => {\n                    if (error) {\n                      pathsWithErrors[extensionPath] = error;\n                      resolve(extensionPath);\n                      return;\n                    }\n\n                    resolve(stat.isDirectory() ? extensionPath : null);\n                  });\n                })\n            )\n          ).then(paths => paths.filter(Boolean))\n        );\n      })\n    );\n\n  const getGDJSDevelopmentWatchPaths = (): Promise<Array<string>> => {\n    return Promise.resolve(\n      [gdjsSourcesRuntimePath].concat(\n        [\n          // List of all sub folders in GDJS Runtime.\n          // If you add any folder, add it here too so that it\n          // can be watched for changes.\n          'Cocos2d',\n          'Cordova',\n          'Electron',\n          'FacebookInstantGames',\n          'cocos-renderers',\n          'cocos-sound-manager',\n          'events-tools',\n          'fontfaceobserver-font-manager',\n          'howler-sound-manager',\n          'libs',\n          'pixi-renderers',\n          'websocket-debugger-client',\n        ].map(folder => path.join(gdjsSourcesRuntimePath, folder))\n      )\n    );\n  };\n\n  return getExtensionDevelopmentWatchPaths().then(\n    extensionDevelopmentWatchPaths => {\n      return getGDJSDevelopmentWatchPaths().then(gdjsDevelopmentWatchPaths => {\n        return {\n          paths: [\n            ...gdjsDevelopmentWatchPaths,\n            ...extensionDevelopmentWatchPaths,\n          ],\n          pathsWithErrors,\n        };\n      });\n    }\n  );\n};\n\n/**\n * Launch the newIDE script `import-GDJS-Runtime`.\n */\nconst importGDJSRuntime = (): Promise<void> => {\n  if (!child_process || !path) return Promise.reject(new Error('Unsupported'));\n\n  return new Promise((resolve, reject) => {\n    const startTime = performance.now();\n    child_process.exec(\n      `node \"${path.join(\n        findDevelopmentNewIdeAppPath(),\n        'scripts/import-GDJS-Runtime.js'\n      )}\"`,\n      (error, stdout, stderr) => {\n        if (error) {\n          console.error(`GDJS Runtime update error:\\n${error}`);\n          reject(error);\n          return;\n        }\n\n        const duration = (performance.now() - startTime).toFixed(0);\n        console.info(`GDJS Runtime updated in ${duration}ms:\\n${stdout}`);\n\n        if (stderr) {\n          console.error(`GDJS Runtime update error:\\n${stderr}`);\n          reject(new Error('Error while updating GDJS Runtime'));\n          return;\n        }\n\n        resolve();\n      }\n    );\n  });\n};\n\n/**\n * Callback for fs.watch, so that  whenever a source file is changed,\n * it relaunchs automatically the script to import.\n */\nconst onWatchEvent = debounce((event: ?string, filename: ?string) => {\n  const eventName = event || 'unknown-event';\n  const resolvedFilename = filename || 'unknown-file';\n  console.info(\n    `GDJS/extensions watchers found a \"${eventName}\" in ${resolvedFilename}, updating GDJS Runtime...`\n  );\n  importGDJSRuntime().catch(() => {});\n}, 100 /* Avoid running the script too much in case multiple changes are fired at the same time. */);\n\nconst genericWatcherErrorMessage =\n  'Error in watcher for GDJS Runtime - manually call npm run `node import-GDJS-Runtime.js` in the newIDE/app/scripts folder if you make changes to GDJS.';\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      let stopWatchers = false;\n      let watchers = [];\n      let startTime = performance.now();\n      getAllDevelopmentWatchPaths().then(({ paths, pathsWithErrors }) => {\n        // There is a non nul chance that for some reason the effect was cleaned up\n        // before we retrieved all the paths. Stop there if it's the case.\n        if (stopWatchers) return;\n\n        if (!fs) {\n          console.error(\n            \"Unable to use 'fs' from Node.js to watch changes in GDJS.\"\n          );\n          return;\n        }\n\n        // Reload extensions when the component is first mounted\n        importGDJSRuntime().catch(() => {});\n\n        // Create watchers\n        paths.forEach(watchPath => {\n          let watcher = null;\n          try {\n            watcher = fs.watch(watchPath, {}, onWatchEvent);\n          } catch (error) {\n            pathsWithErrors[watchPath] = error;\n            return null;\n          }\n\n          if (watcher) {\n            watcher.on('error', error => {\n              console.warn(genericWatcherErrorMessage, error);\n            });\n\n            watchers.push(watcher);\n          }\n        });\n\n        if (Object.keys(pathsWithErrors).length) {\n          console.warn(\n            'Error while setting up watchers for some paths: ',\n            pathsWithErrors\n          );\n        }\n\n        const totalTimeStr = (performance.now() - startTime).toFixed(2);\n        if (watchers.length) {\n          console.info(\n            `Watchers for GDJS Runtime/extensions installed in ${totalTimeStr}ms.`\n          );\n        } else {\n          console.warn(\n            `No watchers for GDJS Runtime/extensions installed (took ${totalTimeStr}ms).`\n          );\n        }\n      });\n\n      // Close all the watchers when the React effect is unregistered\n      return () => {\n        stopWatchers = true;\n        if (!watchers.length) return;\n\n        watchers.forEach(watcher => {\n          watcher.close();\n        });\n        console.info('Watchers for GDJS Runtime closed.');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type ResourceFetcher, type FetchResourcesArgs } from '.';\nimport PromisePool from '@supercharge/promise-pool';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\nconst isExternalUrl = (filename: string) => {\n  return (\n    filename.startsWith('http://') ||\n    filename.startsWith('https://') ||\n    filename.startsWith('ftp://')\n  );\n};\n\nconst getResourcesToFetch = (project: gdProject): Array<string> => {\n  const resourcesManager = project.getResourcesManager();\n\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  return allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isExternalUrl(resource.getFile());\n  });\n};\n\nconst fetchResources = async ({\n  project,\n  resourceNames,\n  onProgress,\n}: FetchResourcesArgs) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n  const resourcesManager = project.getResourcesManager();\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n  const fetchedResources = [];\n\n  let fetchedResourcesCount = 0;\n  const resourcesToFetch = getResourcesToFetch(project);\n\n  return PromisePool.withConcurrency(3)\n    .for(resourceNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      const extension = path.extname(url);\n      const filenameWithoutExtension = path.basename(url, extension);\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const newPath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(newPath);\n\n      try {\n        await fs.ensureDir(baseAssetsPath);\n        await ipcRenderer.invoke('local-file-download', url, newPath);\n        resource.setFile(\n          path.relative(projectPath, newPath).replace(/\\\\/g, '/')\n        );\n        fetchedResources.push({ resourceName });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourcesToFetch.length);\n    })\n    .then(() => ({\n      fetchedResources,\n      erroredResources,\n    }));\n};\n\nexport const LocalResourceFetcher: ResourceFetcher = {\n  getResourcesToFetch,\n  fetchResources,\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport RaisedButton from '../RaisedButton';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  type: 'export' | 'create-game',\n  value: string,\n  onChange: string => void,\n  defaultPath?: string,\n  fullWidth?: boolean,\n|};\n\ntype TitleAndMessage = {|\n  title: ?string,\n  message: ?string,\n|};\n\nexport default class LocalFolderPicker extends PureComponent<Props, {||}> {\n  _onChooseFolder = ({ title, message }: TitleAndMessage) => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    dialog\n      .showOpenDialog(browserWindow, {\n        title,\n        properties: ['openDirectory', 'createDirectory'],\n        message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return;\n        this.props.onChange(filePaths[0]);\n      });\n  };\n\n  _getTitleAndMessage = (i18n: I18nType): TitleAndMessage => {\n    const { type } = this.props;\n    if (type === 'export') {\n      return {\n        title: i18n._(t`Choose an export folder`),\n        message: i18n._(t`Choose where to export the game`),\n      };\n    } else if (type === 'create-game') {\n      return {\n        title: i18n._(t`Choose a folder for the new game`),\n        message: i18n._(t`Choose where to create the game`),\n      };\n    }\n\n    return {\n      title: undefined,\n      message: undefined,\n    };\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => {\n          const titleAndMessage = this._getTitleAndMessage(i18n);\n          return (\n            <div\n              style={{\n                ...styles.container,\n                width: this.props.fullWidth ? '100%' : undefined,\n              }}\n            >\n              <TextField\n                margin=\"dense\"\n                style={styles.textField}\n                type=\"text\"\n                hintText={titleAndMessage.title}\n                value={this.props.value}\n                onChange={(event, value) => this.props.onChange(value)}\n              />\n              <RaisedButton\n                label={<Trans>Choose folder</Trans>}\n                primary={false}\n                style={styles.button}\n                onClick={() => this._onChooseFolder(titleAndMessage)}\n              />\n            </div>\n          );\n        }}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from './OptionalRequire.js';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n}: {|\n  path: string,\n  outputFilename: string,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      console.log(\n        `Archive written at ${outputFilename}, ${archive.pointer()} total bytes.`\n      );\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter.js';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onSaveProjectAs,\n  onAutoSaveProject,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Local file system`,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorizations to open it.`;\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentification from './Utils/GDevelopServices/Authentification';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for Electron powered IDE.\nimport LocalExamples from './ProjectCreation/LocalExamples';\nimport LocalStarters from './ProjectCreation/LocalStarters';\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport { getLocalExporters } from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport { LocalResourceFetcher } from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentification: Authentification) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentification={authentification}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n      resourceFetcher={LocalResourceFetcher}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[LocalFileStorageProvider]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={props => <ElectronMainMenu {...props} />}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog {...props} exporters={getLocalExporters()} />\n              )}\n              renderCreateDialog={props => (\n                <CreateProjectDialog\n                  {...props}\n                  examplesComponent={LocalExamples}\n                  startersComponent={LocalStarters}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport Text from '../UI/Text';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ExamplesList from './ExamplesList';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\n// To add a new example, add it first in resources/examples (at which point you can see it\n// in the desktop version), then run these scripts:\n// * scripts/update-examples-information-from-resources-examples.js (update metadata)\n// * scripts/update-fixtures-from-resources-examples.js (update web-app examples)\n// and upload the examples to `gdevelop-resources` s3.\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onExamplesLoaded: () => void,\n  outputPath: string,\n|};\n\ntype State = {|\n  exampleNames: ?Array<string>,\n|};\n\nexport const showGameFileCreationError = (\n  i18n: I18nType,\n  outputPath: string,\n  rawError: Error\n) => {\n  showErrorBox({\n    message: i18n._(\n      t`Unable to create the game in the specified folder. Check that you have permissions to write in this folder: ${outputPath} or choose another folder.`\n    ),\n    rawError,\n    errorId: 'local-example-creation-error',\n  });\n};\n\nexport default class LocalExamples extends Component<Props, State> {\n  state = {\n    exampleNames: null,\n  };\n\n  componentDidMount() {\n    findExamples(examplesPath => {\n      fs.readdir(examplesPath, (error, exampleNames) => {\n        if (error) {\n          console.error('Unable to read examples:', error);\n          return;\n        }\n\n        this.setState(\n          {\n            exampleNames: exampleNames.filter(name => name !== '.DS_Store'),\n          },\n          () => this.props.onExamplesLoaded()\n        );\n      });\n    });\n  }\n\n  createFromExample = (i18n: I18nType, exampleName: string) => {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose or search for an example to open:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <ExamplesList\n                exampleNames={this.state.exampleNames}\n                onCreateFromExample={exampleName =>\n                  this.createFromExample(i18n, exampleName)\n                }\n              />\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst app = electron ? electron.remote.app : null;\nconst fs = optionalRequire('fs');\nconst process = optionalRequire('process');\n\nconst tryPath = (\n  path: string,\n  onExists: string => void,\n  onNoAccess: Function\n) =>\n  fs.access(path, fs.constants.R_OK, err => {\n    if (!err) onExists(path);\n    else onNoAccess();\n  });\n\nexport const findExamples = (cb: (?string) => void) => {\n  if (!process || !fs) return '';\n\n  const appPath = app ? app.getAppPath() : process.cwd();\n\n  // First try to find examples in app resources folder\n  tryPath(path.join(appPath, '..', 'examples'), cb, () => {\n    tryPath(\n      path.join(appPath, '..', '..', 'app', 'resources', 'examples'),\n      cb,\n      () => {\n        cb(null);\n      }\n    );\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n"],"sourceRoot":""}