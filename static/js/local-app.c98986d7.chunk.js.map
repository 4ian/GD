{"version":3,"sources":["Export/LocalExporters/LocalFileSystem.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","ProjectCreation/LocalStarters.js","ProjectCreation/LocalPathFinder.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalCocos2dExport.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","UI/LocalFolderPicker/index.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/index.js","LocalApp.js","ProjectCreation/LocalExamples.js","ProjectCreation/LocalExamplesFinder.js","Utils/ObjectSplitter.js"],"names":["fs","optionalRequire","path","os","gd","global","mkDir","mkdirsSync","e","console","error","dirExists","existsSync","clearDir","that","this","readdirSync","forEach","file","curPath","lstatSync","isDirectory","unlinkSync","getTempDir","tmpdir","fileNameFrom","fullpath","_isExternalURL","_translateURL","basename","dirNameFrom","dirname","makeAbsolute","filename","baseDirectory","isAbsolute","resolve","normalize","makeRelative","relative","length","charAt","copyFile","source","dest","copySync","writeToFile","contents","outputFileSync","readFile","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","indexOf","push_back","fileExists","statSync","isFile","substr","electron","dialog","remote","writeJSONFile","object","filePath","Promise","reject","Error","content","JSON","stringify","ensureDir","then","writeFile","err","expectedContent","time","performance","now","encoding","verificationTime","info","toFixed","checkFileContent","stringifyException","writeProjectFiles","project","projectPath","serializedProjectObject","serializeToJSObject","isFolderProject","partialObjects","split","pathSeparator","getArrayItemReferenceName","getSlugifiedUniqueNameFromProperty","shouldSplit","splitPaths","Set","isReferenceMagicPropertyName","all","map","partialObject","join","reference","catch","onSaveProject","fileMetadata","fileIdentifier","wasSaved","onSaveProjectAs","defaultPath","fileSystem","assignIn","AbstractFileSystemJS","localFileSystem","browserWindow","getCurrentWindow","options","filters","name","extensions","showSaveDialogSync","ProjectResourcesCopier","copyAllResourcesTo","setProjectFile","onAutoSaveProject","autoSavePath","app","LocalStarters","i18n","exampleName","outputPath","props","findExamples","examplesPath","showGameFileCreationError","onOpen","LocalFileStorageProvider","sendNewGameCreated","ProjectHelper","createNewGDJSProject","onCreate","onChangeOutputPath","findEmptyPath","getPath","noMargin","expand","fullWidth","value","onChange","type","leftIcon","iconSize","src","primaryText","secondaryText","secondaryTextLines","onClick","createFromExample","createEmptyGame","alignItems","justifyContent","label","onShowExamples","Component","basePath","folderName","generateName","accessSync","ex","displayName","kind","component","chooseResources","multiSelections","getLastUsedPath","setLastUsedPath","title","_","selectLocalResourcePath","resources","resourcePath","audioResource","AudioResource","getProjectFile","setFile","setName","imageResource","ImageResource","fontResource","FontResource","videoResource","VideoResource","jsonResource","JsonResource","properties","push","latestPath","showOpenDialog","filePaths","lastUsedPath","parse","dir","filter","isPathInProjectFolder","Window","showConfirmDialog","copyAllToProjectFolder","editors","edit","sendExternalEditorOpened","openPiskel","openJfxr","openYarn","ipcRenderer","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resourceName","originalIndex","getLocalResourceFullPath","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","resourcesManager","getResourcesManager","resource","createOrUpdateResource","getResource","setMetadata","send","newFilePath","jfxr","BrowserWindow","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","devToolsOpen","previewBrowserWindowConfig","hotReloadsCount","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","win","loadURL","webContents","setState","openDevTools","_openPreviewWindow","gamePath","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","getName","backgroundColor","webPreferences","nodeIntegration","networkPreview","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","gdjsRoot","outputDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","timeFunction","previewExportOptions","PreviewExportOptions","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getServerAddress","setDebuggerServerAddress","address","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkHasSubscription","LocalPreviewDebuggerServer","ref","subscriptionChecker","onChangeSubscription","id","mode","open","url","onClose","onExport","onRunPreviewLocally","React","LocalNetworkDialog","actions","key","primary","secondaryActions","cannotBeDismissed","onRequestClose","debuggerServerState","debuggerServerAddress","callbacksList","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","getServerState","registerCallbacks","callbacks","callbacksIndex","getLocalExporters","renderIcon","helpPage","description","exportPipeline","localOnlineCordovaExportPipeline","localOnlineWebExportPipeline","localHTML5ExportPipeline","advanced","localFacebookInstantGamesExportPipeline","localCordovaExportPipeline","localOnlineElectronExportPipeline","localElectronExportPipeline","localCocos2dExportPipeline","experimental","shell","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","renderHeader","updateExportState","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","launchResourcesDownload","exportOutput","launchCompression","renderDoneFooter","openExportFolder","openItem","renderGameButton","debugMode","prevState","onToggle","check","toggled","labelPosition","exportWholeCocos2dProject","archiveOutputFilename","temporaryOutputDir","archiveLocalFolder","outputFilename","styles","container","position","display","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","showSaveDialog","style","undefined","margin","hintText","PureComponent","onlineBuildType","archiveOutputDir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","updateStepProgress","launchOnlineBuild","userProfile","uploadBucketKey","getAuthorizationHeader","profile","buildCordovaAndroid","uid","targets","buildElectron","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","recentProjectFiles","onOpenRecentFile","shortcutMap","useShortcutMap","language","onChooseProject","onCloseProject","onCloseApp","onExportProject","onCreateProject","onOpenProjectManager","onOpenStartPage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","setUpdateStatus","fileTemplate","submenu","accelerator","getElectronAccelerator","onClickSendEvent","item","enabled","isMacLike","editTemplate","role","viewTemplate","windowTemplate","helpTemplate","onClickOpenLink","template","unshift","buildAndSendMenuTemplate","useCommandWithOptions","generateOptions","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","loadAllExtensions","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeBehaviorCode","behaviorCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","writeEventsFunctionsExtension","extension","filepath","LocalEventsFunctionsExtensionOpener","readEventsFunctionExtensionFile","dataObject","readJSONFile","child_process","process","findDevelopmentNewIdeAppPath","developmentElectronAppFolder","cwd","getAllDevelopmentWatchPaths","paths","pathsWithErrors","gdevelopRepositoryRoot","gdjsSourcesRuntimePath","gdExtensionsPath","files","extensionPath","Boolean","extensionDevelopmentWatchPaths","concat","gdjsDevelopmentWatchPaths","importGDJSRuntime","exec","stdout","stderr","onWatchEvent","debounce","eventName","resolvedFilename","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","stopWatchers","watchers","startTime","watchPath","watcher","watch","Object","keys","totalTimeStr","close","LocalFolderPicker","_onChooseFolder","_getTitleAndMessage","titleAndMessage","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","level","log","pointer","pipe","directory","finalize","localFilePath","onProgress","stepCurrentProgress","stepMaxProgress","onOpenWithPicker","unsplit","getReferencePartialObject","referencePath","maxUnsplitDepth","hasAutoSave","compareLastModified","mtime","getTime","onGetAutoSave","internalName","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","createOperations","getOpenErrorMessage","create","authentification","setUpContextMenu","getArguments","isDev","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","eventsFunctionsExtensionsState","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","getStorageProvider","Consumer","unsavedChanges","renderMainMenu","renderPreviewLauncher","renderExportDialog","exporters","renderCreateDialog","examplesComponent","LocalExamples","startersComponent","renderGDJSDevelopmentWatcher","resourceSources","localResourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","showErrorBox","errorId","exampleNames","onExamplesLoaded","onCreateFromExample","tryPath","onExists","onNoAccess","access","constants","R_OK","cb","appPath","getAppPath","createReference","referenceTo","splitObject","currentObject","currentPath","currentReference","Array","isArray","index","itemPath","itemReference","propertyName","propertyPath","propertyReference","unsplitObject","depth","indexOrPropertyName","isReference","has","existingNamesForReference","property","newName","newNameGenerator"],"mappings":"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","file":"static/js/local-app.c98986d7.chunk.js","sourcesContent":["import optionalRequire from '../../Utils/OptionalRequire.js';\nvar fs = optionalRequire('fs-extra');\nvar path = optionalRequire('path');\nvar os = optionalRequire('os');\nconst gd /* TODO: add flow in this file */ = global.gd;\n\nexport default {\n  mkDir: function(path) {\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  dirExists: function(path) {\n    return fs.existsSync(path);\n  },\n  clearDir: function(path) {\n    var files = [];\n    var that = this;\n    try {\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          var curPath = path + '/' + file;\n          if (fs.lstatSync(curPath).isDirectory()) {\n            // recurse\n            that.clearDir(curPath);\n          } else {\n            // delete file\n            try {\n              fs.unlinkSync(curPath);\n            } catch (e) {\n              console.error('fs.unlinkSync(' + curPath + ') failed: ' + e);\n            }\n          }\n        });\n      }\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  },\n  getTempDir: function() {\n    return os.tmpdir();\n  },\n  fileNameFrom: function(fullpath) {\n    if (this._isExternalURL(fullpath)) return fullpath;\n\n    fullpath = this._translateURL(fullpath);\n    return path.basename(fullpath);\n  },\n  dirNameFrom: function(fullpath) {\n    if (this._isExternalURL(fullpath)) return '';\n\n    fullpath = this._translateURL(fullpath);\n    return path.dirname(fullpath);\n  },\n  makeAbsolute: function(filename, baseDirectory) {\n    if (this._isExternalURL(filename)) return filename;\n\n    filename = this._translateURL(filename);\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path.resolve(baseDirectory, path.normalize(filename));\n  },\n  makeRelative: function(filename, baseDirectory) {\n    if (this._isExternalURL(filename)) return filename;\n\n    filename = this._translateURL(filename);\n    return path.relative(baseDirectory, path.normalize(filename));\n  },\n  isAbsolute: function(fullpath) {\n    if (this._isExternalURL(fullpath)) return true;\n\n    if (fullpath.length === 0) return true;\n    fullpath = this._translateURL(fullpath);\n    return (\n      (fullpath.length > 0 && fullpath.charAt(0) === '/') ||\n      (fullpath.length > 1 && fullpath.charAt(1) === ':')\n    );\n  },\n  copyFile: function(source, dest) {\n    //URL are not copied.\n    if (this._isExternalURL(source)) return true;\n\n    source = this._translateURL(source);\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  writeToFile: function(file, contents) {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  },\n  readFile: function(file) {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  },\n  readDir: function(path, ext) {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  },\n  fileExists: function(filename) {\n    filename = this._translateURL(filename);\n    try {\n      const stat = fs.statSync(filename);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  },\n  _isExternalURL: function(filename) {\n    return filename.substr(0, 4) === 'http' || filename.substr(0, 4) === 'ftp';\n  },\n  /**\n   * Return the filename associated to the URL on the server, relative to the games directory.\n   * (i.e: Transform g/mydirectory/myfile.png to mydirectory/myfile.png).\n   */\n  _translateURL: function(filename) {\n    if (filename.substr(0, 2) === 'g/' || filename.substr(0, 2) === 'g\\\\')\n      filename = filename.substr(2);\n\n    return filename;\n  },\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport { type FileMetadata } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport localFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\n\nconst gd: libGDevelop = global.gd;\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nconst writeJSONFile = (object: Object, filePath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    if (content === '') {\n      return Promise.reject(\n        new Error('The content to save on disk is empty. Aborting.')\n      );\n    }\n\n    return fs\n      .ensureDir(path.dirname(filePath))\n      .then(\n        () =>\n          new Promise((resolve, reject) => {\n            fs.writeFile(filePath, content, (err: ?Error) => {\n              if (err) {\n                return reject(err);\n              }\n\n              return resolve();\n            });\n          })\n      )\n      .then(() => checkFileContent(filePath, content));\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeJSONFile(serializedProjectObject, filePath).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeJSONFile(serializedProjectObject, filePath).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata }; // Save was properly done\n  });\n};\n\nexport const onSaveProjectAs = (\n  project: gdProject,\n  fileMetadata: ?FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const fileSystem = assignIn(new gd.AbstractFileSystemJS(), localFileSystem);\n  const browserWindow = electron.remote.getCurrentWindow();\n  const options = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    return Promise.reject('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, options);\n  if (!filePath) {\n    return Promise.resolve({ wasSaved: false, fileMetadata });\n  }\n  const projectPath = path.dirname(filePath);\n\n  // TODO: Ideally, errors while copying resources should be reported.\n  gd.ProjectResourcesCopier.copyAllResourcesTo(\n    project,\n    fileSystem,\n    projectPath,\n    true, // Update the project with the new resource paths\n    false, // Don't move absolute files\n    true // Keep relative files folders structure.\n  );\n\n  // Update the project with the new file path (resources have already been updated)\n  project.setProjectFile(filePath);\n\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return {\n      wasSaved: true,\n      fileMetadata: {\n        ...fileMetadata,\n        fileIdentifier: filePath,\n      },\n    }; // Save was properly done\n  });\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeJSONFile(serializeToJSObject(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport RaisedButton from '../UI/RaisedButton';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport Text from '../UI/Text';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport { List, ListItem } from '../UI/List';\nimport Subheader from '../UI/Subheader';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ListIcon from '../UI/ListIcon';\nimport { showGameFileCreationError } from './LocalExamples';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nimport { findEmptyPath } from './LocalPathFinder';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nvar fs = optionalRequire('fs-extra');\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onCreate: (\n    gdProject,\n    storageProvider: ?StorageProvider,\n    fileMetadata: ?FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onShowExamples: () => void,\n  outputPath: string,\n|};\n\ntype State = {||};\n\nexport default class LocalStarters extends Component<Props, State> {\n  createFromExample(i18n: I18nType, exampleName: string) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  }\n\n  createEmptyGame(i18n: I18nType) {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    try {\n      fs.mkdirsSync(outputPath);\n    } catch (error) {\n      showGameFileCreationError(i18n, outputPath, error);\n      return;\n    }\n\n    const project: gdProject = gd.ProjectHelper.createNewGDJSProject();\n    const filePath = path.join(outputPath, 'game.json');\n    project.setProjectFile(filePath);\n    this.props.onCreate(project, LocalFileStorageProvider, {\n      fileIdentifier: filePath,\n    });\n    sendNewGameCreated('');\n  }\n\n  componentDidMount() {\n    if (this.props.outputPath === '')\n      if (path && app)\n        this.props.onChangeOutputPath(\n          findEmptyPath(\n            path.join(app.getPath('documents'), 'GDevelop projects')\n          )\n        );\n  }\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose a game to use as a starter:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <Column expand noMargin>\n                <List>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/platformer.png\"\n                      />\n                    }\n                    primaryText={<Trans>Platformer</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A simple platform game, with coins to collect, moving\n                        platforms and enemies.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'platformer')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/space-shooter.png\"\n                      />\n                    }\n                    primaryText={<Trans>8-bit Space Shooter</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A beautiful, retro side-scrolling shooter where you must\n                        defeat incoming enemies with your mecha transforming\n                        spaceship. Huge boss included!\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'space-shooter')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/geometry-monster.png\"\n                      />\n                    }\n                    primaryText={<Trans>Geometry Monster</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A hyper casual endless game where you have to collect\n                        shapes and avoid bombs, with a progressively increasing\n                        difficulty.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'geometry-monster')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/isometric-game.png\"\n                      />\n                    }\n                    primaryText={<Trans>Isometric game</Trans>}\n                    secondaryText={\n                      <Trans>\n                        An example of an isometric game where you can explore a\n                        map with your character.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'isometric-game')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/downhill-bike-physics-demo.png\"\n                      />\n                    }\n                    primaryText=\"Downhill Bike Racing\"\n                    secondaryText={\n                      <Trans>\n                        An example of a 2D physics based game, where players\n                        have to reach the end as fast as possible.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'downhill-bike-physics-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/pairs.png\"\n                      />\n                    }\n                    primaryText=\"Pairs\"\n                    secondaryText={\n                      <Trans>\n                        Find all matching pairs of cards in this relaxing game.\n                        Use tweens to create smooth, natural animations with a\n                        few events.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createFromExample(i18n, 'pairs')}\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/new.png\"\n                      />\n                    }\n                    primaryText={<Trans>Empty game</Trans>}\n                    secondaryText={\n                      <Trans>Start a new game from scratch.</Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() => this.createEmptyGame(i18n)}\n                  />\n                  <Subheader>\n                    <Trans>Advanced</Trans>\n                  </Subheader>\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/particle-effects-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Particle Effects Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo of various high quality particle effects (fire,\n                        magic, snow, rune spell...) that you can try and use in\n                        your game.\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'particle-effects-demo')\n                    }\n                  />\n                  <ListItem\n                    leftIcon={\n                      <ListIcon\n                        iconSize={40}\n                        src=\"res/starters_icons/game-feel-demo.png\"\n                      />\n                    }\n                    primaryText={<Trans>Game Feel Demo</Trans>}\n                    secondaryText={\n                      <Trans>\n                        A demo showing how to enhance the \"game feel\" of your\n                        project: VFX, shot trail, ambient sounds and SFX,\n                        screenshake, wobble...\n                      </Trans>\n                    }\n                    secondaryTextLines={2}\n                    onClick={() =>\n                      this.createFromExample(i18n, 'game-feel-demo')\n                    }\n                  />\n                </List>\n                <Line alignItems=\"center\" justifyContent=\"center\">\n                  <RaisedButton\n                    label={<Trans>See examples</Trans>}\n                    onClick={() => this.props.onShowExamples()}\n                  />\n                </Line>\n              </Column>\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","import generateName from '../Utils/NewNameGenerator';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\nexport const findEmptyPath = basePath => {\n  if (!path) return basePath;\n\n  const folderName = generateName('My project', name => {\n    try {\n      fs.accessSync(path.join(basePath, name));\n    } catch (ex) {\n      return false;\n    }\n    return true;\n  });\n\n  return path.join(basePath, folderName);\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\nimport type { ResourceKind } from './ResourceSource.flow';\nimport { type ResourceSourceComponentProps } from './ResourceSource.flow';\nimport { Component } from 'react';\nimport {\n  isPathInProjectFolder,\n  copyAllToProjectFolder,\n} from './ResourceUtils.js';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport Window from '../Utils/Window';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nexport default [\n  {\n    name: 'localAudioFileOpener',\n    displayName: 'Choose a new audio file',\n    kind: 'audio',\n    component: class LocalAudioFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an audio file`),\n          name: i18n._(t`Audio files`),\n          extensions: ['wav', 'mp3', 'ogg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'audio'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const audioResource = new gd.AudioResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            audioResource.setFile(path.relative(projectPath, resourcePath));\n            audioResource.setName(path.relative(projectPath, resourcePath));\n\n            return audioResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFileOpener',\n    displayName: 'Choose a new image',\n    kind: 'image',\n    component: class LocalFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose an image`),\n          name: i18n._(t`Image files`),\n          extensions: ['png', 'jpg'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'image'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const imageResource = new gd.ImageResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            imageResource.setFile(path.relative(projectPath, resourcePath));\n            imageResource.setName(path.relative(projectPath, resourcePath));\n\n            return imageResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localFontFileOpener',\n    displayName: 'Choose a new font file',\n    kind: 'font',\n    component: class LocalFontFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a font file`),\n          name: i18n._(t`Font files`),\n          extensions: ['ttf', 'otf'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'font'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const fontResource = new gd.FontResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            fontResource.setFile(path.relative(projectPath, resourcePath));\n            fontResource.setName(path.relative(projectPath, resourcePath));\n\n            return fontResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localVideoFileOpener',\n    displayName: 'Choose a new video file',\n    kind: 'video',\n    component: class LocalVideoFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a video file`),\n          name: i18n._(t`Video files`),\n          extensions: ['mp4'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'video'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const videoResource = new gd.VideoResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            videoResource.setFile(path.relative(projectPath, resourcePath));\n            videoResource.setName(path.relative(projectPath, resourcePath));\n\n            return videoResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n  {\n    name: 'localJsonFileOpener',\n    displayName: 'Choose a new json file',\n    kind: 'json',\n    component: class LocalJsonFileOpener extends Component<ResourceSourceComponentProps> {\n      chooseResources = (\n        project: gdProject,\n        multiSelections: boolean = true\n      ): Promise<Array<any>> => {\n        const { i18n, getLastUsedPath, setLastUsedPath } = this.props;\n        const options = {\n          multiSelections,\n          title: i18n._(t`Choose a json file`),\n          name: i18n._(t`JSON file`),\n          extensions: ['json'],\n        };\n        return selectLocalResourcePath(\n          i18n,\n          project,\n          options,\n          getLastUsedPath,\n          setLastUsedPath,\n          'json'\n        ).then(resources => {\n          return resources.map(resourcePath => {\n            const jsonResource = new gd.JsonResource();\n            const projectPath = path.dirname(project.getProjectFile());\n            jsonResource.setFile(path.relative(projectPath, resourcePath));\n            jsonResource.setName(path.relative(projectPath, resourcePath));\n\n            return jsonResource;\n          });\n        });\n      };\n\n      render() {\n        return null;\n      }\n    },\n  },\n];\n\nconst selectLocalResourcePath = (\n  i18n: I18nType,\n  project: gdProject,\n  options: {\n    multiSelections: boolean,\n    title: string,\n    name: string,\n    extensions: Array<string>,\n  },\n  getLastUsedPath: (project: gdProject, kind: ResourceKind) => string,\n  setLastUsedPath: (\n    project: gdProject,\n    kind: ResourceKind,\n    path: string\n  ) => void,\n  kind: ResourceKind\n): Promise<Array<string>> => {\n  if (!dialog) return Promise.reject('Not supported');\n\n  const properties = ['openFile'];\n  if (options.multiSelections) properties.push('multiSelections');\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: options.title,\n      properties,\n      filters: [{ name: options.name, extensions: options.extensions }],\n      defaultPath: latestPath,\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return [];\n\n      const lastUsedPath = path.parse(filePaths[0]).dir;\n      setLastUsedPath(project, kind, lastUsedPath);\n\n      const outsideProjectFolderPaths = filePaths.filter(\n        path => !isPathInProjectFolder(project, path)\n      );\n\n      if (outsideProjectFolderPaths.length) {\n        const answer = Window.showConfirmDialog(\n          i18n._(\n            t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n          )\n        );\n\n        if (answer) {\n          return copyAllToProjectFolder(project, filePaths);\n        }\n      }\n\n      return filePaths;\n    });\n};\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    displayName: 'Edit with Piskel',\n    kind: 'image',\n    edit: options => {\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    displayName: 'Create/Edit a Sound effect with Jfxr (*.wav)',\n    kind: 'audio',\n    edit: options => {\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    displayName: 'Create/Edit a Dialogue Tree with Yarn (*.json)',\n    kind: 'json',\n    edit: options => {\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils.js';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport localFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker from '../../../Profile/SubscriptionChecker';\nimport { LocalPreviewDebuggerServer } from './LocalPreviewDebuggerServer';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst BrowserWindow = electron ? electron.remote.BrowserWindow : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n  onChangeSubscription?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  devToolsOpen: boolean,\n  previewBrowserWindowConfig: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    devToolsOpen: false,\n    previewBrowserWindowConfig: null,\n    hotReloadsCount: 0,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionChecker = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionChecker = null;\n\n  _openPreviewBrowserWindow = () => {\n    if (\n      !BrowserWindow ||\n      !this.state.previewBrowserWindowConfig ||\n      !this.state.previewGamePath\n    )\n      return;\n\n    const win = new BrowserWindow(this.state.previewBrowserWindowConfig);\n    win.loadURL(`file://${this.state.previewGamePath}/index.html`);\n    win.webContents.on('devtools-opened', () => {\n      this.setState({ devToolsOpen: true });\n    });\n    win.webContents.on('devtools-closed', () => {\n      this.setState({ devToolsOpen: false });\n    });\n    if (this.state.devToolsOpen) win.openDevTools();\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowConfig: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            nodeIntegration: true,\n          },\n        },\n        previewGamePath: gamePath,\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<any> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = this.getPreviewDebuggerServer().getServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.setDebuggerServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return LocalPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            this.setState({ networkPreviewDialogOpen: false });\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() => {\n            if (this.props.onChangeSubscription)\n              this.props.onChangeSubscription();\n          }}\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        cannotBeDismissed={true}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const LocalPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getServerAddress: () => debuggerServerAddress,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localCocos2dExportPipeline } from './LocalCocos2dExport';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport.js';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport.js';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport PhoneIphone from '@material-ui/icons/PhoneIphone';\nimport LaptopMac from '@material-ui/icons/LaptopMac';\nimport Folder from '@material-ui/icons/Folder';\nimport Facebook from '../../UI/CustomSvgIcons/Facebook';\nimport Cordova from '../../UI/CustomSvgIcons/Cordova';\nimport Chrome from '../../UI/CustomSvgIcons/Chrome';\n\nexport const getLocalExporters = (): Array<Exporter> => [\n  {\n    name: <Trans>Android (&amp; iOS coming soon)</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios',\n    description: (\n      <Trans>\n        Package your game for Android directly from GDevelop. iOS support is\n        coming soon!\n      </Trans>\n    ),\n    key: 'localonlinecordovaexport',\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    name: <Trans>Web (upload online)</Trans>,\n    renderIcon: props => <Chrome {...props} />,\n    helpPage: '/publishing/web',\n    description: (\n      <Trans>\n        Upload your game online directly from GDevelop and share the link to\n        players. Play to your game using your browser on computers and mobile\n        phones.\n      </Trans>\n    ),\n    key: 'localonlinewebexport',\n    exportPipeline: localOnlineWebExportPipeline,\n  },\n  {\n    name: <Trans>Local folder</Trans>,\n    renderIcon: props => <Folder {...props} />,\n    helpPage: '/publishing/html5_game_in_a_local_folder',\n    description: (\n      <Trans>\n        Build the game locally as a HTML5 game. You can then publish it on\n        website like Kongregate, Game Jolt, itch.io, Poki...\n      </Trans>\n    ),\n    key: 'localexport',\n    exportPipeline: localHTML5ExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Facebook Instant Games</Trans>,\n    renderIcon: props => <Facebook {...props} />,\n    helpPage: '/publishing/publishing-to-facebook-instant-games',\n    description: (\n      <Trans>\n        Package your game as a Facebook Instant Games that can be played on\n        Facebook Messenger.\n      </Trans>\n    ),\n    key: 'localfacebookinstantgames',\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>iOS &amp; Android (manual)</Trans>,\n    renderIcon: props => <Cordova {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cordova',\n    description: (\n      <Trans>\n        Build the game locally as a Cordova project, and export it manually to\n        iOS or Android with Cordova developers tools.\n      </Trans>\n    ),\n    key: 'localcordovaexport',\n    exportPipeline: localCordovaExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux',\n    description: (\n      <Trans>\n        Package your game as an app for Windows, macOS or Linux directly from\n        GDevelop.\n      </Trans>\n    ),\n    key: 'localonlineelectronexport',\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    name: <Trans>Windows/macOS/Linux (manual)</Trans>,\n    renderIcon: props => <LaptopMac {...props} />,\n    helpPage: '/publishing/windows-macos-linux-with-electron',\n    description: (\n      <Trans>\n        Build the game locally and export it manually to Windows, macOS or Linux\n        with third-party developer tools.\n      </Trans>\n    ),\n    key: 'localelectronexport',\n    exportPipeline: localElectronExportPipeline,\n    advanced: true,\n  },\n  {\n    name: <Trans>Cocos2d-JS</Trans>,\n    renderIcon: props => <PhoneIphone {...props} />,\n    helpPage: '/publishing/android_and_ios_with_cocos2d-js',\n    description: (\n      <Trans>\n        Export your game using Cocos2d-JS game engine. The game can be compiled\n        for Android or iOS if you install Cocos2d-JS developer tools.\n      </Trans>\n    ),\n    key: 'localcocos2dexport',\n    exportPipeline: localCocos2dExportPipeline,\n    experimental: true,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport Toggle from '../../UI/Toggle';\nimport {\n  DoneFooter,\n  ExplanationHeader,\n} from '../GenericExporters/Cocos2dExport';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n  debugMode: boolean,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n|};\n\ntype ExportOutput = null;\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCocos2dExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cocos2d',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n    debugMode: false,\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(prevState => ({ ...prevState, outputDir }));\n          }}\n          fullWidth\n        />\n      </Line>\n      <Line>\n        <Toggle\n          onToggle={(e, check) =>\n            updateExportState(prevState => ({\n              ...prevState,\n              debugMode: check,\n            }))\n          }\n          toggled={exportState.debugMode}\n          labelPosition=\"right\"\n          label={\n            <Trans>\n              Debug mode (show FPS counter and stats in the bottom left)\n            </Trans>\n          }\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    exporter.exportWholeCocos2dProject(\n      context.project,\n      context.exportState.debugMode,\n      context.exportState.outputDir\n    );\n    exporter.delete();\n\n    return Promise.resolve(null);\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve(null);\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openItem(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport localFileSystem from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst app = electron ? electron.remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openItem(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport RaisedButton from '../RaisedButton';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nexport default class LocalFilePicker extends PureComponent<Props, *> {\n  onChooseFolder = () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: this.props.title,\n        filters: this.props.filters,\n        message: this.props.message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePath }) => {\n        this.props.onChange(filePath || '');\n      });\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          ...styles.container,\n          width: this.props.fullWidth ? '100%' : undefined,\n        }}\n      >\n        <TextField\n          margin=\"dense\"\n          style={styles.textField}\n          type=\"text\"\n          hintText={t`Choose a file`}\n          value={this.props.value}\n          onChange={(event, value) => this.props.onChange(value)}\n        />\n        <RaisedButton\n          label={<Trans>Choose</Trans>}\n          style={styles.button}\n          onClick={this.onChooseFolder}\n        />\n      </div>\n    );\n  }\n}\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineCordovaExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  canLaunchBuild: (exportState: ExportState) => !!exportState.targets.length,\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      profile.uid,\n      uploadBucketKey,\n      exportState.targets\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type UserProfile } from '../../Profile/UserProfileContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport localFileSystem from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  canLaunchBuild: () => true,\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Publish online</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchResourcesDownload: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    return Promise.resolve({ temporaryOutputDir });\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    userProfile: UserProfile,\n    uploadBucketKey: string\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = userProfile;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(getAuthorizationHeader, profile.uid, uploadBucketKey);\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport { getElectronAccelerator } from '../KeyboardShortcuts';\nimport { useShortcutMap } from '../KeyboardShortcuts';\nimport { t } from '@lingui/macro';\nimport { isMacLike } from '../Utils/Platform';\nimport { type MainMenuProps } from './MainMenu.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype MainMenuEvent =\n  | 'main-menu-open'\n  | 'main-menu-open-recent'\n  | 'main-menu-save'\n  | 'main-menu-save-as'\n  | 'main-menu-close'\n  | 'main-menu-close-app'\n  | 'main-menu-export'\n  | 'main-menu-create'\n  | 'main-menu-open-project-manager'\n  | 'main-menu-open-start-page'\n  | 'main-menu-open-debugger'\n  | 'main-menu-open-about'\n  | 'main-menu-open-preferences'\n  | 'main-menu-open-language'\n  | 'main-menu-open-profile'\n  | 'update-status';\n\ntype MenuItemTemplate =\n  | {|\n      onClickSendEvent?: MainMenuEvent,\n      onClickOpenLink?: string,\n      accelerator?: string,\n      enabled?: boolean,\n      label?: string,\n      role?: string,\n      eventArgs?: any,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      label: string,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n      role: string,\n    |}\n  | {|\n      type: 'separator',\n    |}\n  | {|\n      role: string,\n    |};\n\ntype RootMenuTemplate =\n  | {|\n      label?: string,\n      role?: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      role: string,\n      submenu: Array<MenuItemTemplate>,\n    |}\n  | {|\n      submenu: Array<MenuItemTemplate>,\n    |};\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\nconst buildAndSendMenuTemplate = (\n  project,\n  i18n,\n  recentProjectFiles,\n  shortcutMap\n) => {\n  const fileTemplate = {\n    label: i18n._(t`File`),\n    submenu: [\n      {\n        label: i18n._(t`Create a New Project...`),\n        accelerator: getElectronAccelerator(shortcutMap['CREATE_NEW_PROJECT']),\n        onClickSendEvent: 'main-menu-create',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Open...`),\n        accelerator: getElectronAccelerator(shortcutMap['OPEN_PROJECT']),\n        onClickSendEvent: 'main-menu-open',\n      },\n      {\n        label: i18n._(t`Open Recent`),\n        submenu: recentProjectFiles.map(item => ({\n          label: item.fileMetadata.fileIdentifier,\n          onClickSendEvent: 'main-menu-open-recent',\n          eventArgs: item,\n        })),\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Save`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT']),\n        onClickSendEvent: 'main-menu-save',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Save as...`),\n        accelerator: getElectronAccelerator(shortcutMap['SAVE_PROJECT_AS']),\n        onClickSendEvent: 'main-menu-save-as',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Export (web, iOS, Android)...`),\n        accelerator: getElectronAccelerator(shortcutMap['EXPORT_GAME']),\n        onClickSendEvent: 'main-menu-export',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Close Project`),\n        accelerator: getElectronAccelerator(shortcutMap['CLOSE_PROJECT']),\n        onClickSendEvent: 'main-menu-close',\n        enabled: !!project,\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    fileTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`My Profile`),\n        onClickSendEvent: 'main-menu-open-profile',\n      },\n      {\n        label: i18n._(t`Preferences`),\n        onClickSendEvent: 'main-menu-open-preferences',\n      },\n      {\n        label: i18n._(t`Language`),\n        onClickSendEvent: 'main-menu-open-language',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Exit GDevelop`),\n        accelerator: getElectronAccelerator(shortcutMap['QUIT_APP']),\n        onClickSendEvent: 'main-menu-close-app',\n      }\n    );\n  }\n\n  const editTemplate = {\n    label: i18n._(t`Edit`),\n    submenu: [\n      { role: 'undo' },\n      { role: 'redo' },\n      { type: 'separator' },\n      { role: 'cut' },\n      { role: 'copy' },\n      { role: 'paste' },\n      { role: 'pasteandmatchstyle' },\n      { role: 'delete' },\n      { role: 'selectall' },\n    ],\n  };\n\n  const viewTemplate = {\n    label: i18n._(t`View`),\n    submenu: [\n      {\n        label: i18n._(t`Show Project Manager`),\n        accelerator: getElectronAccelerator(\n          shortcutMap['OPEN_PROJECT_MANAGER']\n        ),\n        onClickSendEvent: 'main-menu-open-project-manager',\n        enabled: !!project,\n      },\n      {\n        label: i18n._(t`Show Start Page`),\n        onClickSendEvent: 'main-menu-open-start-page',\n      },\n      {\n        label: i18n._(t`Open Debugger`),\n        onClickSendEvent: 'main-menu-open-debugger',\n        enabled: !!project,\n      },\n      { type: 'separator' },\n      { role: 'toggledevtools' },\n      { type: 'separator' },\n      { role: 'togglefullscreen' },\n    ],\n  };\n\n  const windowTemplate = {\n    label: i18n._(t`Window`),\n    role: 'window',\n    submenu: [{ label: i18n._(t`Minimize`), role: 'minimize' }],\n  };\n\n  const helpTemplate = {\n    label: i18n._(t`Help`),\n    role: 'help',\n    submenu: [\n      {\n        label: i18n._(t`GDevelop website`),\n        onClickOpenLink: 'http://gdevelop-app.com',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Community Forums`),\n        onClickOpenLink: 'https://forum.gdevelop-app.com',\n      },\n      {\n        label: i18n._(t`Community Discord Chat`),\n        onClickOpenLink: 'https://discord.gg/rjdYHvj',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Contribute to GDevelop`),\n        onClickOpenLink: 'https://gdevelop-app.com/contribute/',\n      },\n      {\n        label: i18n._(t`Create Extensions for GDevelop`),\n        onClickOpenLink:\n          'https://github.com/4ian/GDevelop/blob/master/newIDE/README-extensions.md',\n      },\n      { type: 'separator' },\n      {\n        label: i18n._(t`Help to Translate GDevelop`),\n        onClickOpenLink: 'https://crowdin.com/project/gdevelop',\n      },\n      {\n        label: i18n._(t`Report a wrong translation`),\n        onClickOpenLink: 'https://github.com/4ian/GDevelop/issues/969',\n      },\n    ],\n  };\n  if (!isMacLike()) {\n    helpTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`About GDevelop`),\n        onClickSendEvent: 'main-menu-open-about',\n      }\n    );\n  }\n\n  const template: Array<RootMenuTemplate> = [\n    fileTemplate,\n    editTemplate,\n    viewTemplate,\n    windowTemplate,\n    helpTemplate,\n  ];\n\n  if (isMacLike()) {\n    template.unshift({\n      label: i18n._(t`GDevelop 5`),\n      submenu: [\n        {\n          label: i18n._(t`About GDevelop`),\n          onClickSendEvent: 'main-menu-open-about',\n        },\n        { type: 'separator' },\n        {\n          label: i18n._(t`My Profile`),\n          onClickSendEvent: 'main-menu-open-profile',\n        },\n        {\n          label: i18n._(t`Preferences`),\n          onClickSendEvent: 'main-menu-open-preferences',\n        },\n        {\n          label: i18n._(t`Language`),\n          onClickSendEvent: 'main-menu-open-language',\n        },\n        { type: 'separator' },\n        { role: 'services', submenu: [] },\n        { type: 'separator' },\n        { role: 'hide' },\n        { role: 'hideothers' },\n        { role: 'unhide' },\n        { type: 'separator' },\n        { role: 'quit' },\n      ],\n    });\n\n    editTemplate.submenu.push(\n      { type: 'separator' },\n      {\n        label: i18n._(t`Speech`),\n        submenu: [{ role: 'startspeaking' }, { role: 'stopspeaking' }],\n      }\n    );\n\n    windowTemplate.submenu = [\n      { role: 'minimize' },\n      { role: 'zoom' },\n      { type: 'separator' },\n      { role: 'front' },\n    ];\n  }\n\n  if (ipcRenderer) {\n    ipcRenderer.send('set-main-menu', template);\n  }\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = (props: MainMenuProps) => {\n  const { i18n, project, recentProjectFiles, onOpenRecentFile } = props;\n  const shortcutMap = useShortcutMap();\n  const language = i18n.language;\n\n  useIPCEventListener('main-menu-open', props.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', props.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', props.onSaveProject);\n  useIPCEventListener('main-menu-save-as', props.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', props.onCloseProject);\n  useIPCEventListener('main-menu-close-app', props.onCloseApp);\n  useIPCEventListener('main-menu-export', props.onExportProject);\n  useIPCEventListener('main-menu-create', props.onCreateProject);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    props.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-start-page', props.onOpenStartPage);\n  useIPCEventListener('main-menu-open-debugger', props.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', props.onOpenAbout);\n  useIPCEventListener('main-menu-open-preferences', props.onOpenPreferences);\n  useIPCEventListener('main-menu-open-language', props.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', props.onOpenProfile);\n  useIPCEventListener('update-status', props.setUpdateStatus);\n\n  React.useEffect(\n    () => {\n      buildAndSendMenuTemplate(project, i18n, recentProjectFiles, shortcutMap);\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples }) => {\n  return findGDJS().then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport slugs from 'slugs';\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n  const outputDir = os.tmpdir() + '/GDGeneratedEventsFunctions';\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = electron.remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nimport debounce from 'lodash/debounce';\nconst electron = optionalRequire('electron');\nconst fs = optionalRequire('fs');\nconst child_process = optionalRequire('child_process');\nconst process = optionalRequire('process');\nconst path = optionalRequire('path');\n\ntype DevelopmentWatchPaths = {\n  paths: Array<string>,\n  pathsWithErrors: { [string]: Error },\n};\n\n/**\n * Returns the folder corresponding to newIDE/app in **development**. Works\n * only when running in Electron.\n */\nconst findDevelopmentNewIdeAppPath = () /*: string */ => {\n  if (!electron) return '';\n\n  const developmentElectronAppFolder = process.cwd();\n  return path.join(developmentElectronAppFolder, '../app');\n};\n\n/**\n * Returns the list of folders to watch containing the **sources** of\n * GDJS and Extensions, found relatively to the current working directory which is the\n * Electron working directory during **development**. Won't work\n * if running on production.\n */\nconst getAllDevelopmentWatchPaths = (): Promise<DevelopmentWatchPaths> => {\n  if (!electron || !fs)\n    return Promise.resolve({ paths: [], pathsWithErrors: {} });\n\n  const pathsWithErrors: { [string]: Error } = {};\n\n  const gdevelopRepositoryRoot = path.join(\n    findDevelopmentNewIdeAppPath(),\n    '../..'\n  );\n  const gdjsSourcesRuntimePath = path.join(\n    gdevelopRepositoryRoot,\n    'GDJS/Runtime'\n  );\n  const gdExtensionsPath = path.join(gdevelopRepositoryRoot, 'Extensions');\n\n  const getExtensionDevelopmentWatchPaths = (): Promise<Array<string>> =>\n    new Promise(resolve =>\n      fs.readdir(gdExtensionsPath, (error: ?Error, files: Array<string>) => {\n        if (error) {\n          pathsWithErrors[gdExtensionsPath] = error;\n          resolve([]);\n          return;\n        }\n\n        resolve(\n          Promise.all(\n            files.map(\n              (file): Promise<?string> =>\n                new Promise(resolve => {\n                  const extensionPath = path.join(gdExtensionsPath, file);\n                  fs.stat(extensionPath, (error, stat) => {\n                    if (error) {\n                      pathsWithErrors[extensionPath] = error;\n                      resolve(extensionPath);\n                      return;\n                    }\n\n                    resolve(stat.isDirectory() ? extensionPath : null);\n                  });\n                })\n            )\n          ).then(paths => paths.filter(Boolean))\n        );\n      })\n    );\n\n  const getGDJSDevelopmentWatchPaths = (): Promise<Array<string>> => {\n    return Promise.resolve(\n      [gdjsSourcesRuntimePath].concat(\n        [\n          // List of all sub folders in GDJS Runtime.\n          // If you add any folder, add it here too so that it\n          // can be watched for changes.\n          'Cocos2d',\n          'Cordova',\n          'Electron',\n          'FacebookInstantGames',\n          'cocos-renderers',\n          'cocos-sound-manager',\n          'events-tools',\n          'fontfaceobserver-font-manager',\n          'howler-sound-manager',\n          'libs',\n          'pixi-renderers',\n          'websocket-debugger-client',\n        ].map(folder => path.join(gdjsSourcesRuntimePath, folder))\n      )\n    );\n  };\n\n  return getExtensionDevelopmentWatchPaths().then(\n    extensionDevelopmentWatchPaths => {\n      return getGDJSDevelopmentWatchPaths().then(gdjsDevelopmentWatchPaths => {\n        return {\n          paths: [\n            ...gdjsDevelopmentWatchPaths,\n            ...extensionDevelopmentWatchPaths,\n          ],\n          pathsWithErrors,\n        };\n      });\n    }\n  );\n};\n\n/**\n * Launch the newIDE script `import-GDJS-Runtime`.\n */\nconst importGDJSRuntime = (): Promise<void> => {\n  if (!child_process || !path) return Promise.reject(new Error('Unsupported'));\n\n  return new Promise((resolve, reject) => {\n    child_process.exec(\n      `node \"${path.join(\n        findDevelopmentNewIdeAppPath(),\n        'scripts/import-GDJS-Runtime.js'\n      )}\"`,\n      (error, stdout, stderr) => {\n        if (error) {\n          console.error(`GDJS Runtime update error: ${error}`);\n          reject(error);\n          return;\n        }\n\n        console.info(`GDJS Runtime update: ${stdout}`);\n\n        if (stderr) {\n          console.error(`GDJS Runtime update error: ${stderr}`);\n          reject(new Error('Error while updating GDJS Runtime'));\n          return;\n        }\n\n        resolve();\n      }\n    );\n  });\n};\n\n/**\n * Callback for fs.watch, so that  whenever a source file is changed,\n * it relaunchs automatically the script to import.\n */\nconst onWatchEvent = debounce((event: ?string, filename: ?string) => {\n  const eventName = event || 'unknown-event';\n  const resolvedFilename = filename || 'unknown-file';\n  console.info(\n    `GDJS/extensions watchers found a \"${eventName}\" in ${resolvedFilename}, updating GDJS Runtime...`\n  );\n  importGDJSRuntime().catch(() => {});\n}, 100 /* Avoid running the script too much in case multiple changes are fired at the same time. */);\n\nconst genericWatcherErrorMessage =\n  'Error in watcher for GDJS Runtime - manually call npm run `node import-GDJS-Runtime.js` in the newIDE/app/scripts folder if you make changes to GDJS.';\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      let stopWatchers = false;\n      let watchers = [];\n      let startTime = performance.now();\n      getAllDevelopmentWatchPaths().then(({ paths, pathsWithErrors }) => {\n        // There is a non nul chance that for some reason the effect was cleaned up\n        // before we retrieved all the paths. Stop there if it's the case.\n        if (stopWatchers) return;\n\n        if (!fs) {\n          console.error(\n            \"Unable to use 'fs' from Node.js to watch changes in GDJS.\"\n          );\n          return;\n        }\n\n        // Reload extensions when the component is first mounted\n        importGDJSRuntime().catch(() => {});\n\n        // Create watchers\n        paths.forEach(watchPath => {\n          let watcher = null;\n          try {\n            watcher = fs.watch(watchPath, {}, onWatchEvent);\n          } catch (error) {\n            pathsWithErrors[watchPath] = error;\n            return null;\n          }\n\n          if (watcher) {\n            watcher.on('error', error => {\n              console.warn(genericWatcherErrorMessage, error);\n            });\n\n            watchers.push(watcher);\n          }\n        });\n\n        if (Object.keys(pathsWithErrors).length) {\n          console.warn(\n            'Error while setting up watchers for some paths: ',\n            pathsWithErrors\n          );\n        }\n\n        const totalTimeStr = (performance.now() - startTime).toFixed(2);\n        if (watchers.length) {\n          console.info(\n            `Watchers for GDJS Runtime/extensions installed in ${totalTimeStr}ms.`\n          );\n        } else {\n          console.warn(\n            `No watchers for GDJS Runtime/extensions installed (took ${totalTimeStr}ms).`\n          );\n        }\n      });\n\n      // Close all the watchers when the React effect is unregistered\n      return () => {\n        stopWatchers = true;\n        if (!watchers.length) return;\n\n        watchers.forEach(watcher => {\n          watcher.close();\n        });\n        console.info('Watchers for GDJS Runtime closed.');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { t } from '@lingui/macro';\nimport { type I18n as I18nType } from '@lingui/core';\n\nimport React, { PureComponent } from 'react';\nimport TextField from '../TextField';\nimport RaisedButton from '../RaisedButton';\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  type: 'export' | 'create-game',\n  value: string,\n  onChange: string => void,\n  defaultPath?: string,\n  fullWidth?: boolean,\n|};\n\ntype TitleAndMessage = {|\n  title: ?string,\n  message: ?string,\n|};\n\nexport default class LocalFolderPicker extends PureComponent<Props, {||}> {\n  _onChooseFolder = ({ title, message }: TitleAndMessage) => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = electron.remote.getCurrentWindow();\n    dialog\n      .showOpenDialog(browserWindow, {\n        title,\n        properties: ['openDirectory', 'createDirectory'],\n        message,\n        defaultPath: this.props.defaultPath,\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return;\n        this.props.onChange(filePaths[0]);\n      });\n  };\n\n  _getTitleAndMessage = (i18n: I18nType): TitleAndMessage => {\n    const { type } = this.props;\n    if (type === 'export') {\n      return {\n        title: i18n._(t`Choose an export folder`),\n        message: i18n._(t`Choose where to export the game`),\n      };\n    } else if (type === 'create-game') {\n      return {\n        title: i18n._(t`Choose a folder for the new game`),\n        message: i18n._(t`Choose where to create the game`),\n      };\n    }\n\n    return {\n      title: undefined,\n      message: undefined,\n    };\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => {\n          const titleAndMessage = this._getTitleAndMessage(i18n);\n          return (\n            <div\n              style={{\n                ...styles.container,\n                width: this.props.fullWidth ? '100%' : undefined,\n              }}\n            >\n              <TextField\n                margin=\"dense\"\n                style={styles.textField}\n                type=\"text\"\n                hintText={titleAndMessage.title}\n                value={this.props.value}\n                onChange={(event, value) => this.props.onChange(value)}\n              />\n              <RaisedButton\n                label={<Trans>Choose folder</Trans>}\n                primary={false}\n                style={styles.button}\n                onClick={() => this._onChooseFolder(titleAndMessage)}\n              />\n            </div>\n          );\n        }}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from './OptionalRequire.js';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n}: {|\n  path: string,\n  outputFilename: string,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      console.log(\n        `Archive written at ${outputFilename}, ${archive.pointer()} total bytes.`\n      );\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire.js';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter.js';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst dialog = electron ? electron.remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = electron.remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return Promise.resolve(true);\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      if (autoSavedTime > saveTime) {\n        return Promise.resolve(true);\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(false);\n  }\n  return Promise.resolve(false);\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onSaveProjectAs,\n  onAutoSaveProject,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Local file system`,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorizations to open it.`;\n    },\n  }),\n}: StorageProvider);\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport CreateProjectDialog from './ProjectCreation/CreateProjectDialog';\nimport Authentification from './Utils/GDevelopServices/Authentification';\nimport './UI/iconmoon-font.css'; // Styles for Iconmoon font.\n\n// Import for Electron powered IDE.\nimport LocalExamples from './ProjectCreation/LocalExamples';\nimport LocalStarters from './ProjectCreation/LocalStarters';\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport { getLocalExporters } from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport UnsavedChangesContext from './MainFrame/UnsavedChangesContext';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentification: Authentification) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentification={authentification}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n, eventsFunctionsExtensionsState }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[LocalFileStorageProvider]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <UnsavedChangesContext.Consumer>\n              {unsavedChanges => (\n                <MainFrame\n                  i18n={i18n}\n                  renderMainMenu={props => <ElectronMainMenu {...props} />}\n                  eventsFunctionsExtensionsState={\n                    eventsFunctionsExtensionsState\n                  }\n                  renderPreviewLauncher={(props, ref) => (\n                    <LocalPreviewLauncher {...props} ref={ref} />\n                  )}\n                  renderExportDialog={props => (\n                    <ExportDialog {...props} exporters={getLocalExporters()} />\n                  )}\n                  renderCreateDialog={props => (\n                    <CreateProjectDialog\n                      {...props}\n                      examplesComponent={LocalExamples}\n                      startersComponent={LocalStarters}\n                    />\n                  )}\n                  renderGDJSDevelopmentWatcher={\n                    isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n                  }\n                  storageProviders={storageProviders}\n                  getStorageProviderOperations={getStorageProviderOperations}\n                  getStorageProvider={getStorageProvider}\n                  resourceSources={localResourceSources}\n                  resourceExternalEditors={localResourceExternalEditors}\n                  extensionsLoader={makeExtensionsLoader({\n                    gd,\n                    objectsEditorService: ObjectsEditorService,\n                    objectsRenderingService: ObjectsRenderingService,\n                    filterExamples: !isDev,\n                  })}\n                  initialFileMetadataToOpen={initialFileMetadataToOpen}\n                  unsavedChanges={unsavedChanges}\n                />\n              )}\n            </UnsavedChangesContext.Consumer>\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport { I18n } from '@lingui/react';\nimport { type I18n as I18nType } from '@lingui/core';\nimport React, { Component } from 'react';\nimport Divider from '@material-ui/core/Divider';\nimport LocalFolderPicker from '../UI/LocalFolderPicker';\nimport { sendNewGameCreated } from '../Utils/Analytics/EventSender';\nimport { Column, Line } from '../UI/Grid';\nimport Text from '../UI/Text';\nimport { findExamples } from './LocalExamplesFinder';\nimport optionalRequire from '../Utils/OptionalRequire.js';\nimport ExamplesList from './ExamplesList';\nimport { showErrorBox } from '../UI/Messages/MessageBox';\nimport { type StorageProvider, type FileMetadata } from '../ProjectsStorage';\nimport LocalFileStorageProvider from '../ProjectsStorage/LocalFileStorageProvider';\nconst path = optionalRequire('path');\nvar fs = optionalRequire('fs-extra');\n\n// To add a new example, add it first in resources/examples (at which point you can see it\n// in the desktop version), then run these scripts:\n// * scripts/update-examples-information-from-resources-examples.js (update metadata)\n// * scripts/update-fixtures-from-resources-examples.js (update web-app examples)\n// and upload the examples to `gdevelop-resources` s3.\n\ntype Props = {|\n  onOpen: (\n    storageProvider: StorageProvider,\n    fileMetadata: FileMetadata\n  ) => void,\n  onChangeOutputPath: (outputPath: string) => void,\n  onExamplesLoaded: () => void,\n  outputPath: string,\n|};\n\ntype State = {|\n  exampleNames: ?Array<string>,\n|};\n\nexport const showGameFileCreationError = (\n  i18n: I18nType,\n  outputPath: string,\n  rawError: Error\n) => {\n  showErrorBox({\n    message: i18n._(\n      t`Unable to create the game in the specified folder. Check that you have permissions to write in this folder: ${outputPath} or choose another folder.`\n    ),\n    rawError,\n    errorId: 'local-example-creation-error',\n  });\n};\n\nexport default class LocalExamples extends Component<Props, State> {\n  state = {\n    exampleNames: null,\n  };\n\n  componentDidMount() {\n    findExamples(examplesPath => {\n      fs.readdir(examplesPath, (error, exampleNames) => {\n        if (error) {\n          console.error('Unable to read examples:', error);\n          return;\n        }\n\n        this.setState(\n          {\n            exampleNames: exampleNames.filter(name => name !== '.DS_Store'),\n          },\n          () => this.props.onExamplesLoaded()\n        );\n      });\n    });\n  }\n\n  createFromExample = (i18n: I18nType, exampleName: string) => {\n    const { outputPath } = this.props;\n    if (!fs || !outputPath) return;\n\n    findExamples(examplesPath => {\n      try {\n        fs.mkdirsSync(outputPath);\n        fs.copySync(path.join(examplesPath, exampleName), outputPath);\n      } catch (error) {\n        showGameFileCreationError(i18n, outputPath, error);\n        return;\n      }\n\n      this.props.onOpen(LocalFileStorageProvider, {\n        fileIdentifier: path.join(outputPath, exampleName + '.json'),\n      });\n      sendNewGameCreated(exampleName);\n    });\n  };\n\n  render() {\n    return (\n      <I18n>\n        {({ i18n }) => (\n          <Column noMargin>\n            <Line expand>\n              <Column expand>\n                <LocalFolderPicker\n                  fullWidth\n                  value={this.props.outputPath}\n                  onChange={this.props.onChangeOutputPath}\n                  type=\"create-game\"\n                />\n              </Column>\n            </Line>\n            <Divider />\n            <Line>\n              <Column>\n                <Text>\n                  <Trans>Choose or search for an example to open:</Trans>\n                </Text>\n              </Column>\n            </Line>\n            <Line>\n              <ExamplesList\n                exampleNames={this.state.exampleNames}\n                onCreateFromExample={exampleName =>\n                  this.createFromExample(i18n, exampleName)\n                }\n              />\n            </Line>\n          </Column>\n        )}\n      </I18n>\n    );\n  }\n}\n","// @flow\n\nimport optionalRequire from '../Utils/OptionalRequire.js';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst app = electron ? electron.remote.app : null;\nconst fs = optionalRequire('fs');\nconst process = optionalRequire('process');\n\nconst tryPath = (\n  path: string,\n  onExists: string => void,\n  onNoAccess: Function\n) =>\n  fs.access(path, fs.constants.R_OK, err => {\n    if (!err) onExists(path);\n    else onNoAccess();\n  });\n\nexport const findExamples = (cb: (?string) => void) => {\n  if (!process || !fs) return '';\n\n  const appPath = app ? app.getAppPath() : process.cwd();\n\n  // First try to find examples in app resources folder\n  tryPath(path.join(appPath, '..', 'examples'), cb, () => {\n    tryPath(\n      path.join(appPath, '..', '..', 'app', 'resources', 'examples'),\n      cb,\n      () => {\n        cb(null);\n      }\n    );\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n"],"sourceRoot":""}